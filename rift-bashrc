#!/bin/bash

# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#

# Define the root and workspace paths by the location of this script, which must
# be at the top level of the repository.
export RIFT_WORKSPACE=$(basename $RIFT_ROOT)

######### PUBLIC FUNCTIONS #####################################################
#
# These are functions that the user can alias or override from their bashrc (so
# they should proceed sourcing the users .bashrc file). Any function that is
# consider essential to code or work performed in a RIFT workspace should be
# defined as a private function.
#

# Updates the RIFT environmental variables
function rift-refresh-env(){
  /usr/bin/env python3 ${RIFT_ROOT}/rift_env.py
  export RIFT_CONFIG=${RIFT_ROOT}/.build/.rift-env
  source ${RIFT_CONFIG}
}

# Changes to the root directory
function rift-goto-root(){
  cd ${RIFT_ROOT}
}

# SSH to remote host and automatically start in equivalent rift-shell
function rift-ssh(){
  sudo=""
  if [ $# -gt 0 -a $1 == "--sudo" ]; then
    sudo="sudo"
    shift
  fi

  include_build_dirs=""
  if [ $RIFT_INCLUDE_BUILD_DIRS == 1 ]; then
    include_build_dirs="--include-build-dirs"
  fi
  ssh $@ -t -t "cd ${RIFT_ROOT}; ${sudo} RIFT_ROOT_SAVE_OLDPWD=${PWD} ./rift-shell -e ${include_build_dirs}"
}

function cdtop() {
  rift-goto-root
}

# Changes to the .install directory
function cdinstall() {
	cd ${RIFT_ROOT}/.install
}

# function to switch to build directory from source dir
function cdbuild() {
  OLDDIR=`pwd`
  NEWDIR=${RIFT_ROOT}
  [ "$NEWDIR" == "/" ] && return
  RELATIVE_PATH=${OLDDIR:${#NEWDIR}+1}
  if [[ $RELATIVE_PATH == .build* ]] ; then
    echo "already in .build directory"
    return
  fi

  array=(${RELATIVE_PATH//\// })
  SUBMODULE=""
  for i in "${!array[@]}"
  do
    if [[ $SUBMODULE != "" ]] ; then
      SUBMODULE="$SUBMODULE/${array[i]}"
    else
      SUBMODULE=${array[i]}
    fi

    if [ -e ${NEWDIR}/${SUBMODULE}/.git ] ; then
      break;
    fi
  done

  SUBDIR=${SUBMODULE//\//_}
  SUBDIR=${SUBDIR/modules_/}
  PROJECTDIR=${RELATIVE_PATH:${#SUBMODULE}+1}
  echo $NEWDIR/.build/${SUBMODULE}/src/${SUBDIR}-build/$PROJECTDIR
  cd $NEWDIR/.build/${SUBMODULE}/src/${SUBDIR}-build/$PROJECTDIR
}

# function to switch to src directory from build directory
function cdsrc() {
  OLDDIR=`pwd`
  NEWDIR=${RIFT_ROOT}
  [ "$NEWDIR" == "/" ] && return

  RELATIVE_PATH=${OLDDIR:${#NEWDIR}+1}
  if [[ $RELATIVE_PATH != .build* ]] ; then
    echo "already in source directory"
    return
  fi

  RELATIVE_PATH=${RELATIVE_PATH/.build\/}

  array=(${RELATIVE_PATH//\// })
  SUBMODULE=""
  for i in "${!array[@]}"
  do
    if [[ $SUBMODULE != "" ]] ; then
      SUBMODULE="$SUBMODULE/${array[i]}"
    else
      SUBMODULE=${array[i]}
    fi

    if [ -e ${NEWDIR}/${SUBMODULE}/.git ] ; then
      break;
    fi
  done

  SUBDIR=${SUBMODULE//\//_}
  SUBDIR=${SUBDIR/modules_/}
  PROJECTDIR=${RELATIVE_PATH:${#SUBMODULE}+1}
  PROJECTDIR=${PROJECTDIR/src\/$SUBDIR-build\/}
  echo $NEWDIR/${SUBMODULE}/$PROJECTDIR
  cd $NEWDIR/${SUBMODULE}/$PROJECTDIR
}

######### PRIVATE FUNCTIONS ####################################################
#
# These are functions that should not be overwritten by the user. Prepend the
# function by a double underscore to mark it as a private function.
#

__rw_restore_saved_env_vars() {
  # Iterate on all current environment variables 
  while read env_line; do
    # Split the envvar key and value by =
    IFS='=' read -a env_key_val <<< "${env_line}";
    env_key="${env_key_val[0]}"
    env_val="${env_key_val[1]}"

    # If the key starts with the save prefix, then restore the 
    # original environment variable.
    if [[ ${env_key} == RIFT_ROOT_SAVE_* ]]; then
      # Strip the prefix
      saved_key=${env_key#"RIFT_ROOT_SAVE_"}

      # Restore the saved environment variable
      export "${saved_key}"="${env_val}"
    fi
  done < <(env)
}

__rw_add_paths() {
  # Add PATH for quick access to harness
  export PATH="${PATH}:${RIFT_INSTALL}/usr/rift/systemtest/harness"

}

# Source the functions in rift-prompt so that they are available if anyone wants
# to use them from their .bashrc or .bash_profile
source ${RIFT_ROOT}/rift-prompt

# Set a make alias to run parallel builds.
alias rwmake="make -j16"

if [ -n "${PS1}" ]; then
  if [ -f "${HOME}"/.bash_profile ]; then
    source ${HOME}/.bash_profile
  fi
else
  # Source the user bashrc, if it is available
  if [[ -f ${HOME}/.bashrc ]]; then
    source ${HOME}/.bashrc
  fi
fi

# Set a consistent umask across all environments.
# This was done because some installs (confd), use
# explicit install permissions.  And if there install permissions
# conlifct with default umask, we get RPM install errors from
# build cache.  See RIFT-2745
umask 002

# Prevent running as root from creating files in the workspace
# that the real user cannot delete
if [ $(id -u) == "0" ]; then
   umask 000
fi

__rw_restore_saved_env_vars

if [ -z "${RIFT_CONFIG}" ]; then
  rift-refresh-env
else
  source ${RIFT_CONFIG}
fi
if [ $RIFT_INCLUDE_BUILD_DIRS == 0 ]; then
  export GI_TYPELIB_PATH=$(echo $GI_TYPELIB_PATH | tr ':' '\n' | grep -v .build | tr '\n' ':')
  export PLUGINDIR=$(echo $PLUGINDIR | tr ':' '\n' | grep -v .build | tr '\n' ':')
fi
if [ -f "${HOME}/.riftshell.rc" ]; then
    source ${HOME}/.riftshell.rc
fi
__rw_add_paths
