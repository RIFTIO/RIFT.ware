#!/bin/bash

# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#

set -e

__usage(){
cat <<USAGEDOC
NAME
      rift-shell - Creates a complete environment for running RIFT software

SYNOPSIS
      rift-shell [-c|--config <file>] [-e|--use-existing] [-h|--help] [--] <command>

DESCRIPTION
      The rift-shell creates all of the environmental variables necessary to run
      and develop RIFT software. Currently the environmental variables are
      inferred from the codebase and written to,

          ${RIFT_ROOT}/.build/.rift-env

      When you enter the rift-shell the first obvious difference is the prompt
      on the command line. The name of the workspace associated with the
      rift-shell is prepended to the prompt. As long as you are within the
      associated workspace it will be there. If you leave the workspace, this
      workspace name will be replaced by 'INVALID' to indicate that you are no
      longer in the workspace associated with the rift-shell.

      The rift-shell also provides several useful functions for development.
      These functions are defined in rift-bashrc and everyone is encouraged to
      add to the list. One import function there is 'rift-refresh-env'. This
      function is used to create the .rift-env file that contains the current
      RIFT environment. If you need to update the environment you can either
      exit and restart the rift-shell or simply execute rift-refresh-env from
      the terminal.

OPTIONS
      -c,--config <file>      The rift-shell will use the specified file instead
                              of constructing the .rift-env file.

      -e,--use-existing       This option instructs the rift-shell to skip
                              generating the .rift-env file, but only if one
                              already exists.

      -h, --help              Prints out this information

      -r, --root              cd to RIFT_ROOT

      -w                      use test_wrapper.sh

      -E                      set an environment var

      --                      The double-dash is used to indicate to the
                              rift-shell that it should stop parsing the
                              following command line arguments, and instead
                              invoke those arguments after entering and setting
                              up the rift environment.

USAGEDOC
}

# Hold on to current RIFT_ROOT and RIFT_SHELL env vars for use later on.
CURRENT_RIFT_ROOT=$RIFT_ROOT
CURRENT_RIFT_SHELL=$RIFT_SHELL

# Define defaults
RIFT_ROOT=$(realpath "$(dirname "$0")")
# Set the RIFT_SHELL to the ROOT to track which workspace the SHELL is set to.
RIFT_SHELL=1

RIFT_INCLUDE_BUILD_DIRS=${RIFT_INCLUDE_BUILD_DIRS}
RIFT_CONFIG=
CD_RIFT_ROOT=0
USE_TEST_WRAPPER=0

if [ -z ${RIFT_INCLUDE_BUILD_DIRS} ]; then
  RIFT_INCLUDE_BUILD_DIRS=0
fi

# Parse command line arguments
while [ $# -gt 0 ]; do
  case $1 in
    -w)
      USE_TEST_WRAPPER=1;;
    -r|--root)
      CD_RIFT_ROOT=1;;
    -c|--config)
      RIFT_CONFIG=$2
      shift
      ;;
    -e|--use-existing)
      if [ -s "${RIFT_ROOT}"/.build/.rift-env ]; then
        RIFT_CONFIG="${RIFT_ROOT}"/.build/.rift-env
        [ -t 1 ] && echo " * Using existing configuration file" >&2
      fi
      ;;
    --include-build-dirs)
      RIFT_INCLUDE_BUILD_DIRS=1
      ;;
    -E)
      export "$2"
      shift
      ;;
    -h|--help)
      shift
      __usage
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Unrecognized option"
      exit 1
      ;;
  esac
  shift
done

# At this point the commands have been parsed so it should be safe to export
# these variables.
export RIFT_ROOT RIFT_SHELL RIFT_CONFIG RIFT_INCLUDE_BUILD_DIRS

if [ -z "$CCACHE_DIR" ]; then
    echo "WARNING CCACHE_DIR not set"
fi

# This check is used to determine whether the shell is in interactive mode or
# non-interactive mode.
if [ $CD_RIFT_ROOT == 1 ]; then
    cd $RIFT_ROOT
fi
if [ $# -gt 0 ]; then

  # Found solution to properly quote commands passed through 'bash -c'
  # http://stackoverflow.com/questions/1668649/how-to-keep-quotes-in-args
  args=''
  for i in "$@"; do
      args="$args \"${i//\"/\\\"}\""
  done;

  if [ $USE_TEST_WRAPPER == 1 ]; then
    args="$RIFT_ROOT/scripts/env/test_wrapper2.sh $args"
  fi
  if [[ ! -z "${CURRENT_RIFT_SHELL}" ]]; then
    # If we're already in a RIFT_SHELL then make sure it's the correct one.
    if [[ "${CURRENT_RIFT_ROOT}" != "${RIFT_ROOT}" ]]; then
      echo "You are already running a RIFT shell, you must exit this one first."
      exit 1
    else
      # We're already in the correct RIFT_SHELL, just invoke the command.
      exec /bin/bash -c "exec $args"
    fi
  else
    exec /bin/bash -c "source ${RIFT_ROOT}/rift-bashrc; exec $args"
  fi

else
  # Check to see if we are current in a RIFT shell.
  if [[ ! -z "${CURRENT_RIFT_SHELL}" ]]; then
    echo "You are already running a RIFT shell, you must exit this one first."
    exit 1
  fi

  export SHELL=/bin/bash
  exec /bin/bash --rcfile ${RIFT_ROOT}/rift-bashrc
fi
