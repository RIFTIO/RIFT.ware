<?xml version="1.0"?>
<section id="classes">
	<h>Classes</h>
	<p>A class is a data type that can contain fields, constants, methods, properties, and signals. Class types support inheritance, a mechanism whereby a derived class can extend and specialize a base class.</p>
	<section id="declaration">
		<h>Class declarations</h>
		<p>The simplest class declaration looks like this:</p>
		<blockcode>
class ClassName {
	&lt;class-member&gt;
}</blockcode>
		<p>As class types support inheritance, you can specify a base class you want to derive from:</p>
		<blockcode>
class ClassName : BaseClassName {
	&lt;class-member&gt;
}</blockcode>
		<div role="note">
			<h>GObject Note</h>
			<p>It's recommended that you derive all your classes directly or indirectly from GLib.Object, unless you have a strong reason not to. Some class features are not supported for classes not deriving from GLib.Object.</p>
		</div>
		<p>Classes cannot have multiple base classes, however they may implement multiple interfaces:</p>
		<blockcode>
class ClassName : BaseClassName, FirstInterfaceName, SecondInterfaceName {
	&lt;class-member&gt;
}</blockcode>
		<p>You may optionally specify an accessibility modifier. Classes support <code>public</code> and <code>private</code> accessibility and default to private if you don't specify one. Public classes may be accessed from outside the library or application they are defined in.</p>
		<blockcode>
public class ClassName {
	&lt;class-member&gt;
}</blockcode>
		<p>The <code>abstract</code> modifier may be placed between the optional accessibility modifier and the class name to define an abstract class. An abstract class cannot be instantiated and is used as a base class for derived classes.</p>
		<blockcode>
abstract class ClassName {
	&lt;class-member&gt;
}</blockcode>
		<p>The <code>static</code> modifier may be placed between the optional accessibility modifier and the class name to define a static class. A static class cannot be instantiated and may not have a base class. It can also not be used as a base class for derived classes and may only contain static members. Static classes are implicitly abstract, you may not use both modifiers, <code>abstract</code> and <code>static</code>, in the same class declaration.</p>
		<blockcode>
static class ClassName {
	&lt;class-member&gt;
}</blockcode>
		<p>You may optionally prefix the class name with a namespace name. This places the class in the specified namespace without the need for a separate namespace declaration.</p>
		<blockcode>
class NamespaceName.ClassName {
	&lt;class-member&gt;
}</blockcode>
	</section>
	<section id="fields">
		<h>Fields</h>
		<p>Documentation</p>
	</section>
	<section id="methods">
		<h>Methods</h>
		<p>Documentation</p>
	</section>
	<section id="properties">
		<h>Properties</h>
		<blockquote>
property-declaration:
	[ access-modifier ] [ member-modifiers ] type identifier <l>{</l> accessor-declarations [ default-value ] <l>}</l> <l>;</l>

accessor-declarations:
	get-accessor [ set-accessor ]
	set-accessor [ get-accessor ]

get-accessor:
	[ access-modifier ] <l>get</l> <l>;</l>
	[ access-modifier ] <l>get</l> <l>{</l> statement-list <l>}</l>

set-accessor:
	[ access-modifier ] <l>set</l> [ <l>construct</l> ] <l>;</l>
	[ access-modifier ] <l>set</l> [ <l>construct</l> ] <l>{</l> statement-list <l>}</l>

default-value:
	<l>default =</l> expression <l>;</l>
		</blockquote>
	</section>
	<section id="signals">
		<h>Signals</h>
		<p>The signal system allows objects to emit signals that can be handled by user-provided signal handlers.</p>
		<blockquote>
signal-declaration:
	[ access-modifier ] <l>signal</l> return-type identifier <l>(</l> [ parameter-list ] <l>)</l> <l>;</l>
		</blockquote>
	</section>
</section>

