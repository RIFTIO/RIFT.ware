<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="glib-functions">
  <refnamediv>
    <refname>glib Functions</refname>
    <refpurpose>miscellaneous functions</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <programlisting>
<methodsynopsis language="python">
	<methodname><link
linkend="function-glib--spawn-async">glib.spawn_async</link></methodname>
	<methodparam><parameter role="keyword">argv</parameter></methodparam>
	<methodparam><parameter role="keyword">envp</parameter><initializer>None</initializer></methodparam>
 	<methodparam><parameter role="keyword">working_directory</parameter><initializer>None</initializer></methodparam>
	<methodparam><parameter role="keyword">flags</parameter><initializer>0</initializer></methodparam>
 	<methodparam><parameter role="keyword">child_setup</parameter><initializer>None</initializer></methodparam>
	<methodparam><parameter role="keyword">user_data</parameter><initializer>None</initializer></methodparam>
 	<methodparam><parameter role="keyword">standard_input</parameter><initializer>None</initializer></methodparam>
	<methodparam><parameter role="keyword">standard_output</parameter><initializer>None</initializer></methodparam>
 	<methodparam><parameter role="keyword">standard_error</parameter><initializer>None</initializer></methodparam>
     </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-glib--threads-init">glib.threads_init</link></methodname>
      </methodsynopsis></programlisting>

  </refsect1>

  <refsect1>
    <title>Description</title>

    <para>These functions are part of the <literal>PyGObject</literal> glib
module but are not directly associated with a specific class.</para>

  </refsect1>

  <refsect1>
    <title>Functions</title>

    <refsect2 id="function-glib--spawn-async">
      <title>glib.spawn_async</title>
      
      <programlisting><methodsynopsis language="python">
        <methodname>glib.spawn_async</methodname>
          <methodparam><parameter role="keyword">argv</parameter></methodparam>
          <methodparam><parameter role="keyword">envp</parameter><initializer>None</initializer></methodparam>
          <methodparam><parameter role="keyword">working_directory</parameter><initializer>None</initializer></methodparam>
          <methodparam><parameter role="keyword">flags</parameter><initializer>0</initializer></methodparam>
          <methodparam><parameter role="keyword">child_setup</parameter><initializer>None</initializer></methodparam>
          <methodparam><parameter role="keyword">user_data</parameter><initializer>None</initializer></methodparam>
          <methodparam><parameter role="keyword">standard_input</parameter><initializer>None</initializer></methodparam>
          <methodparam><parameter role="keyword">standard_output</parameter><initializer>None</initializer></methodparam>
          <methodparam><parameter role="keyword">standard_error</parameter><initializer>None</initializer></methodparam>
 	</methodsynopsis></programlisting>
      <variablelist role="params">
        <varlistentry>
          <term><parameter role="keyword">argv</parameter>&nbsp;:</term>
          <listitem><simpara>a sequence of strings containing the arguments
of the child process</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">envp</parameter>&nbsp;:</term>
          <listitem><simpara>the child's environment or
<literal>None</literal> to inherit the parent's
environment.</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">working_directory</parameter>&nbsp;:</term>
          <listitem><simpara>the child's current working directory, or
<literal>None</literal> to inherit parent's</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">flags</parameter>&nbsp;:</term>
          <listitem><simpara>flags from the <xref
linkend="glib-spawn-flag-constants"
endterm="glib-spawn-flag-constants-title"></xref>.</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">child_setup</parameter>&nbsp;:</term>
          <listitem><simpara>a function to run in the child just before
calling <function>exec</function>()</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">user_data</parameter>&nbsp;:</term>
          <listitem><simpara>the user data for the
<parameter>child_setup</parameter> function</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">standard_input</parameter>&nbsp;:</term>
          <listitem><simpara>if <literal>True</literal> return the file
descriptor for the child's stdin</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">standard_output</parameter>&nbsp;:</term>
          <listitem><simpara>if <literal>True</literal> return the file
descriptor for the child's stdout</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">standard_error</parameter>&nbsp;:</term>
          <listitem><simpara>if <literal>True</literal> return the file
descriptor for the child's stderr</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara>a 4-tuple containing the child's process id and
the stdin, stdout and stderr file descriptor integers.</simpara></listitem>
        </varlistentry>
      </variablelist>
      <note>
        <para>This function is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <function>glib.spawn_async</function>() function executes
a child program asynchronously (your program will not block waiting for the
child to exit). The child program is specified by the only argument that
must be provided, <parameter>argv</parameter>. <parameter>argv</parameter>
should be a sequence of strings, to be passed as the argument vector for the
child. The first string in <parameter>argv</parameter> is of course the name
of the program to execute. By default, the name of the program must be a
full path; the <envar>PATH</envar> shell variable will only be searched if
you pass the <literal>GLib.SpawnFlags.SEARCH_PATH</literal> flag in
<parameter>flags</parameter>. The function returns a 4-tuple containing the
child's process id and the file descriptors for the child's stdin, stdout
and stderr. The stdin, stdout and stderr file descriptors are returned only
ofthe corresponding <parameter>standard_input</parameter>,
<parameter>standard_output</parameter> or
<parameter>standard_error</parameter> params are
<literal>True</literal>.</para>

      <para>On Windows, the low-level child process creation API
(<function>CreateProcess</function>()) doesn't use argument vectors, but a
command line. The C runtime library's <function>spawn*</function>() family
of functions (which <link
linkend="function-glib--spawn-async"><function>glib.spawn_async</function>()</link>
eventually calls) paste the argument vector elements into a command line,
and the C runtime startup code does a corresponding reconstruction of an
argument vector from the command line, to be passed to
<function>main</function>(). Complications arise when you have argument
vector elements that contain spaces of double quotes. The
<function>spawn*</function>() functions don't do any quoting or escaping,
but on the other hand the startup code does do unquoting and unescaping in
order to enable receiving arguments with embedded spaces or double
quotes. To work around this asymmetry, the <link
linkend="function-glib--spawn-async"><function>glib.spawn_async</function>()</link>
function will do quoting and escaping on argument vector elements that need
it before calling the C runtime <function>spawn</function>()
function.</para>

      <para><parameter>envp</parameter> is a sequence of strings, where each
 string has the form <literal>KEY=VALUE</literal>. This will become the
 child's environment. If <parameter>envp</parameter> is
 <parameter>None</parameter> or not specified, the child inherits its
 parent's environment.</para>

      <para><parameter>flags</parameter> should be the bitwise
<literal>OR</literal> of the <xref linkend="glib-spawn-flag-constants"
endterm="glib-spawn-flag-constants-title"></xref> you want to affect the
function's behaviour. The <literal>GLib.SpawnFlags.DO_NOT_REAP_CHILD</literal>
flag means that the child will not automatically be reaped; you must use a
GChildWatch source to be notified about the death of the child
process. Eventually you must call g_spawn_close_pid() on the child_pid, in
order to free resources which may be associated with the child process. (On
Unix, using a GChildWatch source is equivalent to calling
<function>waitpid</function>() or handling the <literal>SIGCHLD</literal>
signal manually. On Windows, calling g_spawn_close_pid() is equivalent to
calling <function>CloseHandle</function>() on the process handle
returned).</para>

      <para><literal>GLib.SpawnFlags.LEAVE_DESCRIPTORS_OPEN</literal> means
that the parent's open file descriptors will be inherited by the child;
otherwise all descriptors except stdin/stdout/stderr will be closed before
calling <function>exec</function>() in the
child. <literal>GLib.SpawnFlags.SEARCH_PATH</literal> means that
<parameter>argv</parameter>[0] need not be an absolute path, it will be
looked for in the user's
<envar>PATH</envar>. <literal>GLib.SpawnFlags.STDOUT_TO_DEV_NULL</literal>
means that the child's standard output will be discarded, instead of going
to the same location as the parent's standard output. If you use this flag,
<parameter>standard_output</parameter> must be
<literal>None</literal>. <literal>GLib.SpawnFlags.STDERR_TO_DEV_NULL</literal>
means that the child's standard error will be discarded, instead of going to
the same location as the parent's standard error. If you use this flag,
<parameter>standard_error</parameter> must be
<literal>None</literal>. <literal>GLib.SpawnFlags.CHILD_INHERITS_STDIN</literal>
means that the child will inherit the parent's standard input (by default,
the child's standard input is attached to
<filename>/dev/null</filename>). If you use this flag,
<parameter>standard_input</parameter> must be
<literal>None</literal>. <literal>GLib.SpawnFlags.FILE_AND_ARGV_ZERO</literal>
means that the first element of <parameter>argv</parameter> is the file to
execute, while the remaining elements are the actual argument vector to pass
to the file. Normally the <link
linkend="function-glib--spawn-async"><function>glib.spawn_async</function>()</link>
function uses <parameter>argv</parameter>[0] as the file to execute, and
passes all of <parameter>argv</parameter> to the child.</para>

      <para><parameter>child_setup</parameter> and
<parameter>user_data</parameter> are a function and user data. On POSIX
platforms, the function is called in the child after GLib has performed all
the setup it plans to perform (including creating pipes, closing file
descriptors, etc.) but before calling <function>exec</function>(). That is,
<parameter>child_setup</parameter> is called just before calling
<function>exec</function>() in the child. Obviously actions taken in this
function will only affect the child, not the parent. On Windows, there is no
separate <function>fork</function>() and <function>exec</function>()
functionality. Child processes are created and run right away with one API
call,
<function>CreateProcess</function>(). <parameter>child_setup</parameter> is
called in the parent process just before creating the child process. You
should carefully consider what you do in <parameter>child_setup</parameter>
if you intend your software to be portable to Windows.</para>

      <para>The returned child process id can be used to send signals to the
child, or to wait for the child if you specified the
<literal>GLib.SpawnFlags.DO_NOT_REAP_CHILD</literal> flag.  On Windows, child
pid will be returned only if you specified the
<literal>GLib.SpawnFlags.DO_NOT_REAP_CHILD</literal> flag.</para>

      <para>The caller of the <link
linkend="function-glib--spawn-async"><function>glib.spawn_async</function>()</link>
must close any returned file descriptors when they are no longer in
use.</para>

      <para>If <parameter>standard_input</parameter> is
<literal>None</literal>, the child's standard input is attached to
<filename>/dev/null</filename> unless
<literal>GLib.SpawnFlags.CHILD_INHERITS_STDIN</literal> is set.</para>

      <para>If <parameter>standard_error</parameter> is
<literal>None</literal>, the child's standard error goes to the same
location as the parent's standard error unless
<literal>GLib.SpawnFlags.STDERR_TO_DEV_NULL</literal> is set.</para>

      <para>If <parameter>standard_output</parameter> is
<literal>None</literal>, the child's standard output goes to the same
location as the parent's standard output unless
<literal>GLib.SpawnFlags.STDOUT_TO_DEV_NULL</literal> is set.</para>

      <para>If an error occurs, the glib.GError exception will be
raised.</para>

    </refsect2>

    <refsect2 id="function-glib--threads-init">
      <title>glib.threads_init</title>
      
      <programlisting><methodsynopsis language="python">
        <methodname>glib.threads_init</methodname>
        <methodparam><parameter></parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist role="params">
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara></simpara></listitem>
        </varlistentry>
      </variablelist>
      <note>
        <para>This function is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <function>threads_init</function>() function initializes the
      the use of Python threading in the glib module. This function is
      different than the <link
      linkend="function-gdk--threads-init"><function>gtk.gdk.threads_init</function>()</link>
      function as that function also initializes the gdk threads.</para>

    </refsect2>

    <refsect2 id="function-glib--signal-accumulator-true-handled">
      <title>glib.signal_accumulator_true_handled</title>
      
      <programlisting><methodsynopsis language="python">
        <methodname>glib.signal_accumulator_true_handled</methodname>
	</methodsynopsis></programlisting>

      <note>
        <para>This function is available in PyGTK 2.8 and above.</para>
      </note>

      <para>The <function>signal_accumulator_true_handled</function>()
      function is only used as accumulator argument when registering
      signals.</para>

    </refsect2>

  </refsect1>

</refentry>
