AT_BANNER([OpenFlow actions])

AT_SETUP([OpenFlow 1.0 action translation])
AT_KEYWORDS([ofp-actions OF1.0])
AT_DATA([test-data], [dnl
# actions=LOCAL
0000 0008 fffe 04d2

# actions=CONTROLLER:1234
0000 0008 fffd 04d2

# actions=mod_vlan_vid:9
0001 0008 0009 0000

# actions=mod_vlan_pcp:6
0002 0008 06 000000

# actions=strip_vlan
0003 0008 00000000

# actions=mod_dl_src:00:11:22:33:44:55
0004 0010 001122334455 000000000000

# actions=mod_dl_dst:10:20:30:40:50:60
0005 0010 102030405060 000000000000

# actions=mod_nw_src:1.2.3.4
0006 0008 01020304

# actions=mod_nw_dst:192.168.0.1
0007 0008 c0a80001

# actions=mod_nw_tos:48
0008 0008 30 000000

# actions=mod_tp_src:80
0009 0008 0050 0000

# actions=mod_tp_dst:443
000a 0008 01bb 0000

# actions=enqueue:10:55
000b 0010 000a 000000000000 00000037

# actions=resubmit:5
ffff 0010 00002320 0001 0005 00000000

# actions=set_tunnel:0x12345678
ffff 0010 00002320 0002 0000 12345678

# actions=set_queue:2309737729
ffff 0010 00002320 0004 0000 89abcd01

# actions=pop_queue
ffff 0010 00002320 0005 000000000000

# actions=move:NXM_OF_IN_PORT[]->NXM_OF_VLAN_TCI[]
ffff 0018 00002320 0006 0010 0000 0000 00000002 00000802

# actions=load:0xf009->NXM_OF_VLAN_TCI[]
ffff 0018 00002320 0007 000f 00000802 000000000000f009

# actions=note:11.e9.9a.ad.67.f3
ffff 0010 00002320 0008 11e99aad67f3

# actions=set_tunnel64:0xc426384d49c53d60
ffff 0018 00002320 0009 000000000000 c426384d49c53d60

# actions=set_tunnel64:0x885f3298
ffff 0018 00002320 0009 000000000000 00000000885f3298

# bad OpenFlow10 actions: OFPBIC_UNSUP_INST
& ofp_actions|WARN|write_metadata instruction not allowed here
ffff 0020 00002320 0016 000000000000 fedcba9876543210 ffffffffffffffff

# bad OpenFlow10 actions: OFPBIC_UNSUP_INST
& ofp_actions|WARN|write_metadata instruction not allowed here
ffff 0020 00002320 0016 000000000000 fedcba9876543210 ffff0000ffff0000

# actions=multipath(eth_src,50,modulo_n,1,0,NXM_NX_REG0[])
ffff 0020 00002320 000a 0000 0032 0000 0000 0000 0000 0000 0000 001f 00010004

# actions=bundle(eth_src,0,hrw,ofport,slaves:4,8)
ffff 0028 00002320 000c 0001 0000 0000 00000002 0002 0000 00000000 00000000 dnl
0004 0008 00000000

# actions=bundle_load(eth_src,0,hrw,ofport,NXM_NX_REG0[],slaves:4,8)
ffff 0028 00002320 000d 0001 0000 0000 00000002 0002 001f 00010004 00000000 dnl
0004 0008 00000000

# actions=resubmit(10,5)
ffff 0010 00002320 000e 000a 05 000000

# actions=output:NXM_NX_REG1[5..10]
ffff 0018 00002320 000f 0145 00010204 ffff 000000000000

# actions=learn(table=2,idle_timeout=10,hard_timeout=20,fin_idle_timeout=2,fin_hard_timeout=4,priority=80,cookie=0x123456789abcdef0,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],output:NXM_OF_IN_PORT[])
ffff 0048 00002320 0010 000a 0014 0050 123456789abcdef0 0000 02 00 0002 0004 dnl
000c 00000802 0000 00000802 0000 dnl
0030 00000406 0000 00000206 0000 dnl
1010 00000002 0000 dnl
00000000

# actions=exit
ffff 0010 00002320 0011 000000000000

# actions=dec_ttl
ffff 0010 00002320 0012 000000000000

# actions=fin_timeout(idle_timeout=10,hard_timeout=20)
ffff 0010 00002320 0013 000a 0014 0000

# actions=controller(reason=invalid_ttl,max_len=1234,id=5678)
ffff 0010 00002320 0014 04d2 162e 02 00

# actions=dec_ttl(32768,12345,90,765,1024)
ffff 0020 00002320 0015 000500000000 80003039005A02fd 0400000000000000

# actions=sample(probability=12345,collector_set_id=23456,obs_domain_id=34567,obs_point_id=45678)
ffff 0018 00002320 001d 3039 00005BA0 00008707 0000B26E

# bad OpenFlow10 actions: OFPBAC_BAD_LEN
& ofp_actions|WARN|OpenFlow action OFPAT_OUTPUT length 240 exceeds action buffer length 8
& ofp_actions|WARN|bad action at offset 0 (OFPBAC_BAD_LEN):
& 00000000  00 00 00 f0 00 00 00 00-
00 00 00 f0 00 00 00 00

# bad OpenFlow10 actions: OFPBAC_BAD_LEN
& ofp_actions|WARN|OpenFlow action OFPAT_OUTPUT length 16 not in valid range [[8,8]]
& ofp_actions|WARN|bad action at offset 0 (OFPBAC_BAD_LEN):
& 00000000  00 00 00 10 ff fe ff ff-00 00 00 00 00 00 00 00
00 00 00 10 ff fe ff ff 00 00 00 00 00 00 00 00

# bad OpenFlow10 actions: OFPBAC_BAD_LEN
& ofp_actions|WARN|OpenFlow action NXAST_DEC_TTL_CNT_IDS length 17 is not a multiple of 8
ffff 0011 00002320 0015 0001 00000000 0000000000000000

])
sed '/^[[#&]]/d' < test-data > input.txt
sed -n 's/^# //p; /^$/p' < test-data > expout
sed -n 's/^& //p' < test-data > experr
AT_CAPTURE_FILE([input.txt])
AT_CAPTURE_FILE([expout])
AT_CAPTURE_FILE([experr])
AT_CHECK(
  [ovs-ofctl '-vPATTERN:console:%c|%p|%m' parse-actions OpenFlow10 < input.txt],
  [0], [expout], [experr])
AT_CLEANUP

AT_SETUP([OpenFlow 1.0 "instruction" translations])
AT_KEYWORDS([ofp-actions OF1.0 instruction])
AT_DATA([test-data], [dnl
dnl Try a couple of ordinary actions to make sure they're accepted,
dnl but there's no point in retrying all the actions from the previous test.
# actions=LOCAL
0000 0008 fffe 04d2

# actions=mod_dl_src:00:11:22:33:44:55
0004 0010 001122334455 000000000000

dnl Now check that write_metadata is accepted.
# actions=write_metadata:0xfedcba9876543210
ffff 0020 00002320 0016 000000000000 fedcba9876543210 ffffffffffffffff

# actions=write_metadata:0xfedcba9876543210/0xffff0000ffff0000
ffff 0020 00002320 0016 000000000000 fedcba9876543210 ffff0000ffff0000

])
sed '/^[[#&]]/d' < test-data > input.txt
sed -n 's/^# //p; /^$/p' < test-data > expout
sed -n 's/^& //p' < test-data > experr
AT_CAPTURE_FILE([input.txt])
AT_CAPTURE_FILE([expout])
AT_CAPTURE_FILE([experr])
AT_CHECK(
  [ovs-ofctl '-vPATTERN:console:%c|%p|%m' parse-instructions OpenFlow10 < input.txt],
  [0], [expout], [experr])
AT_CLEANUP

AT_SETUP([OpenFlow 1.1 action translation])
AT_KEYWORDS([ofp-actions OF1.1])
AT_DATA([test-data], [dnl
# actions=LOCAL
0000 0010 fffffffe 04d2 000000000000

# actions=CONTROLLER:1234
0000 0010 fffffffd 04d2 000000000000

# actions=set_vlan_vid:9
0001 0008 0009 0000

# actions=set_vlan_pcp:6
0002 0008 06 000000

# actions=mod_dl_src:00:11:22:33:44:55
0003 0010 001122334455 000000000000

# actions=mod_dl_dst:10:20:30:40:50:60
0004 0010 102030405060 000000000000

# actions=mod_nw_src:1.2.3.4
0005 0008 01020304

# actions=mod_nw_dst:192.168.0.1
0006 0008 c0a80001

# actions=mod_nw_tos:48
0007 0008 30 000000

# actions=mod_tp_src:80
0009 0008 0050 0000

# actions=mod_tp_dst:443
000a 0008 01bb 0000

# actions=pop_vlan
0012 0008 00000000

# actions=set_queue:2309737729
0015 0008 89abcd01

dnl 802.1ad isn't supported at the moment
dnl # actions=push_vlan:0x88a8
dnl 0011 0008 88a8 0000
# actions=push_vlan:0x8100
0011 0008 8100 0000

# actions=resubmit:5
ffff 0010 00002320 0001 0005 00000000

# actions=set_tunnel:0x12345678
ffff 0010 00002320 0002 0000 12345678

# actions=pop_queue
ffff 0010 00002320 0005 000000000000

# actions=move:NXM_OF_IN_PORT[]->NXM_OF_VLAN_TCI[]
ffff 0018 00002320 0006 0010 0000 0000 00000002 00000802

# actions=load:0xf009->NXM_OF_VLAN_TCI[]
ffff 0018 00002320 0007 000f 00000802 000000000000f009

# actions=note:11.e9.9a.ad.67.f3
ffff 0010 00002320 0008 11e99aad67f3

# actions=set_tunnel64:0xc426384d49c53d60
ffff 0018 00002320 0009 000000000000 c426384d49c53d60

# actions=set_tunnel64:0x885f3298
ffff 0018 00002320 0009 000000000000 00000000885f3298

dnl Write-Metadata is only allowed in contexts that allow instructions.
& ofp_actions|WARN|write_metadata instruction not allowed here
# bad OpenFlow11 actions: OFPBIC_UNSUP_INST
ffff 0020 00002320 0016 000000000000 fedcba9876543210 ffffffffffffffff

# actions=multipath(eth_src,50,modulo_n,1,0,NXM_NX_REG0[])
ffff 0020 00002320 000a 0000 0032 0000 0000 0000 0000 0000 0000 001f 00010004

# actions=bundle(eth_src,0,hrw,ofport,slaves:4,8)
ffff 0028 00002320 000c 0001 0000 0000 00000002 0002 0000 00000000 00000000 dnl
0004 0008 00000000

# actions=bundle_load(eth_src,0,hrw,ofport,NXM_NX_REG0[],slaves:4,8)
ffff 0028 00002320 000d 0001 0000 0000 00000002 0002 001f 00010004 00000000 dnl
0004 0008 00000000

# actions=resubmit(10,5)
ffff 0010 00002320 000e 000a 05 000000

# actions=output:NXM_NX_REG1[5..10]
ffff 0018 00002320 000f 0145 00010204 ffff 000000000000

# actions=learn(table=2,idle_timeout=10,hard_timeout=20,fin_idle_timeout=2,fin_hard_timeout=4,priority=80,cookie=0x123456789abcdef0,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],output:NXM_OF_IN_PORT[])
ffff 0048 00002320 0010 000a 0014 0050 123456789abcdef0 0000 02 00 0002 0004 dnl
000c 00000802 0000 00000802 0000 dnl
0030 00000406 0000 00000206 0000 dnl
1010 00000002 0000 dnl
00000000

# actions=exit
ffff 0010 00002320 0011 000000000000

dnl OpenFlow 1.1 OFPAT_DEC_TTL
# actions=dec_ttl
0018 0008 00000000

# actions=fin_timeout(idle_timeout=10,hard_timeout=20)
ffff 0010 00002320 0013 000a 0014 0000

# actions=controller(reason=invalid_ttl,max_len=1234,id=5678)
ffff 0010 00002320 0014 04d2 162e 02 00

# actions=dec_ttl(32768,12345,90,765,1024)
ffff 0020 00002320 0015 000500000000 80003039005A02fd 0400000000000000

# actions=sample(probability=12345,collector_set_id=23456,obs_domain_id=34567,obs_point_id=45678)
ffff 0018 00002320 001d 3039 00005BA0 00008707 0000B26E

])
sed '/^[[#&]]/d' < test-data > input.txt
sed -n 's/^# //p; /^$/p' < test-data > expout
sed -n 's/^& //p' < test-data > experr
AT_CAPTURE_FILE([input.txt])
AT_CAPTURE_FILE([expout])
AT_CAPTURE_FILE([experr])
AT_CHECK(
  [ovs-ofctl '-vPATTERN:console:%c|%p|%m' parse-actions OpenFlow11 < input.txt],
  [0], [expout], [experr])
AT_CLEANUP

AT_SETUP([OpenFlow 1.1 instruction translation])
AT_KEYWORDS([OF1.1 instruction ofp-actions])
AT_DATA([test-data], [dnl
# actions=LOCAL
0004 0018 00000000 dnl
0000 0010 fffffffe 04d2 000000000000

dnl Apply-Actions non-zero padding
# actions=drop
#  0: 00 -> (none)
#  1: 04 -> (none)
#  2: 00 -> (none)
#  3: 08 -> (none)
#  4: 00 -> (none)
#  5: 00 -> (none)
#  6: 00 -> (none)
#  7: 01 -> (none)
0004 0008 00000001

dnl Check that an empty Apply-Actions instruction gets dropped.
# actions=drop
#  0: 00 -> (none)
#  1: 04 -> (none)
#  2: 00 -> (none)
#  3: 08 -> (none)
#  4: 00 -> (none)
#  5: 00 -> (none)
#  6: 00 -> (none)
#  7: 00 -> (none)
0004 0008 00000000

dnl Duplicate instruction type:
# bad OpenFlow11 instructions: OFPBIC_DUP_INST
0004 0008 00000000 0004 0008 00000000

dnl Instructions not multiple of 8 in length.
& ofp_actions|WARN|OpenFlow message instructions length 9 is not a multiple of 8
# bad OpenFlow11 instructions: OFPBIC_BAD_LEN
0004 0009 01 00000000

dnl Goto-Table instruction too long.
# bad OpenFlow11 instructions: OFPBIC_BAD_LEN
0001 0010 01 000000 0000000000000000

dnl Goto-Table 1 instruction non-zero padding
# actions=goto_table:1
#  7: 01 -> 00
0001 0008 01 000001

dnl Goto-Table 1 instruction go back to the previous table.
# bad OpenFlow11 instructions: OFPBIC_BAD_TABLE_ID
2,0001 0008 01 000000

dnl Goto-Table 1
# actions=goto_table:1
0001 0008 01 000000

dnl Write-Metadata.
# actions=write_metadata:0xfedcba9876543210
0002 0018 00000000 fedcba9876543210 ffffffffffffffff

dnl Write-Metadata as Nicira extension action is transformed into instruction.
# actions=write_metadata:0xfedcba9876543210
#  1: 04 -> 02
#  3: 28 -> 18
#  8: ff -> fe
#  9: ff -> dc
# 10: 00 -> ba
# 11: 20 -> 98
# 12: 00 -> 76
# 13: 00 -> 54
# 14: 23 -> 32
# 15: 20 -> 10
# 16: 00 -> ff
# 17: 16 -> ff
# 18: 00 -> ff
# 19: 00 -> ff
# 20: 00 -> ff
# 21: 00 -> ff
# 22: 00 -> ff
# 23: 00 -> ff
# 24: fe -> (none)
# 25: dc -> (none)
# 26: ba -> (none)
# 27: 98 -> (none)
# 28: 76 -> (none)
# 29: 54 -> (none)
# 30: 32 -> (none)
# 31: 10 -> (none)
# 32: ff -> (none)
# 33: ff -> (none)
# 34: ff -> (none)
# 35: ff -> (none)
# 36: ff -> (none)
# 37: ff -> (none)
# 38: ff -> (none)
# 39: ff -> (none)
0004 0028 00000000 ffff 0020 00002320 0016 000000000000 fedcba9876543210 ffffffffffffffff

dnl Write-Metadata with mask.
# actions=write_metadata:0xfedcba9876543210/0xff00ff00ff00ff00
0002 0018 00000000 fedcba9876543210 ff00ff00ff00ff00

dnl Write-Metadata too short.
# bad OpenFlow11 instructions: OFPBIC_BAD_LEN
0002 0010 00000000 fedcba9876543210

dnl Write-Metadata too long.
# bad OpenFlow11 instructions: OFPBIC_BAD_LEN
0002 0020 00000000 fedcba9876543210 ffffffffffffffff 0000000000000000

dnl Write-Metadata duplicated.
# bad OpenFlow11 instructions: OFPBIC_DUP_INST
0002 0018 00000000 fedcba9876543210 ff00ff00ff00ff00 0002 0018 00000000 fedcba9876543210 ff00ff00ff00ff00

dnl Write-Metadata in wrong position (OpenFlow 1.1+ disregards the order
dnl and OVS reorders it to the canonical order)
# actions=write_metadata:0xfedcba9876543210,goto_table:1
#  1: 01 -> 02
#  3: 08 -> 18
#  4: 01 -> 00
#  8: 00 -> fe
#  9: 02 -> dc
# 10: 00 -> ba
# 11: 18 -> 98
# 12: 00 -> 76
# 13: 00 -> 54
# 14: 00 -> 32
# 15: 00 -> 10
# 16: fe -> ff
# 17: dc -> ff
# 18: ba -> ff
# 19: 98 -> ff
# 20: 76 -> ff
# 21: 54 -> ff
# 22: 32 -> ff
# 23: 10 -> ff
# 24: ff -> 00
# 25: ff -> 01
# 26: ff -> 00
# 27: ff -> 08
# 28: ff -> 01
# 29: ff -> 00
# 30: ff -> 00
# 31: ff -> 00
0001 0008 01 000000 0002 0018 00000000 fedcba9876543210 ffffffffffffffff

dnl empty Write-Actions non-zero padding
# actions=write_actions(drop)
#  0: 00 -> (none)
#  1: 03 -> (none)
#  2: 00 -> (none)
#  3: 08 -> (none)
#  4: 00 -> (none)
#  5: 00 -> (none)
#  6: 00 -> (none)
#  7: 01 -> (none)
0003 0008 00000001

dnl Check that an empty Write-Actions instruction gets dropped.
# actions=write_actions(drop)
#  0: 00 -> (none)
#  1: 03 -> (none)
#  2: 00 -> (none)
#  3: 08 -> (none)
#  4: 00 -> (none)
#  5: 00 -> (none)
#  6: 00 -> (none)
#  7: 00 -> (none)
0003 0008 00000000

dnl Clear-Actions too-long
# bad OpenFlow11 instructions: OFPBIC_BAD_LEN
0005 0010 00000000 0000000000000000

dnl Clear-Actions non-zero padding
# actions=clear_actions
#  7: 01 -> 00
0005 0008 00000001

dnl Clear-Actions non-zero padding
# actions=clear_actions
#  4: 01 -> 00
0005 0008 01 000000

dnl Clear-Actions
# actions=clear_actions
0005 0008 00000000

dnl Experimenter actions not supported yet.
# bad OpenFlow11 instructions: OFPBIC_BAD_EXPERIMENTER
ffff 0008 01 000000

dnl Bad instruction number (0 not assigned).
# bad OpenFlow11 instructions: OFPBIC_UNKNOWN_INST
0000 0008 01 000000

])
sed '/^[[#&]]/d' < test-data > input.txt
sed -n 's/^# //p; /^$/p' < test-data > expout
sed -n 's/^& //p' < test-data > experr
AT_CAPTURE_FILE([input.txt])
AT_CAPTURE_FILE([expout])
AT_CAPTURE_FILE([experr])
AT_CHECK(
  [ovs-ofctl '-vPATTERN:console:%c|%p|%m' parse-instructions OpenFlow11 < input.txt],
  [0], [expout], [experr])
AT_CLEANUP

dnl Our primary goal here is to verify OpenFlow 1.2-specific changes,
dnl so the list of tests is short.
AT_SETUP([OpenFlow 1.2 action translation])
AT_KEYWORDS([ofp-actions OF1.2])
AT_DATA([test-data], [dnl
# actions=LOCAL
0000 0010 fffffffe 04d2 000000000000

# bad OpenFlow12 actions: OFPBAC_BAD_SET_MASK
& ofp_actions|WARN|bad action at offset 0 (OFPBAC_BAD_SET_MASK):
& 00000000  00 19 00 18 80 00 09 0c-00 00 00 00 12 34 00 00
& 00000010  00 00 ff ff 00 00 00 00-
0019 0018 8000090c 000000001234 00000000ffff 00000000

])
sed '/^[[#&]]/d' < test-data > input.txt
sed -n 's/^# //p; /^$/p' < test-data > expout
sed -n 's/^& //p' < test-data > experr
AT_CAPTURE_FILE([input.txt])
AT_CAPTURE_FILE([expout])
AT_CAPTURE_FILE([experr])
AT_CHECK(
  [ovs-ofctl '-vPATTERN:console:%c|%p|%m' parse-actions OpenFlow12 < input.txt],
  [0], [expout], [experr])
AT_CLEANUP

dnl Our primary goal here is to verify OpenFlow 1.3-specific changes,
dnl so the list of tests is short.
AT_SETUP([OpenFlow 1.3 action translation])
AT_KEYWORDS([ofp-actions OF1.3])
AT_DATA([test-data], [dnl
# actions=LOCAL
0000 0010 fffffffe 04d2 000000000000

dnl Check the Nicira extension form of "move".
# actions=move:NXM_OF_IN_PORT[]->NXM_OF_VLAN_TCI[]
ffff 0018 00002320 0006 0010 0000 0000 00000002 00000802

dnl Check the ONF extension form of "copy_field".
# actions=move:NXM_OF_IN_PORT[]->NXM_OF_VLAN_TCI[]
ffff 0020 4f4e4600 0c80 0000 0010 0000 0000 0000 00000002 00000802 00000000

])
sed '/^[[#&]]/d' < test-data > input.txt
sed -n 's/^# //p; /^$/p' < test-data > expout
sed -n 's/^& //p' < test-data > experr
AT_CAPTURE_FILE([input.txt])
AT_CAPTURE_FILE([expout])
AT_CAPTURE_FILE([experr])
AT_CHECK(
  [ovs-ofctl '-vPATTERN:console:%c|%p|%m' parse-actions OpenFlow13 < input.txt],
  [0], [expout], [experr])
AT_CLEANUP

dnl Our primary goal here is to verify that OpenFlow 1.5-specific changes,
dnl so the list of tests is short.
AT_SETUP([OpenFlow 1.5 action translation])
AT_KEYWORDS([ofp-actions OF1.5])
AT_DATA([test-data], [dnl
# actions=LOCAL
0000 0010 fffffffe 04d2 000000000000

# actions=move:NXM_OF_IN_PORT[]->NXM_OF_VLAN_TCI[]
001c 0018 0010 0000 0000 0000 00000002 00000802 00000000

# actions=set_field:00:00:00:00:12:34/00:00:00:00:ff:ff->eth_src
0019 0018 8000090c 000000001234 00000000ffff 00000000

])
sed '/^[[#&]]/d' < test-data > input.txt
sed -n 's/^# //p; /^$/p' < test-data > expout
sed -n 's/^& //p' < test-data > experr
AT_CAPTURE_FILE([input.txt])
AT_CAPTURE_FILE([expout])
AT_CAPTURE_FILE([experr])
AT_CHECK(
  [ovs-ofctl '-vPATTERN:console:%c|%p|%m' parse-actions OpenFlow15 < input.txt],
  [0], [expout], [experr])
AT_CLEANUP

AT_SETUP([ofp-actions - inconsistent MPLS actions])
OVS_VSWITCHD_START
dnl OK: Use fin_timeout action on TCP flow
AT_CHECK([ovs-ofctl -O OpenFlow11 -vwarn add-flow br0 'tcp actions=fin_timeout(idle_timeout=1)'])
dnl Bad: Use fin_timeout action on TCP flow that has been converted to MPLS
AT_CHECK([ovs-ofctl -O OpenFlow11 -vwarn add-flow br0 'tcp actions=push_mpls:0x8847,fin_timeout(idle_timeout=1)'],
         [1], [], [dnl
ovs-ofctl: none of the usable flow formats (OpenFlow10,NXM) is among the allowed flow formats (OpenFlow11)
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([reg_load <-> set_field translation corner case])
AT_KEYWORDS([ofp-actions])
OVS_VSWITCHD_START
dnl In OpenFlow 1.3, set_field always sets all the bits in the field,
dnl but when we translate to NXAST_LOAD we need to only set the bits that
dnl actually exist (e.g. mpls_label only has 20 bits) otherwise OVS rejects
dnl the "load" action as invalid.  Check that we do this correctly.
AT_CHECK([ovs-ofctl -O OpenFlow13 add-flow br0 mpls,actions=set_field:10-\>mpls_label])
AT_CHECK([ovs-ofctl -O OpenFlow10 dump-flows br0 | ofctl_strip], [0], [dnl
NXST_FLOW reply:
 mpls actions=load:0xa->OXM_OF_MPLS_LABEL[[]]
])
OVS_VSWITCHD_STOP
AT_CLEANUP
