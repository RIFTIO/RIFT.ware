#compdef python python2 python2.4 python2.5 python2.6 python2.7 python3.0 python3.1 python3.2 python3.3 python3.4

# Python 2.7
# Python 3.4

local curcontext="$curcontext" state line expl
typeset -A opt_args

local -a args

if _pick_variant python3=Python\ 3 python2 --version; then
  args=(
    '(-bb)-b[issue warnings about str(bytes_instance), str(bytearray_instance) and comparing bytes/bytearray with str]'
    '(-b)-bb[issue errors about str(bytes_instance), str(bytearray_instance) and comparing bytes/bytearray with str]'
    "-I[isolate Python from the user's environment]"
    '-X[set implementation-specific option]:option'
  )
else
  args=(
    '-R[use a pseudo-random salt to make hash values unpredeictable]'
    '-Q+[division options]:division option:(old warn warnall new)'
    '(-tt)-t[issue warnings about inconsistent tab usage]'
    '(-t)-tt[issue errors about inconsistent tab usage]'
    '-3[warn about Python 3.x incompatibilities]'
  )
fi

_arguments -C -s -S "$args[@]" \
  "-B[don't write .py\[co\] files on import]" \
  '(1 -)-c+[program passed in as string (terminates option list)]:python command' \
  '-d[debug output from parser]' \
  '-E[ignore PYTHON* environment variables (such as PYTHONPATH)]' \
  '(1 * -)-h[display help information]' \
  '-i[inspect interactively after running script]' \
  '(1 -)-m[run library module as a script (terminates option list)]:module:->modules' \
  '-O[optimize generated bytecode slightly]' \
  '-OO[remove doc-strings in addition to the -O optimizations]' \
  "-s[don't add user site directory to sys.path]" \
  "-S[don't imply 'import site' on initialization]" \
  '-u[unbuffered binary stdout and stderr]' \
  '-v[verbose (trace import statements)]' \
  '(1 * -)-V[display version information]' \
  '-W+[warning control]:warning filter (action\:message\:category\:module\:lineno):(default always ignore module once error)' \
  '-x[skip first line of source, allowing use of non-Unix forms of #!cmd]' \
  '(-)1:Python script:_files -g "*.py(|c|o)(-.)"' \
  '*::script argument:= ->normal' && return

case "$state" in
  modules)
    local -a modules
    modules=(
      ${${=${(f)"$(_call_program modules $words[1] -c \
        'from\ pydoc\ import\ help\;\ help\(\"modules\"\)')"}[2,-3]}:#\(package\)}
    )
    _wanted modules expl module compadd -a modules && return
    ;;
  normal)
    if [[ -z "$opt_args[(I)-(c|m)]" ]]; then
      shift words
      (( CURRENT-- ))
    fi
    _normal && return
    ;;
esac

return 1
