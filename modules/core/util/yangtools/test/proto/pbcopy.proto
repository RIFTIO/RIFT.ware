
/*
 * 
 * (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
 *
 */


/**
 * @file pbcopy.proto
 * @author Tom Seidenberg
 * @date 2014/09/05
 * @brief Test protobuf message copy operations.
 */

import "descriptor.proto";
import "rwpbapi.proto";
option cc_generic_services = true;

package pbcopy;

enum EnumA {
  A_VALUE1 = 1;
  A_VALUE2 = 2;
  A_VALUE3 = 3;
  A_VALUE4 = 4;
};

enum EnumB {
  B_VALUE4 = 4;
  B_VALUE5 = 5;
  B_VALUE6 = 6;
  B_VALUE7 = 7;
  B_VALUE8 = 8;
  B_VALUE9 = 9;
};


message MsgA {
  required string s1 = 1;
  required bytes  b1 = 2;
  required int32  i1 = 3;
  required EnumA  e1 = 6;
};

message FlatA {
  option (rw_msgopts) = {flat:true };
  required string s1 = 1 [ (rw_fopts) = {string_max:32} ];
  required bytes  b1 = 2 [ (rw_fopts) = {string_max:32} ];
  required int32  i1 = 3;
  required EnumA  e1 = 6;
};

message MsgB {
  optional int32  i1 = 3;
  optional string s1 = 4;
  optional bytes  b1 = 5;
  optional EnumA  e1 = 6;
};

message FlatB {
  option (rw_msgopts) = {flat:true };
  optional int32  i1 = 3;
  optional string s1 = 4 [ (rw_fopts) = {string_max:32} ];
  optional bytes  b1 = 5 [ (rw_fopts) = {string_max:32} ];
  optional EnumA  e1 = 6;
};

message MsgC {
  repeated bytes  b1 = 1;
  repeated bytes  b2 = 2;
  optional int32  i1 = 3;
  repeated MsgA   ma = 4;
  repeated MsgB   mb = 5;
  optional EnumB  e1 = 6;
};

message FlatC {
  option (rw_msgopts) = {flat:true };
  repeated bytes  b1 = 1 [ (rw_fopts) = {inline_max:4 string_max:32} ];
  repeated bytes  b2 = 2 [ (rw_fopts) = {inline_max:4 string_max:32} ];
  optional int32  i1 = 3;
  repeated FlatA  ma = 4 [ (rw_fopts) = {inline_max:4} ];
  repeated FlatB  mb = 5 [ (rw_fopts) = {inline_max:4} ];
  optional EnumB  e1 = 6;
};

/* The basic target of the test */
message TestPointy {
  optional int32     oi32 = 110 [ default=8765432 ];
  optional uint32    ou32 = 111 [ default=9876543 ];
  optional sint32    os32 = 112 [ default=-87654 ];
  optional int64     oi64 = 113 [ default=98765432109876 ];
  optional uint64    ou64 = 114 [ default=8765432109876 ];
  optional sint64    os64 = 115 [ default=-987654321098 ];
  optional bool      oboo = 116 [ default=false ];
  optional EnumA     oena = 117 [ default=A_VALUE3 ];
  optional EnumB     oenb = 118 [ default=B_VALUE5 ]; /*______ wire-compatible, above: varint */
  optional fixed64   of64 = 119 [ default=765432109876543 ];
  optional sfixed64  oz64 = 120 [ default=-6543210987654 ];
  optional double    odbl = 121 [ default=3.45678901234567 ]; /*______ wire-compatible, above: 64b */
  optional string    ostr = 122;
  optional bytes     obyt = 123;
  optional MsgA      omga = 124;
  optional MsgB      omgb = 125;
  optional MsgC      omgc = 126; /*______ wire-compatible, above: length delimitted */
  optional fixed32   of32 = 127 [ default=76543210 ];
  optional sfixed32  oz32 = 128 [ default=-654321098 ];
  optional float     oflt = 129 [ default=6.78901 ]; /*______ wire-compatible, above: 32b */

  repeated int32     ai32 = 210;
  repeated EnumA     aena = 211;
  repeated string    astr = 212;
  repeated bytes     abyt = 213;
  repeated MsgA      amga = 214;
  repeated MsgB      amgb = 215;
  repeated MsgC      amgc = 216;
};

/* Flat, fully tag-compatible with TestPointy. */
message TestFlat {
  option (rw_msgopts) = {flat:true };
  optional int32     oi32 = 110 [ default=8765432 ];
  optional uint32    ou32 = 111 [ default=9876543 ];
  optional sint32    os32 = 112 [ default=-87654 ];
  optional int64     oi64 = 113 [ default=98765432109876 ];
  optional uint64    ou64 = 114 [ default=8765432109876 ];
  optional sint64    os64 = 115 [ default=-987654321098 ];
  optional bool      oboo = 116 [ default=false ];
  optional EnumA     oena = 117 [ default=A_VALUE3 ];
  optional EnumB     oenb = 118 [ default=B_VALUE5 ]; /*______ wire-compatible, above: varint */
  optional fixed64   of64 = 119 [ default=765432109876543 ];
  optional sfixed64  oz64 = 120 [ default=-6543210987654 ];
  optional double    odbl = 121 [ default=3.45678901234567 ]; /*______ wire-compatible, above: 64b */
  optional string    ostr = 122 [ (rw_fopts) = {string_max:32} ];
  optional bytes     obyt = 123 [ (rw_fopts) = {string_max:32} ];
  optional FlatA     omga = 124;
  optional FlatB     omgb = 125;
  optional FlatC     omgc = 126; /*______ wire-compatible, above: length delimitted */
  optional fixed32   of32 = 127 [ default=76543210 ];
  optional sfixed32  oz32 = 128 [ default=-654321098 ];
  optional float     oflt = 129 [ default=6.78901 ]; /*______ wire-compatible, above: 32b */

  repeated int32     ai32 = 210 [ (rw_fopts) = {inline_max:4} ];
  repeated EnumA     aena = 211 [ (rw_fopts) = {inline_max:4} ];
  repeated string    astr = 212 [ (rw_fopts) = {inline_max:4 string_max:32} ];
  repeated bytes     abyt = 213 [ (rw_fopts) = {inline_max:4 string_max:32} ];
  repeated FlatA     amga = 214 [ (rw_fopts) = {inline_max:4} ];
  repeated FlatB     amgb = 215 [ (rw_fopts) = {inline_max:4} ];
  repeated FlatC     amgc = 216 [ (rw_fopts) = {inline_max:4} ];
};


/*
 * Half tag-compatible to TestPointy.  Half of the fields are missing,
 * and the other half have been renumbered to be tag-incompatible.
 * Every matching tag is an exact type match.
 * Each field has been given a different name.
 */
message TestCompat {
  optional int32     noi32 = 310;
  optional uint32    nou32 = 111;
  optional sint32    nos32 = 312;
  optional int64     noi64 = 113;
  optional uint64    nou64 = 314;
  optional sint64    nos64 = 115;
  optional bool      noboo = 316;
  optional EnumA     noena = 117;
  optional EnumB     noenb = 318;
  optional fixed64   nof64 = 119;
  optional sfixed64  noz64 = 320;
  optional double    nodbl = 121;
  optional string    nostr = 322 [ (rw_fopts) = {string_max:20} ];
  optional bytes     nobyt = 123 [ (rw_fopts) = {string_max:20} ];
  optional MsgA      nomga = 324;
  optional MsgB      nomgb = 125;
  optional MsgC      nomgc = 326;
  optional fixed32   nof32 = 127;
  optional sfixed32  noz32 = 328;
  optional float     noflt = 129;
};


/*
 * This is a flat, tag-compatible version of TestPointy, but only with
 * the repeated fields.
 */
message TestInline {
  repeated int32     ai32 = 210 [ (rw_fopts) = {inline:true               inline_max:4} ];
  repeated EnumA     aena = 211 [ (rw_fopts) = {inline:true               inline_max:4} ];
  repeated string    astr = 212 [ (rw_fopts) = {inline:true string_max:20 inline_max:4} ];
  repeated bytes     abyt = 213 [ (rw_fopts) = {inline:true string_max:20 inline_max:4} ];
  repeated MsgA      amga = 214 [ (rw_fopts) = {inline:true               inline_max:4} ];
  repeated MsgB      amgb = 215 [ (rw_fopts) = {inline:true               inline_max:4} ];
  repeated MsgC      amgc = 216 [ (rw_fopts) = {inline:true               inline_max:4} ];
};


/*
 * This is a re-organization of TestPointy, with each type rearranged,
 * but wire compatible.  This is technically not tag-compatible, but
 * most of it will decode approximately correctly.
 */
message TestWireCompat {
  optional EnumB     oenb = 110;
  optional int32     oi32 = 111;
  optional uint32    ou32 = 112;
  optional sint32    os32 = 113;
  optional int64     oi64 = 114;
  optional uint64    ou64 = 115;
  optional sint64    os64 = 116;
  optional bool      oboo = 117;
  optional EnumA     oena = 118; /*______ wire-compatible, above: varint */
  optional double    odbl = 119;
  optional fixed64   of64 = 120;
  optional sfixed64  oz64 = 121; /*______ wire-compatible, above: 64b */
  optional bytes     obyt = 122;
  optional string    ostr = 123;
  optional MsgC      omgc = 124;
  optional MsgA      omga = 125;
  optional MsgB      omgb = 126; /*______ wire-compatible, above: length delimitted */
  optional float     oflt = 127;
  optional fixed32   of32 = 128;
  optional sfixed32  oz32 = 129; /*______ wire-compatible, above: 32b */
};


/*
 * This is a re-organization of TestPointy, flat, and utterly wire
 * incompatible.
 */
message TestWireIncompat {
  optional double    odbl = 110;
  optional fixed64   of64 = 111;
  optional sfixed64  oz64 = 112; /*______ wire-compatible, above: 64b */
  optional MsgA      omga = 113;
  optional MsgB      omgb = 114;
  optional MsgC      omgc = 115;
  optional string    ostr = 116;
  optional bytes     obyt = 117; /*______ wire-compatible, above: length delimitted */
  optional float     oflt = 118;
  optional fixed32   of32 = 119;
  optional sfixed32  oz32 = 120; /*______ wire-compatible, above: 32b */
  optional EnumB     oenb = 121;
  optional int32     oi32 = 122;
  optional uint32    ou32 = 123;
  optional sint32    os32 = 124;
  optional int64     oi64 = 125;
  optional uint64    ou64 = 126;
  optional sint64    os64 = 127;
  optional bool      oboo = 128;
  optional EnumA     oena = 129; /*______ wire-compatible, above: varint */
};


/*
 * Fully tag-compatible with TestPointy, but entirely required.
 */
message TestRequired {
  required int32     oi32 = 110;
  required uint32    ou32 = 111;
  required sint32    os32 = 112;
  required int64     oi64 = 113;
  required uint64    ou64 = 114;
  required sint64    os64 = 115;
  required bool      oboo = 116;
  required EnumA     oena = 117;
  required EnumB     oenb = 118;
  required fixed64   of64 = 119;
  required sfixed64  oz64 = 120;
  required double    odbl = 121;
  required string    ostr = 122;
  required bytes     obyt = 123;
  required MsgA      omga = 124;
  required MsgB      omgb = 125;
  required MsgC      omgc = 126;
  required fixed32   of32 = 127;
  required sfixed32  oz32 = 128;
  required float     oflt = 129;
};

