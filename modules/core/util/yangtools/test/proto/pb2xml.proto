
import "rwpbapi.proto";
import "descriptor.proto";

// Unit testing for pb2xml - have all possible combinations - (atleast try to)
// a simple message without embedded messages or repeated
message simple
{
  optional uint32 opt_num_u32=1;
  required uint32 req_num_u32=2;
  
  optional float opt_float=3;
  required float req_float=4;

  optional int64 opt_num_64=5;
  required int64 req_num_64=6;

  optional string opt_string=7;
  required string req_string=8;

  enum result {
    success = 0;
    failure = 1;
    trying = 2;
    stopped = 3;
  }

  optional result opt_enum=9;
  required result req_enum=10;

  optional bool opt_bool=11;
  required bool req_bool=12;
}  

// a simple message without embedded messages or repeated
message repeats
{
  repeated uint32 req_num_u32=2;
  repeated float req_float=4;
  repeated int64 req_num_64=6;
  repeated string req_string=8;
  repeated uint64 req_uint64=9;
  repeated bool req_bool=12;

  enum result {
    success = 0;
    failure = 1;
    trying = 2;
    stopped = 3;
  }

  repeated result req_enum=14;
}  

// a simple message without embedded messages or repeated
message flat_repeats
{
  option (rw_msgopts) = {flat:true};
  
  repeated uint32 req_num_u32=2 [(rw_fopts)= {inline_max:4}];
  repeated float req_float=4 [(rw_fopts)= {inline_max:4}];
  repeated int64 req_num_64=6 [(rw_fopts)= {inline_max:4}];
  repeated string req_string=8 [(rw_fopts)= {inline_max:4,string_max:32 }];

    enum result {
    success = 0;
    failure = 1;
    trying = 2;
    stopped = 3;
  }

  repeated result req_enum=10[(rw_fopts)= {inline_max:4}] ; 
}  

message top_level
{
  optional repeats repeats_opt = 1;
  required repeats repeats_req = 2;
  message really_nested {
    optional string one_name = 1;
    message first_level_nest {
      required string another_name =1;
      required simple lowly_simple=2;
    }
    optional first_level_nest first_level = 3;
    repeated first_level_nest repeated_level = 9;
  }  
  required really_nested nested = 3;
}

