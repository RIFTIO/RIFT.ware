
/*
 * 
 * (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
 *
 */


/*!
 * @file rw_protobuf_c.h
 * @date 2015/09/28
 * @brief RIFT.ware-specific protobuf-c support.
 */

#ifndef RW_PROTOBUF_C_H_
#define RW_PROTOBUF_C_H_

#include <sys/cdefs.h>

#include <protobuf-c/rift-protobuf-c.h>
#include <protobuf-c/rift/rw_pb_delta.h>
#include <stdbool.h>
#include <yangmodel.h>
#include <rwlib.h>


// Need this because doxygen parser thinks this is a C file and misses the C++ definitions
#ifdef RW_DOXYGEN_PARSING
#define __cplusplus 201103
#endif

#if __cplusplus
#if __cplusplus < 201103L
#error "Requires C++11"
#endif
#endif

__BEGIN_DECLS
#ifndef __GI_SCANNER__


/*!
 * Look up a `ProtobufCFieldDescriptor` from a `ProtobufCMessageDescriptor` by
 * the yang characteristics of the message. This function will fail if the
 * protobuf descriptor was not generated by a YANG compiler.
 *
 * @param[in] desc
 *      The `ProtobufCMessageDescriptor` object.
 * @param[in] name
 *      The name of the yang node.
 * @param [in] ns
 *      The namespace of the yang node.
 * @return
 *      A `ProtobufCFieldDescriptor` object.  NULL if not found.
 */
const ProtobufCFieldDescriptor*  protobuf_c_message_descriptor_get_field_by_yang(
  const ProtobufCMessageDescriptor *desc,
  const char *name,
  const char *ns );

/*!
 * Lookup an enumerations PB-typed string given its Yang defined value. In
 * translating from XML or confd data to PB data, the enumerations strings
 * in XML have to be made the same value as the proto enumeration
 *
 * @param[in] fdesc Descriptor of the enumeration field
 * @param[in] yang_enum The value of enumeration in YANG
 *
 * @return the enumeration value in proto, if found. null otherwise
 */
const char* protobuf_c_message_get_pb_enum (
  const ProtobufCFieldDescriptor *fdesc,
  const char *yang_enum );

/*!
 * Find the yang enumeration string for a protobuf enumeration value
 * represented as an PB enum value
 *
 * @param[in] fdesc Descriptor of the enumeration field
 * @param[in] enum The value of enumeration in Enum
 *
 * @return the enumeration string value in yang, if found. null otherwise
 */
const char* protobuf_c_message_get_yang_enum (
  const ProtobufCFieldInfo *finfo );

/*!
 * The YANG Node name is useful in scenarios where a protobuf message that is
 * derived from Yang is to be converted to a different schema format. For
 * sub-messages, the yang node names are available directly on the message
 * descriptor. For more elemental fields, the field descriptor in the message
 * holds the yang node name.
 *
 * Given the parent message descriptor and the elemental field descriptor, this
 * method returns the yang node name corresponding to the field descriptor.
 *
 * @param[in] mdesc Descriptor of the parent message
 * @param[in] fdesc Descriptor of the field
 *
 * @return yang_node_name of the field, if the field is derive from yang. nullptr
 * otherwise
 *
 */
const char* protobuf_c_message_get_yang_node_name(
  const ProtobufCMessageDescriptor *mdesc,
  const ProtobufCFieldDescriptor *fdesc );

/*!
 * Get the RIFT.ware yang-protobuf message descriptor for a
 * ProtobufCMessageDescriptor.  Using this descriptor, it is possible
 * to determine various yang-related information.
 *
 * @param[in] pbcmd - The message descriptor.
 *
 * @return A pointer to the descriptor.  Possibly NULL if the message
 *   descriptor is not derived from yang.
 */
const rw_yang_pb_msgdesc_t* protobuf_c_message_dscriptor_yang_pb_msgdesc(
  const ProtobufCMessageDescriptor* pbcmd );

#endif /* ndef __GI_SCANNER__ */


/*!
 * Get the yang XML prefix for a message.
 *
 * @param[in] pbcmd - The message descriptor.
 *
 * @return A pointer to the prefix, if known.  May be NULL.
 */
/// @cond GI_SCANNER
/**
 * protobuf_c_message_descriptor_xml_prefix:
 * @pbcmd: (type ProtobufC.MessageDescriptor)
 * Returns: (nullable)
 */
/// @endcond
const char* protobuf_c_message_descriptor_xml_prefix(
  const ProtobufCMessageDescriptor* pbcmd );

/*!
 * Get the yang XML namespace for a message.
 *
 * @param[in] pbcmd - The message descriptor.
 *
 * @return A pointer to the namespace, if known.  May be NULL.
 */
/// @cond GI_SCANNER
/**
 * protobuf_c_message_descriptor_xml_ns:
 * @pbcmd: (type ProtobufC.MessageDescriptor)
 * Returns: (nullable)
 */
/// @endcond
const char* protobuf_c_message_descriptor_xml_ns(
  const ProtobufCMessageDescriptor* pbcmd );

/*!
 * Get the yang XML element name for a message.
 *
 * @param[in] pbcmd - The message descriptor.
 *
 * @return A pointer to the element name, if known.  May be NULL.
 */
/// @cond GI_SCANNER
/**
 * protobuf_c_message_descriptor_xml_element_name:
 * @pbcmd: (type ProtobufC.MessageDescriptor)
 * Returns: (nullable)
 */
/// @endcond
const char* protobuf_c_message_descriptor_xml_element_name(
  const ProtobufCMessageDescriptor* pbcmd );

/*!
 * FieldRef goto based on keyspec
 *
 * @param[in] fref    - The field Reference pointer
 * @param[in] msg     - The protobufc message
 * @param[in] ks      - Keyspec to a node within the message
 *
 * @return The field ref status
 */
/// @cond GI_SCANNER
/**
 * protobuf_c_field_ref_goto_ks:
 * @fref:
 * @msg: (type ProtobufC.Message)
 * @ks: (type RwKeyspec.Path)
 * Returns:
 */
/// @endcond
uint64_t 
protobuf_c_field_ref_goto_ks(ProtobufCFieldReference* fref,
                             ProtobufCMessage* msg,
                             const rw_keyspec_path_t* ks);

/*!
 * FieldRef goto based on xpath
 *
 * @param[in] fref    - The field Reference pointer
 * @param[in] msg     - The protobufc message
 * @param[in] xpath   - xpath to a node within the message
 *
 * @return A pointer to the element name, if known.  May be NULL.
 */
/// @cond GI_SCANNER
/**
 * protobuf_c_field_ref_goto_xpath:
 * @fref:
 * @msg: (type ProtobufC.Message)
 * @xpath:
 * Returns:
 */
/// @endcond
uint64_t 
protobuf_c_field_ref_goto_xpath(ProtobufCFieldReference* fref,
                                ProtobufCMessage* msg,
                                const gchar* xpath);

__END_DECLS



/*****************************************************************************/
/*
 * C++ helper classes
 */

#ifdef __cplusplus
#ifndef __GI_SCANNER__

namespace rw_yang {

rw_status_t get_string_value (const ProtobufCFieldInfo *val,
                              std::string& str);

}

struct UniquePtrBinaryData
{
  void operator()(ProtobufCFlatBinaryData *data) const
  {
    free(data);
  }

  typedef std::unique_ptr<ProtobufCFlatBinaryData, UniquePtrBinaryData> uptr_t;
};

#endif /* ndef __GI_SCANNER__ */
#endif /* def __cplusplus */

#endif // RW_PROTOBUF_C_H_
