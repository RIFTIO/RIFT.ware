
/*
 * 
 * (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
 *
 */



/**
 * @file   rw_ut_confd.hpp
 * @author Tom Seidenberg
 * @date   2014/08/13
 * @brief  RW unit test confd spawner
 */

#ifndef RW_UT_CONFD_HPP_
#define RW_UT_CONFD_HPP_

#include "yangmodel.h"
#include "rw_xml.h"

#include <memory>
#include <boost/filesystem.hpp>

#include <unistd.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>

struct confd_daemon_ctx;

namespace rw_yang {

/**
 * @ingroup RwConfdUnittestHarness
 * @{
 */

/// confd instance unit test manager
/**
 * This class implements a confd unit testing harness, which allows the
 * writing of unit tests in yangtools that must interact with a confd,
 * but which do not also require the running of RiftWare.
 *
 * This harness has 2 primary goals:
 *  - Allow the creation of unit tests that interact with confd but do
 *    not require Riftware
 *  - Ensure that the same unit tests can run in different workspaces
 *    on the same machine at the same time (in other words, these
 *    objects must not allocate or require any global resources).
 *
 * The following are not requirements, although they would be nice to
 * have.  If they become requirements in the future, they could
 * probably be implemented:
 *  - Clean up the confd environment when the unit test crashes.  This
 *    is possible with extra processes, but introduces extra
 *    complexity.
 *  - Initialize the confd environment from a pre-built or runtime
 *    generated custom configuration tailored for the test.
 *
 * By default, the harness will (re)create a directory hiearchy for the
 * test under the current directory (presumably, the cmake current
 * binary directory of the unit test program).  The hierarchy will have
 * the following structure:
 *
 *   BINDIR/                ### Test invocation directory
 *     TESTNAME/            ### (Deleted if it exists, then) Created, based on the test name.
 *       etc/               ### Created
 *         confd.ccl        ### Copied from build original
 *         confd.conf       ### Generated by this class
 *         BASIC_FXS_FILES  ### Copied from build original, based on args?
 *       var/               ### Created
 *         candidate/       ### Created/cleared
 *         cdb/             ### Created/cleared
 *           aaa_init.xml   ### Copied from build original
 *         log/             ### Created/cleared
 *         rollback/        ### Created/cleared
 *         state/           ### Created/cleared
 *
 * If the unit test program does not crash while confd is running, the
 * test directory hiearchy will be deleted when the harness is deleted.
 * If the unit test crashes, then the directory hierarchy may remain
 * after the crash.
 *
 * The harness will directly spawn confd.  confd's STDIN will be
 * attached to the unit test process via a socket, while confd's STDOUT
 * and STDERR will be dups of the harness's STDOUT and STDERR.  The
 * socket will be used to control confd's exit - the socket will be
 * closed upon completion of the test, in order to safely clean-up
 * confd, or it will be closed by the test crashing, which will also
 * safely clean-up confd.
 *
 * Unless otherwise stated, the APIs for this class always succeed.
 * Those APIs that may fail (for whatever reason) will throw an
 * exception upon failure.  In most cases, before throwing an
 * exception, the APIs will print an error message to STDERR.
 */
class ConfdUnittestHarness
{
 public:
  typedef std::unique_ptr<ConfdUnittestHarness> uptr_t;
  typedef struct sockaddr_un sockaddr_t;
  typedef struct confd_daemon_ctx context_t;

 protected:
  /// Create a confd instance to interact with
  explicit ConfdUnittestHarness(
    /**
     * The name of the test.  This string will be used as a directory
     * name, created in the current directory of the test harness.  If
     * the directory exists, it will be removed prior to starting
     * confd.
     */
    const char* test_name);

 public:
  /// Destroy the confd instance.
  ~ConfdUnittestHarness();

  // Cannot copy
  ConfdUnittestHarness (const ConfdUnittestHarness &) = delete;
  ConfdUnittestHarness& operator = (const ConfdUnittestHarness &) = delete;

 public:
  // Factory functions.

  /**
   * Factory function for confd test harness.  This interface should be
   * used only when you need to modify the configuration or environment
   * of the confd server in some way.  This interface performs very
   * little initialization; the caller must do most of the
   * initialization themselves, either directly, or through the various
   * member functions.
   *
   * @return Always returns a valid pointer.
   */
  static uptr_t create_harness_manual(
    /**
     * The name of the test.  This string will be used as a directory
     * name, created in the current directory of the test harness.  If
     * the directory exists, it will be removed prior to starting
     * confd.
     */
    const char* test_name);

  /**
   * Perform the default initializations and start the confd server.
   * This will automatically create a confd unit test harness object,
   * delete the test directory, repopulate it with the default files,
   * create a standard confd configurations, and start confd.
   *
   * @return Always returns a valid pointer.
   */
  static uptr_t create_harness_autostart(
    /**
     * The name of the test.  This string will be used as a directory
     * name, created in the current directory of the test harness.  If
     * the directory exists, it will be removed prior to starting
     * confd.
     */
    const char* test_name,

    /**
     * The yang model for the test.  This model should have all
     * relevant modules already loaded; those modules (and only those
     * modules) will be added to the confd configuration.
     */
    rw_yang::YangModel* yang_model);


 public:
  // confd configuration DOM APIs.

  /**
   * Load the default confd configuration, and update it for the
   * default test environment.
   */
  void conf_load_default();

  /**
   * Load a prototype confd.conf config file.  This completely replaces
   * the current configuration, and invalidates any pointer previously
   * returned by get_conf_doc().
   */
  void conf_load(
    /// Full or relative path to the prototype config file
    boost::filesystem::path filename);

  /**
   * Initialize the paths in the default configuration file.  If you
   * are using a custom config file, you may need to set some paths
   * manually.
   */
  void conf_init_paths();

  /**
   * Get a reference to the DOM for the confd.conf file that will be
   * created.  This function will only work before calling start().
   *
   * @return nullptr after calling start().
   */
  rw_yang::XMLDocument* conf_get_doc();


 public:
  // Test environment APIs

  /**
   * Populate the test directory.  If the directory already exists, it
   * is deleted first, to ensure that the test always starts from the
   * same initial conditions.
   */
  void populate_test_dir();

  /**
   * Make a rooted path.  Accepts an already rooted path, a
   * RIFT_ROOT-relative path (as indicated by starting with
   * "$RIFT_ROOT"), or a current-directory-relative path.
   */
  boost::filesystem::path make_rooted_path(
    /// Input path
    boost::filesystem::path filename);

  const boost::filesystem::path& get_rift_root()
  {
    return rift_root_;
  }

  const boost::filesystem::path& get_confd_install_root()
  {
    return confd_install_root_;
  }

  const boost::filesystem::path& get_test_root()
  {
    return test_root_;
  }

  const boost::filesystem::path& get_socket_path()
  {
    return socket_path_;
  }

  const boost::filesystem::path& get_confd_conf_path()
  {
    return confd_conf_path_;
  }

  void keep_test_dirs(bool keep)
  {
    keep_test_dirs_ = keep;
  }


 public:
  // .fxs APIs

  /**
   * Determine the modules that have been loaded in a yang model, find
   * the corresponding fxs files, and symlink the fxs files into the
   * unit test directory hierarchy.
   */
  void load_fxs_schema(
    /// The model
    rw_yang::YangModel* yang_model);

  /**
   * Link all the fxs files in a particular directory to the unit test
   * load directory.
   */
  void link_fxs_files(
    /// Path to the source directory
    const boost::filesystem::path& srcdir);

  /**
   * Link all the fxs files in a particular directory to the unit test
   * load directory.
   */
  void link_one_fxs_file(
    /// Path to the source file
    const boost::filesystem::path& srcf);


 public:
  // Manage confd process

  /**
   * Start the confd server, using the current configuration DOM.  This
   * generates the DOM file, and spawns the confd.
   * ATTN: And waits for it to be ready? (ATTN: How do you wait?)
   */
  void start();

  /**
   * Stop the confd server.  Will also delete the resources.
   */
  void stop();

  /**
   * Check that confd was started and is still running.
   *
   * @return false is confd was never started, or has exitted.
   */
  bool is_running();

  pid_t get_confd_pid()
  {
    return confd_pid_;
  }


 public:
  // Utilities for talking to confd

  /**
   * Wait till confd reaches Phase-2
   */
  bool wait_till_phase2(sockaddr_t* sun);

  /**
   * Fill in a sockaddr_un with the socket address.
   */
  void make_confd_sockaddr(
    /// The sockaddr to fill in.
    sockaddr_t* sun);

  /**
   * Create and initialize a confd socket.  The socket will not be
   * connected - that is up to the caller.
   */
  int alloc_confd_socket();

  /**
   * Get (or allocate if not yet allocated) the confd context for the
   * harness.
   */
  context_t* get_confd_context();


 private:

  static void handle_sig(int sig, siginfo_t* si, void* uc);


 private:

  /**
   * The name of the test.
   */
  std::string test_name_;

  /**
   * Path to the RIFT_ROOT directory.
   */
  boost::filesystem::path rift_root_;

  /**
   * Path to the install copy of the confd root directory.
   * ($RIFT_ROOT/.install/.../confd)
   */
  boost::filesystem::path confd_install_root_;

  /**
   * Current working directory when the test harness was created.
   */
  boost::filesystem::path cwd_;

  /**
   * Path to the unit test confd instance's root directory.  This
   * directory structure will be destroyed and recreated each time the
   * test restarts.
   */
  boost::filesystem::path test_root_;

  /// Keep the test directory hierarchy when test completes?
  bool keep_test_dirs_ = false;

  /**
   * Path to the unit test confd's communication AF_UNIX socket.  This
   * socket is used by the unit test to communicate with confd.
   */
  boost::filesystem::path socket_path_;

  /**
   * Path to the confd.conf for the unit test's confd instance.
   */
  boost::filesystem::path confd_conf_path_;

  /**
   * XML manager used for creating the confd.conf DOM.  This is a
   * general-purpose xerces-based manager.
   */
  rw_yang::XMLManager::uptr_t xml_mgr_;

  /**
   * The confd.conf DOM.  Initialized from a template configuration.
   * Possibly modified during the configuration stages.  Saved to a
   * file in the test directory just prior to confd start.
   */
  rw_yang::XMLDocument::uptr_t confd_conf_dom_;

  /**
   * The file descriptor to confd STDIN.  Closing this FD causes confd
   * to exit.
   */
  int confd_fd_ = -1;

  /**
   * The PID for the confd process.
   */
  pid_t confd_pid_ = -1;

  /**
   * The confd daemon context for this harness.
   */
  context_t* confd_context_ = nullptr;

  /**
   * For SIGCHLD handling, the value of the old sigaction structure
   * before starting confd.  Will be restored when the test is
   * complete.
   */
  struct sigaction old_sa_;

  /**
   * Is old_sa_ valid?
   */
  bool has_old_sa_ = false;
};


/** @} */

} // namespace rw_yang

#endif
