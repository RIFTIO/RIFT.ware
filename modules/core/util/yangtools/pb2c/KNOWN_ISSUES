PB2C.C TODO LIST
----------------
o Generate a struct-copy routine for each C-type
  (this can be closely modeled after the generated C-struct free() routines)

o Generate a C-struct (& protobuf?) debug stringize function for each type
  NOTE: the quick-n-dity way to do this to to pack the struct and then call
  the C++ generated unpack + DebugPrint() methods...

o Generate a version #define for each msg type by HASHING all corresponding type info from the .DSO
  (This will eventually be needed to detect when cross-version messaging occurs)

o Enhanced ENUM marshalling support
     - Verify enum values are valid during marshalling
     - Auto-gen min/max valid enum values for ech enum (protoc generates this for C++ code)

o Ability to override a specific message with user-supplied text/code
  (similar to what was done for the ipaddress auto-union type)
     - C struct type to insert to replace any field
     - init fn
     - free fn
     - marshall PB->C
     - marshall C->PB

o Automatic Cross message version-support
   foo1.proto------->[**AutoGen C-struct]---(**Auto-gen-cp)--->[C++ Protobof]---->[Serialized]
                     [                  ]<--(**Auto-gen-cp)----[C++ Protobof]<----[Serialized]<---foo2.proto
                                         ^^Automatic copy if HASH(foo1.proto)==HASH(foo2.proto)
                                           otherwise, a helper function must be supplied (or it fails)

o Support for suppressing copy of default values from C-struct form back
  into the protobuf representation when a value is optional (prob. most important for just strings)
  NOTE: the protobuf form uses a single static instance of each default value to avoid calling free() on them

o Cleanup code in pb2c.c marked with #ifdef ZZZ and TIM_REWORK_HERE
  - ZZZ - hack stuff for for autounions of IPaddrs

o Q: Do we want to represent optional and repeated EXACTLY the same in C-structs?
     (This would minimize impact on C-code dependent C-structs when changing optional->repeated in a .proto file)

o Q: Do we want to replace all strings (currently uses char *) with uthash strings?

o Q: Do we want to replace all vec instances in C-structs with utarray instances?

o Q: Do we want to define __ByteVec_t in terms of ProtobufCBinaryData?
    (See: pb2c.c generate_code() for the simple typedef required to do so)

o TBD: Define some method to flatten some C-struct types into arrays
    e.g. This basically means we need to make some things that are pointers into arrays
    i.e. string -> char[<fixed-size>] , vec -> fixed-size array[<max-size>]


PERFORMANCE IMPROVMENTS
-----------------------
o Improved the code that converts C-struct to packed form by bypassing the dynamic malloc()/free() calls
  used to create/free the intermediate protobuf form created from the C-struct form

o Improve the code that converts from packed form to C-struct by bypassing dynamic malloc()/free() calls
  used to create/free the intermediate protobuf form created from the C-struct form


FUTURE STUFF
------------
o ???
