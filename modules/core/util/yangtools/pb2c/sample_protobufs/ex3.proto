import "descriptor.proto";
import "rwpbapi.proto";

import "ex1.proto";

option cc_generic_services = true;

message msg1flat
{
  option (rw_msgopts) = { flat:true };
  required int32  a=1; 
  optional int32  b=2;
  optional string c=3 [default = "ccc", (rw_fopts) = { string_max:64 }];
  optional bytes  d=4 [(rw_fopts) = { string_max:64 }];
  repeated bytes  e=5 [(rw_fopts) = { inline_max:16, string_max:64 }];
  required int32  isThisAproblem = 6;
  required int32  ISTHISANISSUE = 7;
  required int32  how_about_this = 8;
}


message msg2flat
{
  option (rw_msgopts) = { flat:true };

  required int32 a=1 [default = 99];
  optional int32 b=2 [default = 999];
  repeated int32 c=3  [(rw_fopts) = { inline_max:16 }];;
  repeated Tenum d=4  [(rw_fopts) = { inline_max:4 }];;
  repeated string e=5  [(rw_fopts) = { inline_max:2, string_max:32 }];;
  optional string f=6 [ default = "ffff", (rw_fopts)={string_max:32}];
}


message m6sub_unnested {
  option (rw_msgopts) = { flat:true };
  required int32 i1 = 1;
  required int32 i2 = 2;
}


message m6flat
{
  /* Whole thing should be inline */
  option (rw_msgopts) = { flat:true };
  required int32 i1 = 1;

  message m6sub_nested {
    option (rw_msgopts) = { flat:true };
    required int32 i1 = 1;
    required int32 i2 = 2;
  };

  required m6sub_nested m6subnest = 13;
  required m6sub_unnested m6subun = 14;

  optional string s1 = 2 [(rw_fopts) = { string_max:64 }, default="s1def" ]; // should be inline
  required string s1_req = 9 [(rw_fopts) = { string_max:64 }, default="s1_reqdef" ];;
  repeated string s1_rep = 10 [(rw_fopts) = { inline_max:3,string_max:64 } ];

  required uint32 r_req = 8;
  optional uint32 r_opt_nodefault = 7;
  optional uint32 r_opt = 11 [ default = 311 ];
  repeated uint32 r = 3       [(rw_fopts) = { inline_max:3 }];

  required bytes byt_req = 16 [ default = "byt_req_def", (rw_fopts) = { string_max:32 }];
  optional bytes byt_opt = 15 [ (rw_fopts) = { string_max:32 }];
  repeated bytes byt_rep = 17 [ (rw_fopts) = { inline_max:4 string_max:32 }];

  required msg1flat m1_req = 5;
  optional msg1flat m1 = 4;
  repeated msg1flat m1_rep = 6 [(rw_fopts) = { inline_max:5 }];

  optional msg2flat m2 = 12;
}

message m6nonflat
{
  /* Whole thing should be not inline */
  option (rw_msgopts) = { flat:false };
  required int32 i1 = 1;

  message m6sub_nested {
    required int32 i1 = 1;
    required int32 i2 = 2;
  };

  required m6sub_nested m6subnest = 13;
  required m6sub_unnested m6subun = 14;

  optional string s1 = 2; // should be inline
  required string s1_req = 9;
  repeated string s1_rep = 10 [(rw_fopts) = { inline_max:3 }];

  required uint32 r_req = 8;
  optional uint32 r_opt_nodefault = 7;
  optional uint32 r_opt = 11 [ default = 311 ];
  repeated uint32 r = 3       [(rw_fopts) = { inline_max:3 }];

  required bytes byt_req = 16 [ default = "byt_req_def", (rw_fopts) = { string_max:32 }];
  optional bytes byt_opt = 15 [ (rw_fopts) = { string_max:32 }];
  repeated bytes byt_rep = 17 [ (rw_fopts) = { inline_max:4 string_max:32 }];

  required msg1flat m1_req = 5;
  optional msg1flat m1 = 4;
  repeated msg1flat m1_rep = 6 [(rw_fopts) = { inline_max:5 }];

  optional msg2flat m2 = 12;
}

message m6partflat
{
  /* Whole thing should not be inline, only certain fields */
  option (rw_msgopts) = { flat:false };
  required int32 i1 = 1;

  message m6sub_nested {
    required int32 i1 = 1;
    required int32 i2 = 2;
  };

  required m6sub_nested m6subnest = 13;
  required m6sub_unnested m6subun = 14;

  optional string s1 = 2;
  required string s1_req = 9;
  repeated string s1_rep = 10 [(rw_fopts) = { inline:true,inline_max:3,string_max:64 }];

  required uint32 r_req = 8;
  optional uint32 r_opt_nodefault = 7;
  optional uint32 r_opt = 11    [ default = 311 ];
  repeated uint32 r = 3         [(rw_fopts) = { inline:true,inline_max:3 }];

  required bytes byt_req = 16 [ default = "byt_req_def", (rw_fopts) = { string_max:32 }];
  optional bytes byt_opt = 15 [ (rw_fopts) = { string_max:32 }];
  repeated bytes byt_rep = 17 [ (rw_fopts) = { inline_max:4 string_max:32 inline:true }];

  required msg1flat m1_req = 5  [(rw_fopts) = { inline:true }];
  optional msg1flat m1 = 4      [(rw_fopts) = { inline:true }];
  repeated msg1flat m1_rep = 6;

  optional msg2flat m2 = 12;
}

service Foo {
  option (rw_srvopts) = { srvnum:100 };
  rpc Bar1(msg1) returns(msg2) {
    option (rw_methopts) = { methno:1 };
  };
  rpc Bar2(msg2) returns(msg3) {
    option (rw_methopts) =  { pri:RW_METHPRI_MEDIUM methno:2 blocking:true};
  };
}

service FooCamel {
  option (rw_srvopts) = { srvnum:100 };
  rpc Bar1(msg1) returns(msg2) {
    option (rw_methopts) = { methno:1 };
  };
  rpc Bar2(msg2) returns(msg3) {
    option (rw_methopts) =  { pri:RW_METHPRI_MEDIUM methno:2 blocking:true};
  };
}

service foo_underscore {
  option (rw_srvopts) = { srvnum:100 };
  rpc Bar1(msg1) returns(msg2) {
    option (rw_methopts) = { methno:1 };
  };
  rpc Bar2(msg2) returns(msg3) {
    option (rw_methopts) =  { pri:RW_METHPRI_MEDIUM methno:2 blocking:true};
  };
}

service Foo_Underscore_Cap {
  option (rw_srvopts) = { srvnum:100 };
  rpc Bar1(msg1) returns(msg2) {
    option (rw_methopts) = { methno:1 };
  };
  rpc Bar2(msg2) returns(msg3) {
    option (rw_methopts) =  { pri:RW_METHPRI_MEDIUM methno:2 blocking:true};
  };
}
