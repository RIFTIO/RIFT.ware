import "descriptor.proto";
import "rwpbapi.proto";

option cc_generic_services = true;

/* Define some message types, and a service using them. */

message m1
{
  /* Message-wide options.  */
  option (rw_msgopts) = { flat:false };
  required int32 i1 = 1 [default = 1];
  optional string s1 = 2;
  /* Field options.  Placeholder syntax, currently unimplemented. */
  repeated uint32 r = 3 [(rw_fopts) = { inline:false inline_max:10 }];
}

message m2
{
  option (rw_msgopts) = { flat:false };
  required int32 i1 = 1 [default = 2];
  repeated uint32 r = 2;
}

message rsp1
{
  required uint32 status = 1 [default = 0];
  optional string foo = 2;
}

service RWMsgTestSrv1 {
  /* Service options.  Service number is required.  It appears on the
     wire, it must be agree between all peers. */
  option (rw_srvopts) = { srvnum:99 };

  rpc Method1(m1) returns(rsp1) {
    /* Method options.  Method number is required.  It is also on the
       wire and must agree between peers. */
    option (rw_methopts) = { methno:1 };
  };

  rpc Method2(m2) returns(rsp1) {
    /* Priority always applies.  Blocking just triggers generation of
       a foo_b() blocking API function, one could block anyway with
       underlying rwmsg calls. */
    option (rw_methopts) =  { methno:2 pri:RW_METHPRI_MEDIUM blocking:true};
  };
}

