import "descriptor.proto";
import "rwpbapi.proto";

option cc_generic_services = true;

/*
 * Example message, the same but with three different C structure layouts
 */

message example
{
  required int32 foo_int = 1       [ default = 10 ];
  repeated int32 foo_int_arr = 2;

  required string foo_str = 3      [ default = "foo_str_def" ];
  repeated string foo_str_arr = 4;

  message nest {
    required string str = 1;
  };
  optional nest submsg = 5;
}

message example_flat
{
  option (rw_msgopts) = { flat:true };

  required int32 foo_int = 1       [ default = 10 ];
  repeated int32 foo_int_arr = 2   [ (rw_fopts) = { inline_max:16 } ];

  required string foo_str = 3      [ default = "foo_str_def", (rw_fopts) = { string_max:64 } ];
  repeated string foo_str_arr = 4  [ (rw_fopts) = { string_max:64 inline_max:4 } ];

  message nest {
    option (rw_msgopts) = { flat:true };
    required string str = 1        [ (rw_fopts) = { string_max:64 } ];
  };
  optional nest submsg = 5;
}

message example_partlyflat
{
  required int32 foo_int = 1       [ default = 10 ];
  repeated int32 foo_int_arr = 2   [ (rw_fopts) = { inline:true inline_max:16 } ];

  required string foo_str = 3      [ default = "foo_str_def" ];
  repeated string foo_str_arr = 4  [ (rw_fopts) = { inline:true string_max:64 inline_max:4 } ];

  message nest {
    required string str = 1;
  };
  optional nest submsg = 5;
}

message misc
{
  enum result {
    RES_A=0;
    RES_B=1;
    RES_C=2;
  }
  repeated result foo=1[(rw_fopts)={inline:true inline_max:2}];
}


/*
 * Test service 
 */

message test_body {
  option (rw_msgopts) = { flat:true };
  required uint32 value = 1 [ default=0 ];
  required uint32 hopct = 2 [ default=0 ];
}

message test_req {
  option (rw_msgopts) = { flat:true };
  required test_body body = 1;
}

message test_rsp {
  option (rw_msgopts) = { flat:true };
  required int32 errval = 1;
  optional test_body body = 2;
}

message test_nop {
  option (rw_msgopts) = { flat:true };
  required int32 errval = 1;
}


/* The service's declaration */

service Test {
  option (rw_srvopts) = { srvnum:100 };

  rpc Increment(test_req) returns(test_rsp) {
    option (rw_methopts) = { methno:1 blocking:true};
  };

  rpc Fail(test_req) returns(test_nop) {
    option (rw_methopts) =  { methno:2 pri:RW_METHPRI_MEDIUM blocking:true};
  };
}
