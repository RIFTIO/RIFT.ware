/**
 * @file rw_dts_int.proto
 * @author Grant Taylor
 * @date 2014/08/25
 * @brief rwdts service definition
 */

import "descriptor.proto";
import "rwpbapi.proto";
import "rw_schema.proto";

option cc_generic_services = true;
option (rw_fileopts) = { gen_gi:true }; 

enum RWDtsQueryAction {
  RWDTS_QUERY_INVALID = 0;
  RWDTS_QUERY_CREATE = 1;
  RWDTS_QUERY_READ = 2;
  RWDTS_QUERY_UPDATE = 3;
  RWDTS_QUERY_DELETE = 4;
  RWDTS_QUERY_RPC = 5;
}

enum RWDtsXactEvt {
  RWDTS_EVT_PREPARE = 1;
  RWDTS_EVT_PRECOMMIT = 2;
  RWDTS_EVT_COMMIT = 3;
  RWDTS_EVT_ABORT = 4;

  // only for tracert
  RWDTS_EVT_QUERY = 16;
  RWDTS_EVT_INIT = 17;
  RWDTS_EVT_PREPARE_IDLE = 19;
  RWDTS_EVT_SUBCOMMIT = 20;
  RWDTS_EVT_SUBABORT = 21;
  RWDTS_EVT_DONE = 22;
  RWDTS_EVT_TERM = 23;
}

enum RWDtsXactMainState {
  RWDTS_XACT_INVALID = 0;
  RWDTS_XACT_INIT = 1;
  RWDTS_XACT_RUNNING = 2;
  RWDTS_XACT_COMMITTED = 3;
  RWDTS_XACT_ABORTED = 4;
  RWDTS_XACT_FAILURE = 5;
}

enum RWDtsRtrConnState {
  RWDTS_RTR_STATE_DOWN = 0;
  RWDTS_RTR_STATE_UP   = 1;
}

enum RWDtsKeyType {
  RWDTS_KEY_RWKEYSPEC = 0;
  RWDTS_KEY_XPATH = 1;
}

enum RWDtsPayloadType {
  RWDTS_PAYLOAD_NONE = 0;
  RWDTS_PAYLOAD_XML = 1;
  RWDTS_PAYLOAD_PB = 2;
  RWDTS_PAYLOAD_PBRAW = 3;
  RWDTS_PAYLOAD_PBDELTA = 4;
  RWDTS_PAYLOAD_KEYSPEC = 5;
  RWDTS_PAYLOAD_SUB_XPATH = 6;
  RWDTS_PAYLOAD_SUB_XQUERY = 7;
}

enum RWDtsEventRsp {
  RWDTS_EVTRSP_NULL = 0;
  RWDTS_EVTRSP_ASYNC = 1;
  RWDTS_EVTRSP_NA    = 2;
  RWDTS_EVTRSP_ACK   = 3;
  RWDTS_EVTRSP_NACK  = 4;
  RWDTS_EVTRSP_INTERNAL = 5;
}

enum RWDtsShardMapping {
  RWDTS_SHARD_MAPPING_IDENTI = 1;
  RWDTS_SHARD_MAPPING_STRKEYS = 2;
  RWDTS_SHARD_MAPPING_RANGES = 3;
  RWDTS_SHARD_MAPPING_HASHES = 4;
}

message RWDtsPayload {
  required RWDtsPayloadType ptype = 1;
  optional bytes paybuf = 2;
}

message RWDtsKey {
  required RWDtsKeyType ktype = 1;
  optional bytes keybuf = 2;
  optional RwSchemaPathSpec keyspec = 3;
  optional string keystr = 4;
}

enum RWDtsTracerouteEntState {
  RWDTS_TRACEROUTE_STATE_NONE = 0;
  RWDTS_TRACEROUTE_STATE_SENT = 1;
  RWDTS_TRACEROUTE_STATE_RESPONSE = 2;
  RWDTS_TRACEROUTE_STATE_BOUNCE = 3;
}

enum RWDtsTracerouteEntType {
  RWDTS_TRACEROUTE_WHAT_UNK = 0;
  RWDTS_TRACEROUTE_WHAT_ADDBLOCK = 1;
  RWDTS_TRACEROUTE_WHAT_REQ = 2;
  RWDTS_TRACEROUTE_WHAT_RESULTS = 3;
  RWDTS_TRACEROUTE_WHAT_ROUTE = 4;
  RWDTS_TRACEROUTE_WHAT_MEMBER_MATCH = 5;
  RWDTS_TRACEROUTE_WHAT_ABORT = 6;
  RWDTS_TRACEROUTE_WHAT_CODEPOINTS = 7;
  RWDTS_TRACEROUTE_WHAT_PREP_TO = 8;
  RWDTS_TRACEROUTE_WHAT_END_FLAG = 9;
}

enum RWDtsMemberCodePoints {
  RWDTS_MEMBER_dispatch_query_response=1;
  RWDTS_MEMBER_dispatch_query_response_f=2;
  RWDTS_MEMBER_send_query_rsp_evt=3;
  RWDTS_MEMBER_member_split_rsp=4;
  RWDTS_MEMBER_respond_router=5;
  RWDTS_MEMBER_respond_router_f=6;
  RWDTS_MEMBER_respond_router_immediate=7;
}

message RWDtsTracerouteEnt {
  required uint64 tv_sec = 3;
  required uint32 tv_usec = 4;
  optional string func = 12;
  required uint32 line = 13;
  required RWDtsTracerouteEntType what = 8;
  optional string dstpath = 1;
  optional string srcpath = 2;
  optional uint32 reg_id = 17;

  // REQ
  repeated uint64 queryid = 7 [ (rw_fopts) = { inline:true inline_max:8 } ];
  required uint64 elapsed_us = 5;
  required RWDtsTracerouteEntState state = 6;
  required RWDtsXactEvt event = 14;

  // ROUTE
  // srcpath is from query; dstpath is from registration
  optional string matchdesc = 15;
  optional string matchpath = 16;

  // MEMBER MATCH
  // srcpath is query; matchpath is registration; dstpath is member path
  repeated uint32 evt = 18 [ (rw_fopts) = { inline:true inline_max:255 } ];

  // ADDBLOCK
  optional RWDtsXactBlock block = 9;

  // RESULTS
  required RWDtsEventRsp res_code = 10;
  required uint32 res_count = 11;
}

/* Error entry for any query or transaction failures */
message RWDtsErrorEntry {
  required uint64 tv_sec = 1;
  required uint32 tv_usec = 2;
  required uint32 cause = 3; /* rw_status_t error cause */
  optional RWDtsKey key = 4;
  optional string errstr = 5;
  optional uint64 corrid = 6;
  optional uint32 queryidx = 7;      /* index of query within block/subx */
  optional uint64 serialnum = 8;     /* Serial number of the query */
  optional uint64 client_idx = 9;     /* Serial number of the query */
  optional uint64 router_idx = 10;     /* Serial number of the query */
  optional RWDtsXactBlkID block = 11;
  optional string client_path = 12;
  optional string router_path = 13;
  optional string tasklet_name = 14;
  optional uint64 tasklet_inst = 15;
  optional RWDtsQueryAction action = 16;
  optional uint32 query_flags = 17;
  optional string keystr_buf = 18;
}

message RWDtsErrorReport {
  repeated RWDtsErrorEntry ent = 1;
}

message RWDtsTraceroute {
  repeated RWDtsTracerouteEnt ent = 1;
  optional bool print = 2;
  optional bool break_start = 3;
  optional bool break_prepare = 4;
  optional bool break_end = 5;
}

/* Set one or more flags, and everyone downstream will do those debug
   actions, fill in the related debug objects, append downstream debug
   data, and return the whole kaboodle upstream.  So there is a
   traceroute-alike function, and a transaction-specific trace into a
   log function, and a transaction-specific rwlog function of some
   sort, etc.  Note that the dbg field in all RWDts messages has tag
   value 15 to prevent/cause confusion and maybe enable something
   grotesque in the future. */
enum RWDtsDebugOpts {
  RWDTS_DEBUG_RWLOG = 1;
  RWDTS_DEBUG_TRACEROUTE = 2;
  // ... 4 ... 
}
message RWDtsDebug {
  optional uint32 dbgopts1 = 1;
  optional RWDtsTraceroute tr = 2;
  optional RWDtsErrorReport err_report = 3;
}

/*
 * Specify part of a XPath expression
 */
 message RWDtsReduction {
   required int32 id          =  1;
   required uint32 action     =  2; // XPath operator or function
   required uint32 flags      =  3;
   required uint32 pass       =  4; // Keep track of the passes
   optional int32 next_id     =  5; // to be executed after or parallel
   repeated int32 dep_ids     =  6; // to be executed before
   optional int32 start_id    =  7; // Path start id
   optional string loc_path   =  8; // For keyspec comparison
   optional double val_double =  9; // All numbers stored as double
   optional string val_str    = 10;
}

/*
 * Complete parsed XPath expression
 */
message RWDtsRednExpression {
  repeated RWDtsReduction redn = 1;
}

/*
 * Used in cases where the reduction changes the message elements
 */
message RWDtsRednRespEntry {
  required int32  id           =  1; // Match with the filter id
  required uint32 flags        =  2; // Flags to specify any errors
  optional RWDtsKey key        =  3;
  optional RWDtsKey leaf       =  4;
  optional uint32 ltype        =  5; // ProtobufCType
  optional uint32 llabel       =  6; // ProtobufCLabel
  optional string xpath        =  7;
  optional uint64 count        =  9; // Used in case of avg, count
  optional uint64 val_uint64   = 10; // For uint responses
  optional sint64 val_sint64   = 11; // For int responses
  optional double val_double   = 12; // For decimal responses
  optional string val_str      = 13; // For string responses
  optional bytes  val_bytes    = 14; // For binary responses
  optional bytes  val_pbcm     = 15; // For nested struct. Could do a self ref which can have implications for serialization
}

message RWDtsRednResp {
  repeated RWDtsRednRespEntry entries = 1;
}

/*
 * The ids in this message combined uniquely identifies
 * a publisher
 */

message RwDtsPubIdentifier {
  option (rw_msgopts) = { flat:true };
  optional uint64 member_id = 1;
  optional uint64 router_id = 2;
  optional uint64 pub_id = 3;
}

/*
 * The QuerySerial is used to convey the serial assocaited with 
 * each advise query.
 */
message RwDtsQuerySerial {
  option (rw_msgopts) = { flat:true };
  optional RwDtsPubIdentifier id = 1;
  optional uint64 serial = 2;
}


message RWDtsQuery {
  required RWDtsKey key = 1;
  required RWDtsQueryAction action = 2;
  required uint32 flags = 3;
  optional RWDtsPayload payload = 4;

  optional uint64 corrid = 5;                  /* api caller-provided correlation ID, in */
  optional uint32 queryidx = 6;                /* index of query within block/subx, internal correlation ID */
  optional uint32 credits = 7;                 /* Credits . Set for get-next query */
  optional string getnext_key = 8;             /* get_next_key. User defined */
  optional RwDtsQuerySerial serial = 9;        /* Serial used for advise queries */ 
  optional RWDtsRednExpression redn_expr = 10; /* Reductions for query responses */
  repeated uint64 commit_serials = 11;
  optional RWDtsDebug dbg = 15; 
}

message RWDtsXactBlock {
  required uint32 flags = 1;
  optional RWDtsXactBlkID block = 2;
  repeated RWDtsQuery query = 3;
}

message RWDtsXactID {
  option (rw_msgopts) = { flat:true };
  // placeholder
  required uint64 router_idx = 1; /* xacts hash relies on router_idx at the beginning */
  required uint64 taskstamp = 2;
  required uint64 serialno = 3;
  required uint64 client_idx = 4;   
}

message RWDtsXactBlkID {
  required uint64 routeridx = 1;
  required uint64 clientidx = 2;
  required uint32 blockidx = 3;
}

/* A transaction consists of one or more blocks of queries */
message RWDtsXact {
  required RWDtsXactID id = 1 [ (rw_fopts) = { inline:true } ];
  optional RWDtsXactID parentid = 2 [ (rw_fopts) = { inline:true } ];
  required string client_path = 3;
  optional uint32 flags = 4;
  optional RWDtsXactBlkID block = 5;
  repeated RWDtsXactBlock subx = 7;
  optional RWDtsDebug dbg = 15; 
}

/* A single result from an individual query.  It may be a
   concactenation of all matching responses, or may have been reduced,
   or may simply be a single response. The count is always present and
   is always the count of individual respons hits.  In the event of
   response reduction this is useful for ie further reduction via
   weighted averaging.  In the event of a delete query this is nice to
   know just because... */

message RWDtsQuerySingleResult {
  required uint64 count = 1;
  optional RWDtsKey path = 2;    /* specific path matched for distinct results */
  optional RWDtsPayload result = 3;
  optional uint32 redn_resp_id = 4; /* 0 if the payload is not filtered response
                                       Keeping as uint to support new message structure later */
  optional RWDtsEventRsp evtrsp = 14;
  optional RWDtsDebug dbg = 15; 
}

/* The overall result from an individual query.  It may be a list of
   single results, or a single result, or a single reduced result */
message RWDtsQueryResult {
  optional uint64 corrid = 1;    /* api caller-provided correlation ID, out */
  repeated RWDtsQuerySingleResult result = 2;
  optional uint32 redn_resp_id = 4; /* 0 if the result is not filtered response
                                       Keeping as uint to support new message structure later */
  optional RWDtsXactBlkID block = 5;
  optional uint32 queryidx = 6;  /* which query in the block/subx? */
  optional uint64 serialnum = 8;  /* Serial Number */
  optional bool more = 7;  /* This is the last one(s) for this block-query */
  optional uint64 client_idx = 9;  /* ClientId   ( ?? is this the same as block->client_idx ?? )*/
  optional uint64 router_idx = 10;  /* Router Id ( ?? is this the same as block->router_idx ?? )*/
  optional RWDtsEventRsp evtrsp = 14;
  optional RWDtsDebug dbg = 15; 
}

/* Results of a block => results from each query */
message RWDtsXactBlockResult {
  repeated RWDtsQueryResult result = 1;
  optional uint32 blockidx = 2;          /* Client's block id, same as that element in BlkID->blockidx, ought to just put BlkID */
  optional bool more = 7;  /* Indication to router to ask for more*/
  optional RWDtsEventRsp evtrsp = 14;
  optional RWDtsDebug dbg = 15; 
}

message RWDtsXactResult {
  required RWDtsXactID id = 1 [ (rw_fopts) = { inline:true } ];
  repeated RWDtsXactBlockResult result = 2;
  optional RWDtsXactMainState status = 3;
  optional RWDtsEventRsp evtrsp = 4;
  optional bool more = 5;
  repeated RWDtsXactBlkID new_blocks = 6;
  optional bool redn_resp = 7;
  optional RWDtsDebug dbg = 15;
}

message RWDtsVoid {

}
enum RWDtsQueryStatus {
  RWDTS_QUERY_STATUS_ASYNC = 1;
  RWDTS_QUERY_STATUS_ACK = 2;
  RWDTS_QUERY_STATUS_NACK = 3;
}

message RWDtsStatus {
  optional RWDtsXactID id = 1;
  optional RWDtsQueryStatus status = 2;
}
message RWDtsSingleRegisterReq {
  //required RWDtsXactID id = 1;
  optional uint64 corrid  = 2;        /* api caller-provided correlation ID, in */
  optional RWDtsKey  key = 3;
  optional uint32 flags = 4;        /* subscriber/publisher ... */
  optional bytes str_key = 5;
  optional uint32 key_first = 6;
  optional uint32 key_last = 7;
  optional RWDtsShardMapping mapping = 8;
  optional uint32 reg_id = 9;
  optional RWDtsDebug dbg = 15; 
  
}

message RWDtsSingleDeRegisterReq {
  //required RWDtsXactID id = 1;
  optional uint64 corrid  = 2;        /* api caller-provided correlation ID, in */
  optional RWDtsKey  key = 3;
  optional bytes str_key = 4;
  optional uint32 key_first = 5;
  optional uint32 key_last = 6;
  optional RWDtsShardMapping mapping = 7;
  optional uint32 reg_id = 8;
  optional RWDtsDebug dbg = 15;

}

message RWDtsSingleRegisterRsp {
  //required RWDtsXactID id = 1;
  optional uint64 corrid = 2;        /* api caller-provided correlation ID, in */
  optional RWDtsKey  key = 3;
  optional uint32 flags = 4;        /* subscriber/publisher ... */
  optional uint32 status = 5;       /* status of this registration */
  optional uint32 db_number = 6;
  optional string shard_chunk_id = 7;
  optional RWDtsDebug dbg = 15; 
}

message RWDtsSingleDeRegisterRsp {
  //required RWDtsXactID id = 1;
  optional uint64 corrid = 2;        /* api caller-provided correlation ID, in */
  optional RWDtsKey  key = 3;
  optional uint32 status = 5;       /* status of this registration */
  optional uint32 reg_id = 6;
  optional RWDtsDebug dbg = 15;
}

message RWDtsDbShardInfoRsp {
  optional uint32 db_number = 2;
  optional string shard_chunk_id = 3;
}

message RWDtsGetDbShardInfoReq {
  //required RWDtsXactID id = 1;
  required string member = 2;
  optional RWDtsDebug dbg = 15;
}

message RWDtsGetDbShardInfoRsp {
  //required RWDtsXactID id = 1;
  repeated RWDtsDbShardInfoRsp responses = 2;
  optional RWDtsDebug dbg = 15;
}

message RWDtsRegisterReq {
//  required RWDtsXactID id = 1;
  repeated RWDtsSingleRegisterReq requests = 2;
  optional string member = 3;
  optional RWDtsDebug dbg = 15; 
}
message RWDtsRegisterRsp {
  repeated RWDtsSingleRegisterRsp responses = 2;
  repeated uint32 reg_id = 3;
  optional RWDtsDebug dbg = 15; 
}

message RWDtsDeRegisterReq {
//  required RWDtsXactID id = 1;
  repeated RWDtsSingleDeRegisterReq requests = 2;
  optional string member = 3;
  optional RWDtsDebug dbg = 15;
}

message RWDtsMembDeRegisterReq {
  repeated string member = 2;
  optional RWDtsDebug dbg = 15;
}

message RWDtsMembDeRegisterRsp {
  repeated string member = 2;
  optional RWDtsDebug dbg = 15;
}

message RWDtsDeRegisterRsp {
  repeated RWDtsSingleDeRegisterRsp responses = 2;
  optional RWDtsDebug dbg = 15;
}

message RWDtsClientset {
  repeated string member = 1;
}

message RWDtsQueryRspStatus {
  required RWDtsXactID id = 1;
  required uint32 blockidx = 2;
  required uint32 queryidx = 3;
  optional uint32 status = 4;  /* status of the notification */
  optional RWDtsDebug dbg = 15; 
}

/* Define a service to speak to and from the Router */

/* TBD: pick a better number! */
service RWDtsQueryRouter {
   option (rw_srvopts) = { srvnum:1 };

   rpc Regist/*er*/(RWDtsRegisterReq) returns(RWDtsRegisterRsp) {
     option (rw_methopts) = { methno:1 blocking:false };
   };

   /* Query API implementation */

   /* Create/append, xact/subx, depending on novelty and existence of xact ID and parent ID values */
   rpc Execute(RWDtsXact) returns(RWDtsXactResult) {
     option (rw_methopts) = { methno:2 blocking:true };
   };

   rpc End(RWDtsXactID) returns (RWDtsStatus) {
     option (rw_methopts) = { methno:4 blocking:false };
   };

   rpc Abort(RWDtsXactID) returns (RWDtsStatus) {
     option (rw_methopts) = { methno:5 blocking:false };
   };

   rpc Flush(RWDtsXactID) returns (RWDtsStatus) {
     option (rw_methopts) = { methno:6 blocking:false };
   };
}



service RWDtsMemberRouter {
   option (rw_srvopts) = { srvnum:2 };

   /* Upcalls to router from member. */
   rpc GetDbShardInfo(RWDtsGetDbShardInfoReq) returns(RWDtsGetDbShardInfoRsp) {
     option (rw_methopts) = { methno:3 blocking:false };
   };
}

service RWDtsMember {
   option (rw_srvopts) = { srvnum:3 };

   /* Calls from router to member API */   
   rpc Prepare(RWDtsXact) returns(RWDtsXactResult) {
     option (rw_methopts) = { methno:1 blocking:false };
   }

   rpc SubCommit(RWDtsXact) returns (RWDtsXactResult) {
     option (rw_methopts) = { methno:2 blocking:false };
   }

   rpc SubAbort(RWDtsXact) returns (RWDtsXactResult) {
     option (rw_methopts) = { methno:3 blocking:false };
   }

   rpc PreCommit(RWDtsXact) returns (RWDtsXactResult) {
     option (rw_methopts) = { methno:4 blocking:false };
   }

   rpc Commit(RWDtsXact) returns (RWDtsXactResult) {
     option (rw_methopts) = { methno:5 blocking:false };
   }

   rpc Abort(RWDtsXact) returns (RWDtsXactResult) {
     option (rw_methopts) = { methno:6 blocking:false };
   }
}
