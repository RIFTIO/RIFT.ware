Process Management

Introduction:

Native processes provide a very quick and easy method to port
existing services to riftware.  While the native processes will
not directly use the riftware interface, they can still benefit
from the higher level rift services such as topology management
and automatic scaling.

As native processes will be the first interaction with riftware
for many customers, they need to provide a full range of
management options such as:  automatic restart, event
notification, and resource monitoring.  Ideally, this can be all
provided by a third-party package.

Deployment Managers:

One proposed solution was to use deployment managers such as
Puppet, Chef or Ansible.  While these tools do have plugins or
other support for the other tools listed below, they are overkill
for simple process supervision.  More importantly, none of them
directly support continuous monitoring.


Third party packages:

- Daemontools:
  - Original process supervisor by djb.
  - Automatic restart of dead processes.
  - New processes added by creating directory with run script.
  - No support for broadcasting events.

- Supervisor:
  - Python (2 only, not 3) process supervisor
  - Automatic restart/retry
  - XML-RPC interface for process status
  - Adding processes at runtime:
    - supervisor_twiddler plugin extends RPC interface to make
      this possible.
    - SIGHUP kills all children, rereads config, launches all
      children again.
  - Consumer of broadcast events must be started by the
    supervisor.  Communication is done via specially formatted
    messages on stdin/out.

- Circus:
  - Python 2/3
  - Automatic restart/retry/flapping detection
  - 0mq interface supporting all commands.
  - Events broadcast via 0mq.
  - Track process cpu and memory utilization.

- Monit:
  - Monitor and restart processes.
  - Many custom checks for individual services.
  - Tracks far more than just 'process running' such as resource
    utilization, uptime, system stats.
  - Can only send event notification via email
  - Does not own processes so monitoring is done via custom
    checks and pidfiles.

- God:
  - Ruby
  - Must be run as root
  - Many communication channels for events, but none suitable for
    riftware

- Bluepill:
  - Ruby
  - Configuration is in ruby
  - No event broadcaster

- Runit:
  - Heavily inspired by daemontools
  - No event broadcaster

- S6:
  - Heavily inspired by daemontools
  - Uncommon (unpackaged in the big distros)
  - Provides C library for event notification


That list completes all of the serious looking attempts at
process supervision.  At this point, it looks like circus
provides the best solution for Riftware.  Having the full range
of commands available over 0mq along with event notification
should be enough to cover all use cases.  However, this does mean
that we need to investigate integrating zmq_poll with the
CFRunloop as 0mq sockets are not real sockets that can be
integrated directly.

If 0mq and the CFRunloop are too much trouble, Supervisor is a
good backup.


