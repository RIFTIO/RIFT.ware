#!/usr/bin/python

import os
import glob
import subprocess
import time
import shlex
import logging
import gi

import getopt, sys

import rwlogger

gi.require_version('RwVcsYang', '1.0')

from gi.repository import RwVcsYang

logger = logging.getLogger("rwlogd-report-cores")
rwlogger = rwlogger.RwLogger(subcategory="rw-vcs")
logger.addHandler(rwlogger)

def get_file_size_bytes(filepath):
    return os.stat(filepath).st_size

def wait_until_file_size_stops_incrementing(filepath, poll_period_secs, timeout_secs):
    start_time = time.time()
    last_bytes = 0
    while (time.time() - start_time) < timeout_secs:
        time.sleep(poll_period_secs)
        cur_bytes = get_file_size_bytes(filepath)
        if cur_bytes == last_bytes:
            return

        last_bytes = cur_bytes

    logger.warning("Timed out waiting for core file %s to finish writing", filepath)

def get_executable_from_file_cmd_output(file_cmd_output):
    if "python" in file_cmd_output:
        exe = "/usr/bin/python"
    elif "rwmain" in file_cmd_output:
        exe = os.path.join(os.environ["RIFT_INSTALL"], "usr/bin/rwmain")
    else:
        try:
            begin_exe_string = file_cmd_output.split("from '")[-1]
            begin_exe_string = begin_exe_string.split("'")[0]
            exe = shlex.split(begin_exe_string)[0]
        except IndexError:
            return None

    if not os.path.exists(exe):
        logger.warning("Could not find core file exe: %s", exe)
        return None

    return exe

def get_backtrace_from_core_file(core_filepath, exe):
    gdb_command = '/usr/bin/gdb {exe} --core {core} --batch --quiet -ex "thread apply all bt" -ex "thread apply all py-bt" -ex "quit"'.format(
            exe=exe,
            core=core_filepath)

    if os.path.isfile('/usr/bin/gdb'):
        try:
            print('calling GDB')
            return subprocess.check_output(shlex.split(gdb_command), stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError:
            logger.debug("GDB command failed: %s", gdb_command, exc_info=True)
            return ""
    else:
        logger.warning("GDB command not found: %s", gdb_command, exc_info=True)
        return ""

def get_file_command_output(filepath):
    try:
        whatzit = subprocess.check_output(["/usr/bin/file", filepath])
        whatzit = whatzit.split('{}:'.format(filepath), 1)
        whatzit = whatzit[-1].strip()
    except:
        whatzit = 'unknown file'

    return whatzit

def is_corefile(file_cmd_output):
    return "core file" in file_cmd_output

def usage():
    print("USAGE: rwlogd-report-cores -i instance-name")

def main():
    ldir = "/var/log/rift/vm-cores"

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hoi:v", ["help", "output=", "instance_name="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print (str(err)) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    output = None
    instance_name = ""
    verbose = False
    for o, a in opts:
        if o == "-v":
            verbose = True
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-o", "--output"):
            output = a
        elif o in ("-i", "--instance_name"):
            instance_name = a
        else:
            assert False, "unhandled option"
    # ...

    ev = RwVcsYang.CoreReporterStarting()
    ev.coredir = ldir
    rwlogger.log_event(ev)

    while True:
        ldir_cores = glob.glob(os.path.join(ldir, 'core.*'))
        curdir_cores = glob.glob(os.path.join(os.path.realpath('.'), 'core.*'))
        for f in ldir_cores + curdir_cores:
            try:
                # If the file is owned by root, let's ensure we can operate with it.
                stat = os.stat(f)
                if stat.st_uid == 0:
                    sudo_chmod_cmd = "/usr/bin/sudo --non-interactive /usr/bin/chmod 777 {}".format(f)
                    subprocess.check_call(shlex.split(sudo_chmod_cmd))

                reported = os.path.join(
                        os.path.dirname(f),
                        'reported-%s-%s' % (instance_name, os.path.basename(f),))

                if os.path.exists(reported):
                    continue

                # Make sure the core has finished writing, RIFT-5727
                time.sleep(1)
                wait_until_file_size_stops_incrementing(
                        filepath=f,
                        poll_period_secs=.5,
                        timeout_secs=300
                        )

                whenzit = time.ctime(os.stat(f).st_ctime)
                whatzit = get_file_command_output(f)

                backtrace = None
                if is_corefile(whatzit):
                    exe = get_executable_from_file_cmd_output(whatzit)
                    if exe is not None:
                        backtrace = get_backtrace_from_core_file(f, exe)

                os.rename(f, reported)

                logger.warning("Found file ({}): {} at {}".format(f, whatzit, whenzit))

                # Well this could be nicer...
                ev = RwVcsYang.CoreFound()
                ev.corefile = f
                ev.coredesc = whatzit
                ev.coretime = whenzit
                if backtrace is not None:
                    ev.backtrace = backtrace

                rwlogger.log_event(ev)

                with open(reported + '.txt', 'w') as fp:
                    fp.write('\ncore-file: ' + reported)
                    fp.write('\nwhen: ' + whenzit)
                    fp.write('\nwhat: ' + whatzit)
                    if backtrace is not None:
                        fp.write('\nbacktrace: ' + backtrace)

            except Exception as e:
                logging.error(str(e))

        time.sleep(5)


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    main()

# vim: et sw=4

