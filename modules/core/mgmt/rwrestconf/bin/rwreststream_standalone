#!/usr/bin/env python3

# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#
# Author(s): Max Beckett
# Creation Date: 7/10/2015
# 

import argparse
import asyncio
import signal
import sys
import logging

import tornado

from gi.repository import RwYang
from rift.restconf import WebSocketHandler
from rift.restconf import ClientRegistry
from rift.restconf import SubscriptionParser

def _load_schema(schema_name)
    yang_model = RwYang.Model.create_libncx()
    yang_model.load_schema_ypbc(RwYang.Model.load_and_get_schema(schema_name))

    return yang_model.get_root_node()

def main():
    
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--reststream-port",
        required=True,
        help="port number to listen on")
    parser.add_argument(
        "--schema",
        required=False,
        default="rw-reststream",
        help="Schema name which needs to be loaded"
        )

    arguments = parser.parse_args()

    asyncio_loop = asyncio.get_event_loop()

    schema_root = _load_schema(arguments.schema_name)

    
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    mq = asyncio.Queue()
    cr = ClientRegistry(logger, mq)
    sp = SubscriptionParser(logger, schema_root)

    handler_arguments = {
        "logger" : logger,
        "client_registry" : cr,
        "message_parser" : sp,
        "dts" : None,
    }
        
    tornado_loop = tornado.platform.asyncio.BaseAsyncIOLoop(asyncio_loop=asyncio_loop)
    tornado_loop.install()
    
    application = tornado.web.Application([
        (r"/ws", WebSocketHandler, handler_arguments),
    ], compress_response=True)
    
    application.listen(arguments.reststream_port)

    def signal_handler(signal, frame):
        asyncio_loop.call_soon(asyncio_loop.stop)   

    signal.signal(signal.SIGTERM, signal_handler)
    
    asyncio_loop.run_forever()
    
if __name__ == "__main__":
    main()
 
