#!/usr/bin/env python

"""
# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#

@file job_control
@author Austin Cormier (Austin.Cormier@riftio.com)
@date 2/6/15
@brief RIFT.ware harness job control utility
"""

import argparse
import os
import requests
import prettytable

JOB_LIST_URI = "testcase/REST/jobs"

JOB_STATUS_TYPES = ["Q", "S", "R", "C", "A"]


def server_to_url(server, uri=""):
    return "http://{server}/{uri}".format(server=server, uri=uri)


class JobDeleter(object):
    def __init__(self, server):
        self._server = server

    def delete_job_id(self, id):
        try:
            resp = requests.delete(server_to_url(self._server, JOB_LIST_URI + "/{}".format(id)))
            resp.raise_for_status()
        except requests.RequestException:
            if resp.status_code == 403:
                print("Error: Cannot delete job not in Queue.")


class JobLister(object):
    def __init__(self, server):
        self._server = server

        self._status = None
        self._username = None
        self._field_list = None

    def _print_job_table(self, jobs_list):
        if jobs_list == []:
            return

        fields = jobs_list[0].keys()
        field_list = fields
        if self._field_list:
            field_list = [field for field in self._field_list if field in fields]

        tbl = prettytable.PrettyTable(field_list)

        for job in jobs_list:
            values = [job[field] for field in field_list]
            tbl.add_row(values)

        print tbl

    def set_status_filter(self, status):
        if status is not None:
            assert status in JOB_STATUS_TYPES
            self._status = status
            if status != "C":
                try:
                    self._field_list.remove("result")
                except ValueError:
                    pass


    def set_username_filter(self, username):
        self._username = username

    def set_field_list(self, field_list):
        self._field_list = field_list

    def print_list(self):
        params = {}
        if self._status is not None:
            params["status"] = self._status
            # We don't need to take up space displaying the field if
            # the user only want to show jobs for a particular status.
            try:
                self._field_list.remove("status")
            except ValueError:
                pass

        if self._username is not None:
            params["username"] = self._username
            try:
                self._field_list.remove("submitted_by")
            except ValueError:
                pass

        url = server_to_url(self._server, uri=JOB_LIST_URI)
        resp = requests.get(url, params=params)
        resp.raise_for_status()

        job_listing = resp.json()

        self._print_job_table(job_listing)


def validate_testcase_server(server):
    """ Attempt to query the job list on the provided testcase server.
    If the request fails for any reason, then we raise a ArgumentParser
    error to let the user know they provided a invalid testcase server.
    """
    jobs_url = server_to_url(server, uri=JOB_LIST_URI)
    try:
        resp = requests.get(jobs_url)
        resp.raise_for_status()
    except requests.RequestException, e:
        raise argparse.ArgumentError("Failed to connect to known testcase URI: %s" % str(e))

    return server


def parse_args():
    parser = argparse.ArgumentParser(description="RIFT.ware job control utility" )
    parser.add_argument('--server',
                        help="<server>:<port> which is running the testcase server",
                        default="reservation.eng.riftio.com:80",
                        type=validate_testcase_server)

    subparsers = parser.add_subparsers(help="Various Job Control commands", dest="action")

    list_parser = subparsers.add_parser("list", help='List jobs on testcase server')
    list_parser.add_argument('--status',
                             help='List jobs with a particular status.',
                             choices=JOB_STATUS_TYPES)

    list_parser.add_argument('--user', '-u',
                             help='List jobs with a particular user. (any for no user filter)',
                             default=os.getenv("USER"))

    list_parser.add_argument('--fields',
                             help='Show only a subset of the fields returned',
                             default="id,status,submitted_by,priority,config_file,result")


    delete_parser = subparsers.add_parser("delete", help='Delete jobs on testcase server')

    delete_parser.add_argument('id',
                               type=int,
                               help="Delete job with a particular id")

    return parser.parse_args()


def main():
    args = parse_args()
    if args.action == "list":
        lister = JobLister(args.server)
        lister.set_field_list(args.fields.split(","))

        if "status" in vars(args):
            lister.set_status_filter(args.status)

        if args.user != "any":
            lister.set_username_filter(args.user)

        lister.print_list()

    elif args.action == "delete":
        deleter = JobDeleter(args.server)
        deleter.delete_job_id(args.id)


if __name__ == "__main__":
    main()
