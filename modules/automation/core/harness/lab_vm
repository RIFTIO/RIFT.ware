#!/usr/bin/env python3
"""
# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#

@file lab_vm
@author Paul Laidler (Paul.Laidler@riftio.com)
@date 2016-05-06
@brief Thin wrapper around prepare_openstack.py to spawn user VMs
"""
import argparse
import logging
import os
import subprocess
import sys
import uuid


RIFT_ROOT=os.environ.get('RIFT_ROOT')
USER=os.environ.get('USER')
DEFAULT_IMAGE = "{rift_root}/images/rift-ui-lab-latest.qcow2".format(rift_root=RIFT_ROOT)
DEFAULT_RACFG = "{rift_root}/.install/usr/rift/systemtest/pingpong_vnf/pingpong_records_systest_openstack.racfg".format(rift_root=RIFT_ROOT)

def parse_args(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser()
    parser.add_argument(
            '-l', '--cloud-type',
            help='Type of cloud controller [openstack]',
            action='store',
            default='openstack',
    )
    parser.add_argument(
            '-c', '--cloud-host',
            help='Address of cloud controller',
            action='store',
            default='10.66.4.102',
    )
    parser.add_argument( 
            '-u', '--user',
            help='cloud account user name',
            action='store',
            default=USER,
    )
    parser.add_argument(
            '-t', '--tenant',
            help='cloud account tenant name',
            action='store',
            default=USER,
    )
    parser.add_argument(
            '-i', '--image',
            help='Path to boot image',
            action='store',
            default=DEFAULT_IMAGE,
    )
    parser.add_argument(
            '-r', '--racfg',
            help='Create VM resources necessary to run the test associated with this racfg',
            action='store',
            default=DEFAULT_RACFG,
    )
    action_args = parser.add_mutually_exclusive_group(required=False)
    action_args.add_argument(
            '--clean',
            action='store_const',
            const='clean',
            dest='action',
            help='Destroy all VMs, and associated resources on this tenant',
    )
    action_args.add_argument(
            '--prepare',
            action='store_const',
            const='prepare',
            dest='action',
            help='Prepare VM resources',
    )
    parser.set_defaults(action='prepare')
    parser.add_argument(
            '-v', '--verbose',
            help='Enable debug logging',
            action='store_true',
    )
    return parser.parse_args(argv)

def main(args):

    if args.cloud_type == 'openstack' and args.action == 'prepare':
        script = "{rift_root}/.install/usr/rift/systemtest/harness/prepare_openstack.py".format(rift_root=RIFT_ROOT)
        cmd = [
            script,
            '--cloud-host', args.cloud_host,
            '--user', args.user,
            '--tenant', args.tenant,
            '--image', args.image,
            '--racfg', args.racfg,
        ]

        if args.verbose:
            cmd += ['--verbose']
        else:
            cmd += ['--quiet']

        os.environ['AUTO_TASK_ID'] = uuid.uuid4().hex[:10]
        subprocess.check_call(cmd)


    if args.cloud_type == 'openstack' and args.action == 'clean':
        script = "{rift_root}/.install/usr/rift/systemtest/harness/scrub_tenant.py".format(rift_root=RIFT_ROOT)
        cmd = [
            script,
            '--cloud-host', args.cloud_host,
            '--tenant', args.tenant,
            '--user', args.user,
            '--confirm'
        ]

        if args.verbose:
            cmd += ['--verbose']

        subprocess.check_call(cmd)


if __name__ == "__main__":
    logging.basicConfig(
            format='%(asctime)-15s|%(module)s|%(levelname)s|%(message)s',
            level=logging.INFO,
    )

    args = parse_args()

    logging_level = logging.DEBUG if args.verbose else logging.INFO
    logger = logging.getLogger()
    logger.setLevel(logging_level)

    main(args)
