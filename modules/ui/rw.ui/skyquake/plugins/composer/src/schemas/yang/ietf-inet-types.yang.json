{
 "synth": "source",
 "name": "ietf-inet-types",
 "description": "This module contains a collection of generally useful derived\nYANG data types for Internet addresses and related things.\n\nCopyright (c) 2013 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(http://trustee.ietf.org/license-info).\n\nThis version of this YANG module is part of RFC 6991; see\nthe RFC itself for full legal notices.",
 "schema": {
  "module": {
   "ietf-inet-types": {
    "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
    "prefix": "inet",
    "organization": "IETF NETMOD (NETCONF Data Modeling Language) Working Group",
    "contact": "WG Web:   <http://tools.ietf.org/wg/netmod/>\nWG List:  <mailto:netmod@ietf.org>\n\nWG Chair: David Kessens\n          <mailto:david.kessens@nsn.com>\n\nWG Chair: Juergen Schoenwaelder\n          <mailto:j.schoenwaelder@jacobs-university.de>\n\nEditor:   Juergen Schoenwaelder\n          <mailto:j.schoenwaelder@jacobs-university.de>",
    "description": "This module contains a collection of generally useful derived\nYANG data types for Internet addresses and related things.\n\nCopyright (c) 2013 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject\nto the license terms contained in, the Simplified BSD License\nset forth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(http://trustee.ietf.org/license-info).\n\nThis version of this YANG module is part of RFC 6991; see\nthe RFC itself for full legal notices.",
    "revision": {
     "2013-07-15": {
      "description": "This revision adds the following new data types:\n- ip-address-no-zone\n- ipv4-address-no-zone\n- ipv6-address-no-zone",
      "reference": "RFC 6991: Common YANG Data Types"
     },
     "2010-09-24": {
      "description": "Initial revision.",
      "reference": "RFC 6021: Common YANG Data Types"
     }
    },
    "typedef": {
     "ip-version": {
      "type": {
       "enumeration": {
        "enum": {
         "unknown": {
          "value": 0,
          "description": "An unknown or unspecified version of the Internet\nprotocol."
         },
         "ipv4": {
          "value": 1,
          "description": "The IPv4 protocol as defined in RFC 791."
         },
         "ipv6": {
          "value": 2,
          "description": "The IPv6 protocol as defined in RFC 2460."
         }
        }
       }
      },
      "description": "This value represents the version of the IP protocol.\n\nIn the value set and its semantics, this type is equivalent\nto the InetVersion textual convention of the SMIv2.",
      "reference": "RFC  791: Internet Protocol\nRFC 2460: Internet Protocol, Version 6 (IPv6) Specification\nRFC 4001: Textual Conventions for Internet Network Addresses"
     },
     "dscp": {
      "type": {
       "uint8": {
        "range": "0..63"
       }
      },
      "description": "The dscp type represents a Differentiated Services Code Point\nthat may be used for marking packets in a traffic stream.\nIn the value set and its semantics, this type is equivalent\nto the Dscp textual convention of the SMIv2.",
      "reference": "RFC 3289: Management Information Base for the Differentiated\n          Services Architecture\nRFC 2474: Definition of the Differentiated Services Field\n          (DS Field) in the IPv4 and IPv6 Headers\nRFC 2780: IANA Allocation Guidelines For Values In\n          the Internet Protocol and Related Headers"
     },
     "ipv6-flow-label": {
      "type": {
       "uint32": {
        "range": "0..1048575"
       }
      },
      "description": "The ipv6-flow-label type represents the flow identifier or Flow\nLabel in an IPv6 packet header that may be used to\ndiscriminate traffic flows.\n\nIn the value set and its semantics, this type is equivalent\nto the IPv6FlowLabel textual convention of the SMIv2.",
      "reference": "RFC 3595: Textual Conventions for IPv6 Flow Label\nRFC 2460: Internet Protocol, Version 6 (IPv6) Specification"
     },
     "port-number": {
      "type": {
       "uint16": {
        "range": "0..65535"
       }
      },
      "description": "The port-number type represents a 16-bit port number of an\nInternet transport-layer protocol such as UDP, TCP, DCCP, or\nSCTP.  Port numbers are assigned by IANA.  A current list of\nall assignments is available from <http://www.iana.org/>.\n\nNote that the port number value zero is reserved by IANA.  In\nsituations where the value zero does not make sense, it can\nbe excluded by subtyping the port-number type.\nIn the value set and its semantics, this type is equivalent\nto the InetPortNumber textual convention of the SMIv2.",
      "reference": "RFC  768: User Datagram Protocol\nRFC  793: Transmission Control Protocol\nRFC 4960: Stream Control Transmission Protocol\nRFC 4340: Datagram Congestion Control Protocol (DCCP)\nRFC 4001: Textual Conventions for Internet Network Addresses"
     },
     "as-number": {
      "type": "uint32",
      "description": "The as-number type represents autonomous system numbers\nwhich identify an Autonomous System (AS).  An AS is a set\nof routers under a single technical administration, using\nan interior gateway protocol and common metrics to route\npackets within the AS, and using an exterior gateway\nprotocol to route packets to other ASes.  IANA maintains\nthe AS number space and has delegated large parts to the\nregional registries.\n\nAutonomous system numbers were originally limited to 16\nbits.  BGP extensions have enlarged the autonomous system\nnumber space to 32 bits.  This type therefore uses an uint32\nbase type without a range restriction in order to support\na larger autonomous system number space.\n\nIn the value set and its semantics, this type is equivalent\nto the InetAutonomousSystemNumber textual convention of\nthe SMIv2.",
      "reference": "RFC 1930: Guidelines for creation, selection, and registration\n          of an Autonomous System (AS)\nRFC 4271: A Border Gateway Protocol 4 (BGP-4)\nRFC 4001: Textual Conventions for Internet Network Addresses\nRFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n          Number Space"
     },
     "ip-address": {
      "type": {
       "union": {
        "type": {
         "inet:ipv4-address": null,
         "inet:ipv6-address": null
        }
       }
      },
      "description": "The ip-address type represents an IP address and is IP\nversion neutral.  The format of the textual representation\nimplies the IP version.  This type supports scoped addresses\nby allowing zone identifiers in the address format.",
      "reference": "RFC 4007: IPv6 Scoped Address Architecture"
     },
     "ipv4-address": {
      "type": {
       "string": {
        "pattern": "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
       }
      },
      "description": "The ipv4-address type represents an IPv4 address in\ndotted-quad notation.  The IPv4 address may include a zone\nindex, separated by a % sign.\n\nThe zone index is used to disambiguate identical address\nvalues.  For link-local addresses, the zone index will\ntypically be the interface index number or the name of an\ninterface.  If the zone index is not present, the default\nzone of the device will be used.\n\nThe canonical format for the zone index is the numerical\nformat"
     },
     "ipv6-address": {
      "type": {
       "string": {
        "pattern": {
         "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?": null,
         "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?": null
        }
       }
      },
      "description": "The ipv6-address type represents an IPv6 address in full,\nmixed, shortened, and shortened-mixed notation.  The IPv6\naddress may include a zone index, separated by a % sign.\n\nThe zone index is used to disambiguate identical address\nvalues.  For link-local addresses, the zone index will\ntypically be the interface index number or the name of an\ninterface.  If the zone index is not present, the default\nzone of the device will be used.\n\nThe canonical format of IPv6 addresses uses the textual\nrepresentation defined in Section 4 of RFC 5952.  The\ncanonical format for the zone index is the numerical\nformat as described in Section 11.2 of RFC 4007.",
      "reference": "RFC 4291: IP Version 6 Addressing Architecture\nRFC 4007: IPv6 Scoped Address Architecture\nRFC 5952: A Recommendation for IPv6 Address Text\n          Representation"
     },
     "ip-address-no-zone": {
      "type": {
       "union": {
        "type": {
         "inet:ipv4-address-no-zone": null,
         "inet:ipv6-address-no-zone": null
        }
       }
      },
      "description": "The ip-address-no-zone type represents an IP address and is\nIP version neutral.  The format of the textual representation\nimplies the IP version.  This type does not support scoped\naddresses since it does not allow zone identifiers in the\naddress format.",
      "reference": "RFC 4007: IPv6 Scoped Address Architecture"
     },
     "ipv4-address-no-zone": {
      "type": {
       "inet:ipv4-address": {
        "pattern": "[0-9\\.]*"
       }
      },
      "description": "An IPv4 address without a zone index.  This type, derived from\nipv4-address, may be used in situations where the zone is\nknown from the context and hence no zone index is needed."
     },
     "ipv6-address-no-zone": {
      "type": {
       "inet:ipv6-address": {
        "pattern": "[0-9a-fA-F:\\.]*"
       }
      },
      "description": "An IPv6 address without a zone index.  This type, derived from\nipv6-address, may be used in situations where the zone is\nknown from the context and hence no zone index is needed.",
      "reference": "RFC 4291: IP Version 6 Addressing Architecture\nRFC 4007: IPv6 Scoped Address Architecture\nRFC 5952: A Recommendation for IPv6 Address Text\n          Representation"
     },
     "ip-prefix": {
      "type": {
       "union": {
        "type": {
         "inet:ipv4-prefix": null,
         "inet:ipv6-prefix": null
        }
       }
      },
      "description": "The ip-prefix type represents an IP prefix and is IP\nversion neutral.  The format of the textual representations\nimplies the IP version."
     },
     "ipv4-prefix": {
      "type": {
       "string": {
        "pattern": "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
       }
      },
      "description": "The ipv4-prefix type represents an IPv4 address prefix.\nThe prefix length is given by the number following the\nslash character and must be less than or equal to 32.\n\nA prefix length value of n corresponds to an IP address\nmask that has n contiguous 1-bits from the most\nsignificant bit (MSB) and all other bits set to 0.\n\nThe canonical format of an IPv4 prefix has all bits of\nthe IPv4 address set to zero that are not part of the\nIPv4 prefix."
     },
     "ipv6-prefix": {
      "type": {
       "string": {
        "pattern": {
         "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))": null,
         "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)": null
        }
       }
      },
      "description": "The ipv6-prefix type represents an IPv6 address prefix.\nThe prefix length is given by the number following the\nslash character and must be less than or equal to 128.\n\nA prefix length value of n corresponds to an IP address\nmask that has n contiguous 1-bits from the most\nsignificant bit (MSB) and all other bits set to 0.\n\nThe IPv6 address should have all bits that do not belong\nto the prefix set to zero.\n\nThe canonical format of an IPv6 prefix has all bits of\nthe IPv6 address set to zero that are not part of the\nIPv6 prefix.  Furthermore, the IPv6 address is represented\nas defined in Section 4 of RFC 5952.",
      "reference": "RFC 5952: A Recommendation for IPv6 Address Text\n          Representation"
     },
     "domain-name": {
      "type": {
       "string": {
        "length": "1..253",
        "pattern": "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
       }
      },
      "description": "The domain-name type represents a DNS domain name.  The\nname SHOULD be fully qualified whenever possible.\n\nInternet domain names are only loosely specified.  Section\n3.5 of RFC 1034 recommends a syntax (modified in Section\n2.1 of RFC 1123).  The pattern above is intended to allow\nfor current practice in domain name use, and some possible\nfuture expansion.  It is designed to hold various types of\ndomain names, including names used for A or AAAA records\n(host names) and other records, such as SRV records.  Note\nthat Internet host names have a stricter syntax (described\nin RFC 952) than the DNS recommendations in RFCs 1034 and\n1123, and that systems that want to store host names in\nschema nodes using the domain-name type are recommended to\nadhere to this stricter standard to ensure interoperability.\n\nThe encoding of DNS names in the DNS protocol is limited\nto 255 characters.  Since the encoding consists of labels\nprefixed by a length bytes and there is a trailing NULL\nbyte, only 253 characters can appear in the textual dotted\nnotation.\n\nThe description clause of schema nodes using the domain-name\ntype MUST describe when and how these names are resolved to\nIP addresses.  Note that the resolution of a domain-name value\nmay require to query multiple DNS records (e.g., A for IPv4\nand AAAA for IPv6).  The order of the resolution process and\nwhich DNS record takes precedence can either be defined\nexplicitly or may depend on the configuration of the\nresolver.\n\nDomain-name values use the US-ASCII encoding.  Their canonical\nformat uses lowercase US-ASCII characters.  Internationalized\ndomain names MUST be A-labels as per RFC 5890.",
      "reference": "RFC  952: DoD Internet Host Table Specification\nRFC 1034: Domain Names - Concepts and Facilities\nRFC 1123: Requirements for Internet Hosts -- Application\n          and Support\nRFC 2782: A DNS RR for specifying the location of services\n          (DNS SRV)\nRFC 5890: Internationalized Domain Names in Applications\n          (IDNA): Definitions and Document Framework"
     },
     "host": {
      "type": {
       "union": {
        "type": {
         "inet:ip-address": null,
         "inet:domain-name": null
        }
       }
      },
      "description": "The host type represents either an IP address or a DNS\ndomain name."
     },
     "uri": {
      "type": "string",
      "description": "The uri type represents a Uniform Resource Identifier\n(URI) as defined by STD 66.\n\nObjects using the uri type MUST be in US-ASCII encoding,\nand MUST be normalized as described by RFC 3986 Sections\n6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\npercent-encoding is removed, and all case-insensitive\ncharacters are set to lowercase except for hexadecimal\ndigits, which are normalized to uppercase as described in\nSection 6.2.2.1.\n\nThe purpose of this normalization is to help provide\nunique URIs.  Note that this normalization is not\nsufficient to provide uniqueness.  Two URIs that are\ntextually distinct after this normalization may still be\nequivalent.\n\nObjects using the uri type may restrict the schemes that\nthey permit.  For example, 'data:' and 'urn:' schemes\nmight not be appropriate.\n\nA zero-length URI is not a valid URI.  This can be used to\nexpress 'URI absent' where required.\n\nIn the value set and its semantics, this type is equivalent\nto the Uri SMIv2 textual convention defined in RFC 5017.",
      "reference": "RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\nRFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n          Group: Uniform Resource Identifiers (URIs), URLs,\n          and Uniform Resource Names (URNs): Clarifications\n          and Recommendations\nRFC 5017: MIB Textual Conventions for Uniform Resource\n          Identifiers (URIs)"
     }
    }
   }
  }
 },
 "extension": {
  "module": {
   "argument": "name",
   "include": "0..n",
   "prefix": "0..1",
   "anyxml": "0..n",
   "augment": "0..n",
   "choice": "0..n",
   "contact": "0..1",
   "container": "0..n",
   "description": "0..1",
   "deviation": "0..n",
   "extension": "0..n",
   "feature": "0..n",
   "grouping": "0..n",
   "identity": "0..n",
   "import": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "namespace": "0..1",
   "notification": "0..n",
   "organization": "0..1",
   "reference": "0..1",
   "revision": "0..n",
   "rpc": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "yang-version": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var changes, match, ref, synth, target;\n  synth = this.require('data-synth');\n  ref = params.augment;\n  for (target in ref) {\n    changes = ref[target];\n    match = this.locate(ctx, target);\n    if (match == null) {\n      continue;\n    }\n    synth.copy(match, changes);\n  }\n  return delete this.source[params.prefix];\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var k, m, modules, ref, synth, v;\n  synth = this.require('data-synth');\n  modules = {};\n  ref = params[\"import\"];\n  for (k in ref) {\n    v = ref[k];\n    modules[k] = children[k];\n    delete children[k];\n  }\n  m = (synth.Store(params, function() {\n    return this.set({\n      name: arg,\n      modules: modules\n    });\n  })).bind(children);\n  this.define('module', arg, m);\n  return m;\n}"
   }
  },
  "prefix": {
   "argument": "value",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return this.source[arg] = this.source;\n}"
   }
  },
  "include": {
   "argument": "module",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var k, m, ref, ref1, ref2, results, v;\n  m = this.preprocess(this.resolve('dependencies', arg));\n  ref = m.extension;\n  for (k in ref) {\n    v = ref[k];\n    this.define('extension', k, v);\n  }\n  ref1 = m.typedef;\n  for (k in ref1) {\n    v = ref1[k];\n    this.define('typedef', k, v);\n  }\n  ref2 = m.schema;\n  results = [];\n  for (k in ref2) {\n    v = ref2[k];\n    results.push(ctx[k] = v);\n  }\n  return results;\n}"
   },
   "revision-date": "0..1"
  },
  "augment": {
   "anyxml": "0..n",
   "case": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "uses": "0..n",
   "when": "0..1",
   "argument": "target-node"
  },
  "belongs-to": {
   "prefix": 1,
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return this.source[params.prefix] = this.source;\n}"
   },
   "argument": "module"
  },
  "bit": {
   "description": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "position": "0..1",
   "argument": "name"
  },
  "case": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "uses": "0..n",
   "when": "0..1",
   "argument": "name"
  },
  "choice": {
   "anyxml": "0..n",
   "case": "0..n",
   "config": "0..1",
   "container": "0..n",
   "default": "0..1",
   "description": "0..1",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "mandatory": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "when": "0..1",
   "argument": "condition"
  },
  "config": {
   "preprocess": {
    "!js/function": "function (arg, p, ctx) {\n  return ctx.config = arg === true || arg === 'true';\n}"
   },
   "argument": "value"
  },
  "container": {
   "anyxml": "0..n",
   "choice": "0..n",
   "config": "0..1",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "must": "0..n",
   "presence": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "uses": "0..n",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return (synth.Object(params)).bind(children);\n}"
   },
   "argument": "name"
  },
  "deviate": {
   "config": "0..1",
   "default": "0..1",
   "mandatory": "0..1",
   "max-elements": "0..1",
   "min-elements": "0..1",
   "must": "0..n",
   "type": "0..1",
   "unique": "0..1",
   "units": "0..1",
   "argument": "value"
  },
  "deviation": {
   "description": "0..1",
   "deviate": "1..n",
   "reference": "0..1",
   "argument": "target-node"
  },
  "enum": {
   "description": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "value": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if (params.value == null) {\n    if (this.enumValue == null) {\n      this.enumValue = 0;\n    }\n    params.value = this.enumValue++;\n  } else {\n    params.value = Number(params.value);\n    this.enumValue = params.value + 1;\n  }\n  return ctx[\"enum\"][arg] = params;\n}"
   },
   "argument": "name"
  },
  "feature": {
   "description": "0..1",
   "if-feature": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if (params.status === 'unavailable') {\n    console.warn(\"feature \" + arg + \" is unavailable\");\n    if (typeof ctx.feature === 'object') {\n      return delete ctx.feature[arg];\n    } else {\n      return delete ctx.feature;\n    }\n  }\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var feature;\n  feature = this.resolve('feature', arg);\n  return null;\n}"
   },
   "argument": "name"
  },
  "grouping": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "uses": "0..n",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('grouping', arg, params);\n}"
   },
   "argument": "name"
  },
  "identity": {
   "base": "0..1",
   "description": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('identity', arg, params);\n}"
   },
   "argument": "name"
  },
  "if-feature": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if ((this.resolve('feature', arg)) == null) {\n    return ctx.status = 'unavailable';\n  }\n}"
   },
   "argument": "name"
  },
  "import": {
   "prefix": 1,
   "revision-date": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var copy, k, m, original, ref, ref1, rev, schema, source, synth, v;\n  synth = this.require('data-synth');\n  schema = this.resolve('dependencies', arg, false);\n  if (schema == null) {\n    console.warn(\"no explicit dependency for \" + arg + \" defined, searching local filesystem\");\n    schema = this.parse(\"!yang \" + arg + \".yang\", this.source);\n    if (schema != null) {\n      this.define('dependencies', arg, schema);\n      source = this.source.parent;\n      while ((source.parent != null) && source.parent.name !== 'yangforge') {\n        source = source.parent;\n      }\n      if (source.dependencies == null) {\n        source.dependencies = {};\n      }\n      source.dependencies[arg] = schema;\n    }\n  }\n  m = this.preprocess(schema);\n  if (m == null) {\n    throw this.error(\"unable to resolve '\" + arg + \"' in dependencies\", 'import');\n  }\n  rev = params['revision-date'];\n  if ((rev != null) && !(rev in m.revision)) {\n    throw this.error(\"requested \" + rev + \" not available in \" + arg, 'import');\n  }\n  ref = m.extension;\n  for (k in ref) {\n    v = ref[k];\n    if (!(v.override === true)) {\n      continue;\n    }\n    original = this.resolve('extension', k);\n    copy = synth.copy({}, v);\n    copy.origin = synth.copy({}, (ref1 = original.origin) != null ? ref1 : original);\n    delete copy.override;\n    this.define('extension', k, copy);\n  }\n  return this.source[params.prefix] = m;\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children, ctx) {\n  return this.compile(this.source[params.prefix], this.source);\n}"
   },
   "argument": "module"
  },
  "input": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "grouping": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return (synth.Object(params)).bind(children);\n}"
   }
  },
  "leaf": {
   "config": "0..1",
   "default": "0..1",
   "description": "0..1",
   "if-feature": "0..n",
   "mandatory": "0..1",
   "must": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "type": "0..1",
   "units": "0..1",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return synth.Property(params, function() {\n    if (children.type != null) {\n      return this.set({\n        type: children.type\n      });\n    }\n  });\n}"
   },
   "argument": "name"
  },
  "leaf-list": {
   "config": "0..1",
   "description": "0..1",
   "if-feature": "0..n",
   "max-elements": "0..1",
   "min-elements": "0..1",
   "must": "0..n",
   "ordered-by": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "type": "0..1",
   "units": "0..1",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return synth.List(params, function() {\n    if (children.type != null) {\n      return this.set({\n        type: children.type\n      });\n    }\n  });\n}"
   },
   "argument": "name"
  },
  "list": {
   "anyxml": "0..n",
   "choice": "0..n",
   "config": "0..1",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "key": "0..1",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "max-elements": "0..1",
   "min-elements": "0..1",
   "must": "0..n",
   "ordered-by": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "unique": "0..1",
   "uses": "0..n",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var item, synth;\n  synth = this.require('data-synth');\n  item = (synth.Object(null)).bind(children);\n  return (synth.List(params)).set({\n    type: item\n  });\n}"
   },
   "argument": "name"
  },
  "mandatory": {
   "preprocess": {
    "!js/function": "function (arg, p, ctx) {\n  return ctx.mandatory = arg === true || arg === 'true';\n}"
   },
   "argument": "value"
  },
  "max-elements": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if (arg !== 'unbounded') {\n    return ctx['max-elements'] = Number(arg);\n  }\n}"
   },
   "argument": "value"
  },
  "min-elements": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx['min-elements'] = Number(arg);\n}"
   },
   "argument": "value"
  },
  "must": {
   "description": "0..1",
   "error-app-tag": "0..1",
   "error-message": "0..1",
   "reference": "0..1",
   "argument": "condition"
  },
  "notification": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "uses": "0..n",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('notification', arg, params);\n}"
   },
   "argument": "event"
  },
  "output": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "grouping": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return (synth.Object(params)).bind(children);\n}"
   }
  },
  "path": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx.path = arg.replace(/[_]/g, '.');\n}"
   },
   "argument": "value"
  },
  "pattern": {
   "construct": {
    "!js/function": "function (arg, params, children, ctx) {\n  if (ctx.patterns == null) {\n    ctx.patterns = [];\n  }\n  return ctx.patterns.push(new RegExp(arg));\n}"
   },
   "argument": "value"
  },
  "refine": {
   "default": "0..1",
   "description": "0..1",
   "reference": "0..1",
   "config": "0..1",
   "mandatory": "0..1",
   "presence": "0..1",
   "must": "0..n",
   "min-elements": "0..1",
   "max-elements": "0..1",
   "units": "0..1",
   "argument": "target-node"
  },
  "require-instance": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx['require-instance'] = arg === true || arg === 'true';\n}"
   },
   "argument": "value"
  },
  "revision": {
   "description": "0..1",
   "reference": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return this.define('revision', arg, params);\n}"
   },
   "argument": "date"
  },
  "rpc": {
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "input": "0..1",
   "output": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var func, method, ref, ref1, request, response, synth;\n  synth = this.require('data-synth');\n  func = this.resolve('rpc', arg, false);\n  if (func == null) {\n    func = function(input, output, done) {\n      return done(\"No control logic found for '\" + arg + \"' rpc operation\");\n    };\n  }\n  request = (ref = children.input) != null ? ref : synth.Meta;\n  response = (ref1 = children.output) != null ? ref1 : synth.Meta;\n  method = function(data, resolve, reject) {\n    var e, error, input, output;\n    if (typeof console.debug === \"function\") {\n      console.debug(\"executing rpc \" + arg + \"...\");\n    }\n    try {\n      input = new request(data, this);\n      output = new response(null, this);\n    } catch (error) {\n      e = error;\n      return reject(e);\n    }\n    return func.call(this, input, output, function(e) {\n      if (e == null) {\n        return resolve(output);\n      } else {\n        return reject(e);\n      }\n    });\n  };\n  method.params = params;\n  method.input = request;\n  method.output = response;\n  return method;\n}"
   },
   "argument": "name"
  },
  "submodule": {
   "argument": "name",
   "anyxml": "0..n",
   "augment": "0..n",
   "belongs-to": "0..1",
   "choice": "0..n",
   "contact": "0..1",
   "container": "0..n",
   "description": "0..1",
   "deviation": "0..n",
   "extension": "0..n",
   "feature": "0..n",
   "grouping": "0..n",
   "identity": "0..n",
   "import": "0..n",
   "include": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "notification": "0..n",
   "organization": "0..1",
   "reference": "0..1",
   "revision": "0..n",
   "rpc": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "yang-version": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var k, v;\n  for (k in params) {\n    v = params[k];\n    ctx[k] = v;\n  }\n  return delete ctx.submodule;\n}"
   }
  },
  "status": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx.status != null ? ctx.status : ctx.status = arg;\n}"
   },
   "argument": "value"
  },
  "type": {
   "base": "0..1",
   "bit": "0..n",
   "enum": "0..n",
   "fraction-digits": "0..1",
   "length": "0..1",
   "path": "0..1",
   "pattern": "0..n",
   "range": "0..1",
   "require-instance": "0..1",
   "type": "0..n",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return delete this.enumValue;\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children, ctx) {\n  var key, mparams, ref, ref1, synth, typedef, value;\n  synth = this.require('data-synth');\n  typedef = this.resolve('typedef', arg);\n  if (typedef == null) {\n    throw this.error(\"unable to resolve typedef for \" + arg);\n  }\n  switch (false) {\n    case typedef.construct == null:\n      ctx.type = typedef.construct(params, this, arguments.callee);\n      break;\n    case typeof typedef.type !== 'object':\n      ref = typedef.type;\n      for (key in ref) {\n        value = ref[key];\n        mparams = synth.copy({}, value);\n        synth.copy(mparams, params);\n        arguments.callee.call(this, key, mparams, children, ctx);\n      }\n      break;\n    case typeof typedef.type !== 'string':\n      arguments.callee.call(this, typedef.type, params, children, ctx);\n  }\n  if ((ref1 = ctx.type) != null) {\n    ref1.toString = function() {\n      return arg;\n    };\n  }\n  return null;\n}"
   },
   "argument": "name"
  },
  "typedef": {
   "default": "0..1",
   "description": "0..1",
   "units": "0..1",
   "type": "0..1",
   "reference": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('typedef', arg, params);\n}"
   },
   "argument": "name"
  },
  "uses": {
   "augment": "0..n",
   "description": "0..1",
   "if-feature": "0..n",
   "refine": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "when": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var changes, grouping, k, match, ref, ref1, synth, target, v;\n  synth = this.require('data-synth');\n  grouping = synth.copy({}, this.resolve('grouping', arg));\n  delete grouping.description;\n  delete grouping.reference;\n  synth.copy(ctx, grouping);\n  ref = params.refine;\n  for (target in ref) {\n    changes = ref[target];\n    match = this.locate(ctx, target);\n    if (match == null) {\n      continue;\n    }\n    for (k in changes) {\n      v = changes[k];\n      match[k] = v;\n    }\n  }\n  ref1 = params.augment;\n  for (target in ref1) {\n    changes = ref1[target];\n    match = this.locate(ctx, target);\n    if (match == null) {\n      continue;\n    }\n    synth.copy(match, changes);\n  }\n  if (typeof ctx.uses === 'object') {\n    return delete ctx.uses[arg];\n  } else {\n    return delete ctx.uses;\n  }\n}"
   },
   "argument": "name"
  },
  "when": {
   "description": "0..1",
   "reference": "0..1",
   "argument": "condition"
  },
  "anyxml": {},
  "base": {
   "argument": "name"
  },
  "contact": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "default": {
   "argument": "value"
  },
  "description": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "error-app-tag": {
   "argument": "value"
  },
  "error-message": {
   "argument": {
    "value": {
     "yin-element": "true"
    }
   }
  },
  "fraction-digits": {
   "argument": "value"
  },
  "key": {
   "argument": "value"
  },
  "length": {
   "argument": "value"
  },
  "namespace": {
   "argument": "uri"
  },
  "ordered-by": {
   "argument": "value"
  },
  "organization": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "position": {
   "argument": "value"
  },
  "presence": {
   "argument": "value"
  },
  "range": {
   "argument": "value"
  },
  "reference": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "revision-date": {
   "argument": "date"
  },
  "unique": {
   "argument": "tag"
  },
  "units": {
   "argument": "value"
  },
  "value": {
   "argument": "value"
  },
  "yang-version": {
   "argument": "value"
  },
  "yin-element": {
   "argument": "value"
  }
 },
 "typedef": {
  "ip-version": {
   "type": {
    "enumeration": {
     "enum": {
      "unknown": {
       "value": 0,
       "description": "An unknown or unspecified version of the Internet\nprotocol."
      },
      "ipv4": {
       "value": 1,
       "description": "The IPv4 protocol as defined in RFC 791."
      },
      "ipv6": {
       "value": 2,
       "description": "The IPv6 protocol as defined in RFC 2460."
      }
     }
    }
   },
   "description": "This value represents the version of the IP protocol.\n\nIn the value set and its semantics, this type is equivalent\nto the InetVersion textual convention of the SMIv2.",
   "reference": "RFC  791: Internet Protocol\nRFC 2460: Internet Protocol, Version 6 (IPv6) Specification\nRFC 4001: Textual Conventions for Internet Network Addresses"
  },
  "dscp": {
   "type": {
    "uint8": {
     "range": "0..63"
    }
   },
   "description": "The dscp type represents a Differentiated Services Code Point\nthat may be used for marking packets in a traffic stream.\nIn the value set and its semantics, this type is equivalent\nto the Dscp textual convention of the SMIv2.",
   "reference": "RFC 3289: Management Information Base for the Differentiated\n          Services Architecture\nRFC 2474: Definition of the Differentiated Services Field\n          (DS Field) in the IPv4 and IPv6 Headers\nRFC 2780: IANA Allocation Guidelines For Values In\n          the Internet Protocol and Related Headers"
  },
  "ipv6-flow-label": {
   "type": {
    "uint32": {
     "range": "0..1048575"
    }
   },
   "description": "The ipv6-flow-label type represents the flow identifier or Flow\nLabel in an IPv6 packet header that may be used to\ndiscriminate traffic flows.\n\nIn the value set and its semantics, this type is equivalent\nto the IPv6FlowLabel textual convention of the SMIv2.",
   "reference": "RFC 3595: Textual Conventions for IPv6 Flow Label\nRFC 2460: Internet Protocol, Version 6 (IPv6) Specification"
  },
  "port-number": {
   "type": {
    "uint16": {
     "range": "0..65535"
    }
   },
   "description": "The port-number type represents a 16-bit port number of an\nInternet transport-layer protocol such as UDP, TCP, DCCP, or\nSCTP.  Port numbers are assigned by IANA.  A current list of\nall assignments is available from <http://www.iana.org/>.\n\nNote that the port number value zero is reserved by IANA.  In\nsituations where the value zero does not make sense, it can\nbe excluded by subtyping the port-number type.\nIn the value set and its semantics, this type is equivalent\nto the InetPortNumber textual convention of the SMIv2.",
   "reference": "RFC  768: User Datagram Protocol\nRFC  793: Transmission Control Protocol\nRFC 4960: Stream Control Transmission Protocol\nRFC 4340: Datagram Congestion Control Protocol (DCCP)\nRFC 4001: Textual Conventions for Internet Network Addresses"
  },
  "as-number": {
   "type": "uint32",
   "description": "The as-number type represents autonomous system numbers\nwhich identify an Autonomous System (AS).  An AS is a set\nof routers under a single technical administration, using\nan interior gateway protocol and common metrics to route\npackets within the AS, and using an exterior gateway\nprotocol to route packets to other ASes.  IANA maintains\nthe AS number space and has delegated large parts to the\nregional registries.\n\nAutonomous system numbers were originally limited to 16\nbits.  BGP extensions have enlarged the autonomous system\nnumber space to 32 bits.  This type therefore uses an uint32\nbase type without a range restriction in order to support\na larger autonomous system number space.\n\nIn the value set and its semantics, this type is equivalent\nto the InetAutonomousSystemNumber textual convention of\nthe SMIv2.",
   "reference": "RFC 1930: Guidelines for creation, selection, and registration\n          of an Autonomous System (AS)\nRFC 4271: A Border Gateway Protocol 4 (BGP-4)\nRFC 4001: Textual Conventions for Internet Network Addresses\nRFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n          Number Space"
  },
  "ip-address": {
   "type": {
    "union": {
     "type": {
      "inet:ipv4-address": null,
      "inet:ipv6-address": null
     }
    }
   },
   "description": "The ip-address type represents an IP address and is IP\nversion neutral.  The format of the textual representation\nimplies the IP version.  This type supports scoped addresses\nby allowing zone identifiers in the address format.",
   "reference": "RFC 4007: IPv6 Scoped Address Architecture"
  },
  "ipv4-address": {
   "type": {
    "string": {
     "pattern": "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
    }
   },
   "description": "The ipv4-address type represents an IPv4 address in\ndotted-quad notation.  The IPv4 address may include a zone\nindex, separated by a % sign.\n\nThe zone index is used to disambiguate identical address\nvalues.  For link-local addresses, the zone index will\ntypically be the interface index number or the name of an\ninterface.  If the zone index is not present, the default\nzone of the device will be used.\n\nThe canonical format for the zone index is the numerical\nformat"
  },
  "ipv6-address": {
   "type": {
    "string": {
     "pattern": {
      "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?": null,
      "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?": null
     }
    }
   },
   "description": "The ipv6-address type represents an IPv6 address in full,\nmixed, shortened, and shortened-mixed notation.  The IPv6\naddress may include a zone index, separated by a % sign.\n\nThe zone index is used to disambiguate identical address\nvalues.  For link-local addresses, the zone index will\ntypically be the interface index number or the name of an\ninterface.  If the zone index is not present, the default\nzone of the device will be used.\n\nThe canonical format of IPv6 addresses uses the textual\nrepresentation defined in Section 4 of RFC 5952.  The\ncanonical format for the zone index is the numerical\nformat as described in Section 11.2 of RFC 4007.",
   "reference": "RFC 4291: IP Version 6 Addressing Architecture\nRFC 4007: IPv6 Scoped Address Architecture\nRFC 5952: A Recommendation for IPv6 Address Text\n          Representation"
  },
  "ip-address-no-zone": {
   "type": {
    "union": {
     "type": {
      "inet:ipv4-address-no-zone": null,
      "inet:ipv6-address-no-zone": null
     }
    }
   },
   "description": "The ip-address-no-zone type represents an IP address and is\nIP version neutral.  The format of the textual representation\nimplies the IP version.  This type does not support scoped\naddresses since it does not allow zone identifiers in the\naddress format.",
   "reference": "RFC 4007: IPv6 Scoped Address Architecture"
  },
  "ipv4-address-no-zone": {
   "type": {
    "inet:ipv4-address": {
     "pattern": "[0-9\\.]*"
    }
   },
   "description": "An IPv4 address without a zone index.  This type, derived from\nipv4-address, may be used in situations where the zone is\nknown from the context and hence no zone index is needed."
  },
  "ipv6-address-no-zone": {
   "type": {
    "inet:ipv6-address": {
     "pattern": "[0-9a-fA-F:\\.]*"
    }
   },
   "description": "An IPv6 address without a zone index.  This type, derived from\nipv6-address, may be used in situations where the zone is\nknown from the context and hence no zone index is needed.",
   "reference": "RFC 4291: IP Version 6 Addressing Architecture\nRFC 4007: IPv6 Scoped Address Architecture\nRFC 5952: A Recommendation for IPv6 Address Text\n          Representation"
  },
  "ip-prefix": {
   "type": {
    "union": {
     "type": {
      "inet:ipv4-prefix": null,
      "inet:ipv6-prefix": null
     }
    }
   },
   "description": "The ip-prefix type represents an IP prefix and is IP\nversion neutral.  The format of the textual representations\nimplies the IP version."
  },
  "ipv4-prefix": {
   "type": {
    "string": {
     "pattern": "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
    }
   },
   "description": "The ipv4-prefix type represents an IPv4 address prefix.\nThe prefix length is given by the number following the\nslash character and must be less than or equal to 32.\n\nA prefix length value of n corresponds to an IP address\nmask that has n contiguous 1-bits from the most\nsignificant bit (MSB) and all other bits set to 0.\n\nThe canonical format of an IPv4 prefix has all bits of\nthe IPv4 address set to zero that are not part of the\nIPv4 prefix."
  },
  "ipv6-prefix": {
   "type": {
    "string": {
     "pattern": {
      "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))": null,
      "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)": null
     }
    }
   },
   "description": "The ipv6-prefix type represents an IPv6 address prefix.\nThe prefix length is given by the number following the\nslash character and must be less than or equal to 128.\n\nA prefix length value of n corresponds to an IP address\nmask that has n contiguous 1-bits from the most\nsignificant bit (MSB) and all other bits set to 0.\n\nThe IPv6 address should have all bits that do not belong\nto the prefix set to zero.\n\nThe canonical format of an IPv6 prefix has all bits of\nthe IPv6 address set to zero that are not part of the\nIPv6 prefix.  Furthermore, the IPv6 address is represented\nas defined in Section 4 of RFC 5952.",
   "reference": "RFC 5952: A Recommendation for IPv6 Address Text\n          Representation"
  },
  "domain-name": {
   "type": {
    "string": {
     "length": "1..253",
     "pattern": "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
    }
   },
   "description": "The domain-name type represents a DNS domain name.  The\nname SHOULD be fully qualified whenever possible.\n\nInternet domain names are only loosely specified.  Section\n3.5 of RFC 1034 recommends a syntax (modified in Section\n2.1 of RFC 1123).  The pattern above is intended to allow\nfor current practice in domain name use, and some possible\nfuture expansion.  It is designed to hold various types of\ndomain names, including names used for A or AAAA records\n(host names) and other records, such as SRV records.  Note\nthat Internet host names have a stricter syntax (described\nin RFC 952) than the DNS recommendations in RFCs 1034 and\n1123, and that systems that want to store host names in\nschema nodes using the domain-name type are recommended to\nadhere to this stricter standard to ensure interoperability.\n\nThe encoding of DNS names in the DNS protocol is limited\nto 255 characters.  Since the encoding consists of labels\nprefixed by a length bytes and there is a trailing NULL\nbyte, only 253 characters can appear in the textual dotted\nnotation.\n\nThe description clause of schema nodes using the domain-name\ntype MUST describe when and how these names are resolved to\nIP addresses.  Note that the resolution of a domain-name value\nmay require to query multiple DNS records (e.g., A for IPv4\nand AAAA for IPv6).  The order of the resolution process and\nwhich DNS record takes precedence can either be defined\nexplicitly or may depend on the configuration of the\nresolver.\n\nDomain-name values use the US-ASCII encoding.  Their canonical\nformat uses lowercase US-ASCII characters.  Internationalized\ndomain names MUST be A-labels as per RFC 5890.",
   "reference": "RFC  952: DoD Internet Host Table Specification\nRFC 1034: Domain Names - Concepts and Facilities\nRFC 1123: Requirements for Internet Hosts -- Application\n          and Support\nRFC 2782: A DNS RR for specifying the location of services\n          (DNS SRV)\nRFC 5890: Internationalized Domain Names in Applications\n          (IDNA): Definitions and Document Framework"
  },
  "host": {
   "type": {
    "union": {
     "type": {
      "inet:ip-address": null,
      "inet:domain-name": null
     }
    }
   },
   "description": "The host type represents either an IP address or a DNS\ndomain name."
  },
  "uri": {
   "type": "string",
   "description": "The uri type represents a Uniform Resource Identifier\n(URI) as defined by STD 66.\n\nObjects using the uri type MUST be in US-ASCII encoding,\nand MUST be normalized as described by RFC 3986 Sections\n6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\npercent-encoding is removed, and all case-insensitive\ncharacters are set to lowercase except for hexadecimal\ndigits, which are normalized to uppercase as described in\nSection 6.2.2.1.\n\nThe purpose of this normalization is to help provide\nunique URIs.  Note that this normalization is not\nsufficient to provide uniqueness.  Two URIs that are\ntextually distinct after this normalization may still be\nequivalent.\n\nObjects using the uri type may restrict the schemes that\nthey permit.  For example, 'data:' and 'urn:' schemes\nmight not be appropriate.\n\nA zero-length URI is not a valid URI.  This can be used to\nexpress 'URI absent' where required.\n\nIn the value set and its semantics, this type is equivalent\nto the Uri SMIv2 textual convention defined in RFC 5017.",
   "reference": "RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\nRFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n          Group: Uniform Resource Identifiers (URIs), URLs,\n          and Uniform Resource Names (URNs): Clarifications\n          and Recommendations\nRFC 5017: MIB Textual Conventions for Uniform Resource\n          Identifiers (URIs)"
  }
 },
 "pkgdir": "/Users/onvelocity/rift-composer/webapp/schemas/yang",
 "module": {}
}