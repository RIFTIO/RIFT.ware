{
 "synth": "source",
 "name": "rw-nsd",
 "schema": {
  "module": {
   "rw-nsd": {
    "namespace": "http://riftio.com/ns/riftware-1.0/rw-nsd",
    "prefix": "rw-nsd",
    "import": {
     "nsd": {
      "prefix": "nsd"
     },
     "ietf-yang-types": {
      "prefix": "yang"
     },
     "mano-types": {
      "prefix": "manotypes"
     }
    },
    "revision": {
     "2015-09-10": {
      "description": "Initial revision. This YANG file augments\nthe base MANO NSD",
      "reference": "Derived from earlier versions of base YANG files"
     }
    },
    "augment": {
     "/nsd:nsd-catalog/nsd:nsd": {
      "uses": {},
      "leaf": {
       "meta": {
        "description": "Any meta-data needed by the UI",
        "type": "string"
       },
       "logo": {
        "description": "Vendor logo for the Network Service",
        "type": "string"
       }
      },
      "list": {
       "control-param": {
        "description": "List of control parameters to manage and\nupdate the running configuration of the VNF",
        "key": "id",
        "leaf": {
         "id": {
          "type": "string"
         },
         "name": {
          "type": "string"
         },
         "description": {
          "type": "string"
         },
         "group-tag": {
          "description": "A simple tag to group control parameters",
          "type": "string"
         },
         "min-value": {
          "description": "Minimum value for the parameter",
          "type": "uint64"
         },
         "max-value": {
          "description": "Maxium value for the parameter",
          "type": "uint64"
         },
         "current-value": {
          "description": "Current value for the parameter",
          "type": "uint64"
         },
         "step-value": {
          "description": "Step value for the parameter",
          "type": "uint64"
         },
         "units": {
          "type": "string"
         },
         "widget-type": {
          "type": "manotypes:widget-type"
         },
         "url": {
          "description": "This is the URL where to perform the operation",
          "type": "inet:uri"
         },
         "method": {
          "description": "This is the method to be performed at the uri.\nPOST by default for action",
          "type": "manotypes:http-method",
          "default": "POST"
         },
         "payload": {
          "description": "This is the operation payload or payload template as stringified\nJSON. This field provides the data  to be sent for this operation\ncall",
          "type": "string"
         }
        }
       },
       "action-param": {
        "description": "List of action parameters to\ncontrol VNF",
        "key": "id",
        "leaf": {
         "id": {
          "type": "string"
         },
         "name": {
          "type": "string"
         },
         "description": {
          "type": "string"
         },
         "group-tag": {
          "description": "A simple tag to group monitoring parameter",
          "type": "string"
         },
         "url": {
          "description": "This is the URL where to perform the operation",
          "type": "inet:uri"
         },
         "method": {
          "description": "This is the method to be performed at the uri.\nPOST by default for action",
          "type": "manotypes:http-method",
          "default": "POST"
         },
         "payload": {
          "description": "This is the operation payload or payload template to be sent in\nthe data for this operation call",
          "type": "string"
         }
        }
       }
      }
     }
    }
   }
  }
 },
 "dependencies": {
  "nsd": {
   "module": {
    "nsd": {
     "namespace": "urn:ietf:params:xml:ns:yang:nfvo:nsd",
     "prefix": "nsd",
     "import": {
      "rw-pb-ext": {
       "prefix": "rwpb"
      },
      "vld": {
       "prefix": "vld"
      },
      "vnfd": {
       "prefix": "vnfd"
      },
      "ietf-inet-types": {
       "prefix": "inet"
      },
      "ietf-yang-types": {
       "prefix": "yang"
      },
      "mano-types": {
       "prefix": "manotypes"
      }
     },
     "revision": {
      "2014-10-27": {
       "description": "Initial revision. This YANG file defines\nthe Network Service Descriptor (NSD)",
       "reference": "Derived from earlier versions of base YANG files"
      }
     },
     "typedef": {
      "parameter-data-type": {
       "type": {
        "enumeration": {
         "enum": {
          "string": null,
          "integer": null,
          "boolean": null
         }
        }
       }
      }
     },
     "grouping": {
      "primitive-parameter": {
       "leaf": {
        "name": {
         "description": "Name of the parameter.",
         "type": "string"
        },
        "data-type": {
         "description": "Data type associated with the name.",
         "type": "parameter-data-type"
        },
        "mandatory": {
         "description": "Is this field mandatory",
         "type": "boolean",
         "default": "false"
        },
        "default-value": {
         "description": "The default value for this field",
         "type": "string"
        },
        "parameter-pool": {
         "description": "NSD Parameter pool name to use for this paramter",
         "type": "string"
        }
       }
      },
      "vnf-configuration": {
       "container": {
        "vnf-configuration": {
         "description": "Information regarding the VNF configuration\nis captured here. Note that if the NS contains\nmultiple instances of the same VNF, each instance\nof the VNF may have different configuration",
         "leaf": {
          "config-type": {
           "description": "Must use this configuration type and fill in only pertaining\nconfig-method below",
           "type": {
            "enumeration": {
             "enum": {
              "none": null,
              "netconf": null,
              "rest": null,
              "script": null,
              "juju": null
             }
            }
           }
          },
          "config-template": {
           "description": "Configuration template for each VNF",
           "type": "string"
          }
         },
         "choice": {
          "config-method": {
           "description": "Defines the configuration method for the VNF.",
           "case": {
            "netconf": {
             "description": "Use NETCONF for configuring the VNF.",
             "container": {
              "netconf": {
               "leaf": {
                "target": {
                 "description": "Netconf configuration target",
                 "type": {
                  "enumeration": {
                   "enum": {
                    "running": null,
                    "candidate": null
                   }
                  }
                 }
                },
                "protocol": {
                 "description": "Protocol to use for netconf (e.g. ssh)",
                 "type": {
                  "enumeration": {
                   "enum": {
                    "None": null,
                    "ssh": null
                   }
                  }
                 }
                },
                "port": {
                 "description": "Port for the netconf server.",
                 "type": "inet:port-number"
                }
               }
              }
             }
            },
            "rest": {
             "description": "Use REST for configuring the VNF.",
             "container": {
              "rest": {
               "leaf": {
                "port": {
                 "description": "Port for the REST server.",
                 "type": "inet:port-number"
                }
               }
              }
             }
            },
            "script": {
             "description": "Use custom script for configuring the VNF.\nThis script is executed in the context of\nOrchestrator.",
             "container": {
              "script": {
               "leaf": {
                "script-type": {
                 "description": "Script type - currently supported : bash, expect",
                 "type": {
                  "enumeration": {
                   "enum": {
                    "bash": null,
                    "expect": null
                   }
                  }
                 }
                }
               }
              }
             }
            },
            "juju": {
             "description": "Configure the VNF through Juju.",
             "container": {
              "juju": {
               "leaf": {
                "charm": {
                 "description": "Juju charm to use with the VNF.",
                 "type": "string"
                }
               }
              }
             }
            }
           }
          }
         },
         "container": {
          "config-access": {
           "leaf": {
            "mgmt-ip-address": {
             "description": "IP address to be used to configure this VNF,\noptional if it is possible to resolve dynamically.",
             "type": "inet:ip-address"
            },
            "username": {
             "description": "username for configuration.",
             "type": "string"
            },
            "password": {
             "description": "Password for configuration access authentication.",
             "type": "string"
            }
           }
          },
          "input-params": {
           "description": "Miscelaneous input parameters to be considered\nwhile processing the NSD to apply configuration",
           "leaf": {
            "config-priority": {
             "description": "Configuration priority - order of confgiration\nto be applied to each VNF in this NS,\nlow number gets precedence over high number",
             "type": "uint64"
            },
            "config-delay": {
             "description": "Wait (seconds) before applying the configuration to VNF",
             "type": "uint64"
            }
           }
          }
         },
         "list": {
          "config-primitive": {
           "description": "List of configuration primitives supported by the\nconfiguration agent for this VNF.",
           "key": "name",
           "leaf": {
            "name": {
             "description": "Name of the configuration primitive.",
             "type": "string"
            }
           },
           "list": {
            "parameter": {
             "description": "List of parameters to the configuration primitive.",
             "key": "name",
             "uses": "primitive-parameter"
            }
           }
          },
          "initial-config-primitive": {
           "description": "Initial set of configuration primitives.",
           "key": "seq",
           "leaf": {
            "seq": {
             "description": "Sequence number for the configuration primitive.",
             "type": "uint64"
            },
            "name": {
             "description": "Name of the configuration primitive.",
             "type": "string"
            }
           },
           "list": {
            "parameter": {
             "key": "name",
             "leaf": {
              "name": {
               "type": "string"
              },
              "value": {
               "type": "string"
              }
             }
            }
           }
          }
         }
        }
       }
      }
     },
     "container": {
      "nsd-catalog": {
       "list": {
        "nsd": {
         "key": "id",
         "leaf": {
          "id": {
           "description": "Identifier for the NSD.",
           "type": "yang:uuid"
          },
          "name": {
           "description": "NSD name.",
           "mandatory": "true",
           "type": "string"
          },
          "short-name": {
           "description": "NSD short name.",
           "type": "string"
          },
          "vendor": {
           "description": "Vendor of the NSD.",
           "type": "string"
          },
          "description": {
           "description": "Description of the NSD.",
           "type": "string"
          },
          "version": {
           "description": "Version of the NSD",
           "type": "string"
          }
         },
         "list": {
          "connection-point": {
           "description": "List for external connection points.\nEach NS has one or more external connection\npoints. As the name implies that external\nconnection points are used for connecting\nthe NS to other NS or to external networks.\nEach NS exposes these connection points to\nthe orchestrator. The orchestrator can\nconstruct network service chains by\nconnecting the connection points between\ndifferent NS.",
           "key": "name",
           "leaf": {
            "name": {
             "description": "Name of the NS connection point.",
             "type": "string"
            },
            "type": {
             "description": "Type of the connection point.",
             "type": "manotypes:connection-point-type"
            }
           }
          },
          "vld": {
           "description": "List of Virtual Link Descriptors.",
           "key": "id",
           "leaf": {
            "id": {
             "description": "Identifier for the VLD.",
             "type": "yang:uuid"
            },
            "name": {
             "description": "Virtual Link Descriptor (VLD) name.",
             "type": "string"
            },
            "short-name": {
             "description": "Short name for VLD for UI",
             "type": "string"
            },
            "vendor": {
             "description": "Provider of the VLD.",
             "type": "string"
            },
            "description": {
             "description": "Description of the VLD.",
             "type": "string"
            },
            "version": {
             "description": "Version of the VLD",
             "type": "string"
            },
            "type": {
             "type": "manotypes:virtual-link-type"
            },
            "root-bandwidth": {
             "description": "For ELAN this is the aggregate bandwidth.",
             "type": "uint64"
            },
            "leaf-bandwidth": {
             "description": "For ELAN this is the bandwidth of branches.",
             "type": "uint64"
            }
           },
           "list": {
            "vnfd-connection-point-ref": {
             "description": "A list of references to connection points.",
             "key": "member-vnf-index-ref",
             "leaf": {
              "member-vnf-index-ref": {
               "description": "Reference to member-vnf within constituent-vnfds",
               "type": {
                "leafref": {
                 "path": "../../../nsd:constituent-vnfd/nsd:member-vnf-index"
                }
               }
              },
              "vnfd-id-ref": {
               "description": "A reference to a vnfd. This is a\nleafref to path:\n    ../../../nsd:constituent-vnfd\n    + [nsd:id = current()/../nsd:id-ref]\n    + /nsd:vnfd-id-ref\nNOTE: An issue with confd is preventing the\nuse of xpath. Seems to be an issue with leafref\nto leafref, whose target is in a different module.\nOnce that is resovled this will switched to use\nleafref",
               "type": "yang:uuid"
              },
              "vnfd-connection-point-ref": {
               "description": "A reference to a connection point name\nin a vnfd. This is a leafref to path:\n    /vnfd:vnfd-catalog/vnfd:vnfd\n    + [vnfd:id = current()/../nsd:vnfd-id-ref]\n    + /vnfd:connection-point/vnfd:name\nNOTE: An issue with confd is preventing the\nuse of xpath. Seems to be an issue with leafref\nto leafref, whose target is in a different module.\nOnce that is resovled this will switched to use\nleafref",
               "type": "string"
              }
             }
            }
           },
           "uses": "manotypes:provider-network"
          },
          "constituent-vnfd": {
           "description": "List of VNFDs that are part of this\nnetwork service.",
           "key": "member-vnf-index",
           "leaf": {
            "member-vnf-index": {
             "description": "Identifier/index for the VNFD. This separate id\nis required to ensure that multiple VNFs can be\npart of single NS",
             "type": "uint64"
            },
            "vnfd-id-ref": {
             "description": "Identifier for the VNFD.",
             "type": {
              "leafref": {
               "path": "/vnfd:vnfd-catalog/vnfd:vnfd/vnfd:id"
              }
             }
            }
           },
           "uses": "vnf-configuration"
          },
          "vnf-dependency": {
           "description": "List of VNF dependencies.",
           "key": "vnf-source-ref",
           "leaf": {
            "vnf-source-ref": {
             "type": {
              "leafref": {
               "path": "/vnfd:vnfd-catalog/vnfd:vnfd/vnfd:id"
              }
             }
            },
            "vnf-depends-on-ref": {
             "description": "Reference to VNF that sorce VNF depends.",
             "type": {
              "leafref": {
               "path": "/vnfd:vnfd-catalog/vnfd:vnfd/vnfd:id"
              }
             }
            }
           }
          },
          "vnffgd": {
           "description": "List of VNF Forwarding Graph Descriptors (VNFFGD).",
           "key": "id",
           "leaf": {
            "id": {
             "description": "Identifier for the VNFFGD.",
             "type": "yang:uuid"
            },
            "name": {
             "description": "VNFFGD name.",
             "type": "string"
            },
            "short-name": {
             "description": "Short name for VNFFGD for UI",
             "type": "string"
            },
            "vendor": {
             "description": "Provider of the VNFFGD.",
             "type": "string"
            },
            "description": {
             "description": "Description of the VNFFGD.",
             "type": "string"
            },
            "version": {
             "description": "Version of the VNFFGD",
             "type": "string"
            }
           },
           "list": {
            "rsp": {
             "description": "List of Rendered Service Paths (RSP).",
             "key": "id",
             "leaf": {
              "id": {
               "description": "Identifier for the RSP.",
               "type": "yang:uuid"
              },
              "name": {
               "description": "RSP name.",
               "type": "string"
              }
             },
             "list": {
              "vnfd-connection-point-ref": {
               "description": "A list of references to connection points.",
               "key": "member-vnf-index-ref",
               "leaf": {
                "member-vnf-index-ref": {
                 "description": "Reference to member-vnf within constituent-vnfds",
                 "type": {
                  "leafref": {
                   "path": "../../../../nsd:constituent-vnfd/nsd:member-vnf-index"
                  }
                 }
                },
                "order": {
                 "type": "uint8",
                 "description": "A number that denotes the order of a VNF in a chain"
                },
                "vnfd-id-ref": {
                 "description": "A reference to a vnfd. This is a\nleafref to path:\n    ../../../../nsd:constituent-vnfd\n    + [nsd:id = current()/../nsd:id-ref]\n    + /nsd:vnfd-id-ref\nNOTE: An issue with confd is preventing the\nuse of xpath. Seems to be an issue with leafref\nto leafref, whose target is in a different module.\nOnce that is resovled this will switched to use\nleafref",
                 "type": "yang:uuid"
                },
                "vnfd-connection-point-ref": {
                 "description": "A reference to a connection point name\nin a vnfd. This is a leafref to path:\n    /vnfd:vnfd-catalog/vnfd:vnfd\n    + [vnfd:id = current()/../nsd:vnfd-id-ref]\n    + /vnfd:connection-point/vnfd:name\nNOTE: An issue with confd is preventing the\nuse of xpath. Seems to be an issue with leafref\nto leafref, whose target is in a different module.\nOnce that is resovled this will switched to use\nleafref",
                 "type": "string"
                }
               },
               "list": {
                "classifier": {
                 "description": "List of classifier rules.",
                 "key": "id",
                 "leaf": {
                  "id": {
                   "description": "Identifier for the classifier rule.",
                   "type": "yang:uuid"
                  },
                  "name": {
                   "description": "Name of the classifier.",
                   "type": "string"
                  },
                  "rsp-id-ref": {
                   "description": "A reference to the RSP.",
                   "type": {
                    "leafref": {
                     "path": "../../nsd:rsp/nsd:id"
                    }
                   }
                  }
                 },
                 "container": {
                  "match-attributes": {
                   "description": "List of match attributes.",
                   "leaf": {
                    "ip-proto": {
                     "description": "IP Protocol.",
                     "type": "uint8"
                    },
                    "source-ip-address": {
                     "description": "Source IP address.",
                     "type": "inet:ip-address"
                    },
                    "destination-ip-address": {
                     "description": "Destination IP address.",
                     "type": "inet:ip-address"
                    },
                    "source-port": {
                     "description": "Source port number.",
                     "type": "inet:port-number"
                    },
                    "destination-port": {
                     "description": "Destination port number.",
                     "type": "inet:port-number"
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          "parameter-pool": {
           "description": "Pool of parameter values which must be\npulled from during configuration",
           "key": "name",
           "leaf": {
            "name": {
             "description": "Name of the configuration value pool",
             "type": "string"
            }
           },
           "container": {
            "range": {
             "description": "Create a range of values to populate the pool with",
             "leaf": {
              "start-value": {
               "description": "Generated pool values start at this value",
               "type": "uint32",
               "mandatory": "true"
              },
              "end-value": {
               "description": "Generated pool values stop at this value",
               "type": "uint32",
               "mandatory": "true"
              }
             }
            }
           }
          },
          "config-primitive": {
           "description": "Network service level configuration primitives.",
           "key": "name",
           "leaf": {
            "name": {
             "description": "Name of the configuration primitive.",
             "type": "string"
            },
            "user-defined-script": {
             "description": "A user defined script.",
             "type": "string"
            }
           },
           "list": {
            "parameter": {
             "description": "List of parameters to the configuration primitive.",
             "key": "name",
             "uses": "primitive-parameter"
            },
            "parameter-group": {
             "description": "Grouping of parameters which are logically grouped in UI",
             "key": "name",
             "leaf": {
              "name": {
               "description": "Name of the parameter group",
               "type": "string"
              },
              "mandatory": {
               "description": "Is this parameter group mandatory",
               "type": "boolean",
               "default": "true"
              }
             },
             "list": {
              "parameter": {
               "description": "List of parameters to the configuration primitive.",
               "key": "name",
               "uses": "primitive-parameter"
              }
             }
            },
            "vnf-primitive-group": {
             "description": "List of configuration primitives grouped by VNF.",
             "key": "member-vnf-index-ref",
             "leaf": {
              "member-vnf-index-ref": {
               "description": "Reference to member-vnf within constituent-vnfds",
               "type": "uint64"
              },
              "vnfd-id-ref": {
               "description": "A reference to a vnfd. This is a\nleafref to path:\n    ../../../../nsd:constituent-vnfd\n    + [nsd:id = current()/../nsd:id-ref]\n    + /nsd:vnfd-id-ref\nNOTE: An issue with confd is preventing the\nuse of xpath. Seems to be an issue with leafref\nto leafref, whose target is in a different module.\nOnce that is resovled this will switched to use\nleafref",
               "type": "string"
              },
              "vnfd-name": {
               "description": "Name of the VNFD",
               "type": "string"
              }
             },
             "list": {
              "primitive": {
               "key": "index",
               "leaf": {
                "index": {
                 "description": "Index of this primitive",
                 "type": "uint32"
                },
                "name": {
                 "description": "Name of the primitive in the VNF primitive ",
                 "type": "string"
                }
               }
              }
             }
            }
           }
          }
         },
         "leaf-list": {
          "vld-ref": {
           "type": {
            "leafref": {
             "path": "/vld:vld-catalog/vld:vld/vld:id"
            }
           }
          }
         },
         "uses": {
          "manotypes:monitoring-param": null,
          "manotypes:input-parameter-xpath": null
         }
        }
       }
      }
     }
    }
   }
  },
  "rw-pb-ext": {
   "module": {
    "rw-pb-ext": {
     "namespace": "http://riftio.com/ns/riftware-1.0/rw-pb-ext",
     "prefix": "rwpb",
     "revision": {
      "2014-03-28": {
       "description": "Initial revision.",
       "reference": "RIFT yang extensions for converting yang files to Google\nProtocol Buffers (protobuf) using rift protoc-c extensions."
      }
     }
    }
   }
  },
  "vld": {
   "module": {
    "vld": {
     "namespace": "urn:ietf:params:xml:ns:yang:nfvo:vld",
     "prefix": "vld",
     "import": {
      "rw-pb-ext": {
       "prefix": "rwpb"
      },
      "vnfd": {
       "prefix": "vnfd"
      },
      "ietf-inet-types": {
       "prefix": "inet"
      },
      "ietf-yang-types": {
       "prefix": "yang"
      },
      "mano-types": {
       "prefix": "manotypes"
      }
     },
     "revision": {
      "2015-09-10": {
       "description": "Initial revision. This YANG file defines\nthe Virtual Link Descriptor (VLD)",
       "reference": "Derived from earlier versions of base YANG files"
      }
     },
     "container": {
      "vld-catalog": {
       "list": {
        "vld": {
         "key": "id",
         "leaf": {
          "id": {
           "description": "Identifier for the VLD.",
           "type": "yang:uuid"
          },
          "name": {
           "description": "Virtual Link Descriptor (VLD) name.",
           "type": "string"
          },
          "short-name": {
           "description": "Short name for VLD for UI",
           "type": "string"
          },
          "vendor": {
           "description": "Provider of the VLD.",
           "type": "string"
          },
          "description": {
           "description": "Description of the VLD.",
           "type": "string"
          },
          "version": {
           "description": "Version of the VLD",
           "type": "string"
          },
          "type": {
           "type": "manotypes:virtual-link-type"
          },
          "root-bandwidth": {
           "description": "For ELAN this is the aggregate bandwidth.",
           "type": "uint64"
          },
          "leaf-bandwidth": {
           "description": "For ELAN this is the bandwidth of branches.",
           "type": "uint64"
          }
         },
         "list": {
          "vnfd-connection-point-ref": {
           "description": "A list of references to connection points.",
           "key": "vnfd-ref member-vnf-index-ref",
           "leaf": {
            "vnfd-ref": {
             "description": "A reference to a vnfd",
             "type": {
              "leafref": {
               "path": "/vnfd:vnfd-catalog/vnfd:vnfd/vnfd:id"
              }
             }
            },
            "member-vnf-index-ref": {
             "description": "A reference to the consituent-vnfd id in nsd.\nShould have been a leafref to:\n '/nsd:nsd-catalog:/nsd:nsd/constituent-vnfd/member-vnf-index-ref'.\nInstead using direct leaf to avoid circular reference.",
             "type": "uint64"
            },
            "vnfd-connection-point-ref": {
             "description": "A reference to a connection point name in a vnfd",
             "type": {
              "leafref": {
               "path": "/vnfd:vnfd-catalog/vnfd:vnfd[vnfd:id = current()/../vld:vnfd-ref]/vnfd:connection-point/vnfd:name"
              }
             }
            }
           }
          }
         },
         "container": {
          "provider-network": {
           "description": "Container for the provider network.",
           "leaf": {
            "physical-network": {
             "description": "Name of the phsyical network on which the provider\nnetwork is built.",
             "type": "string"
            },
            "overlay-type": {
             "description": "Type of the overlay network.",
             "type": {
              "enumeration": {
               "enum": {
                "LOCAL": {
                 "value": 0
                },
                "FLAT": {
                 "value": 1
                },
                "VLAN": {
                 "value": 2
                },
                "VXLAN": {
                 "value": 3
                },
                "GRE": {
                 "value": 4
                }
               }
              }
             }
            },
            "segmentation_id": {
             "description": "Segmentation ID",
             "type": "uint32"
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  },
  "vnfd": {
   "module": {
    "vnfd": {
     "namespace": "urn:ietf:params:xml:ns:yang:nfvo:vnfd",
     "prefix": "vnfd",
     "import": {
      "mano-types": {
       "prefix": "manotypes"
      },
      "rw-pb-ext": {
       "prefix": "rwpb"
      },
      "ietf-yang-types": {
       "prefix": "yang"
      },
      "ietf-inet-types": {
       "prefix": "inet"
      }
     },
     "revision": {
      "2015-09-10": {
       "description": "Initial revision. This YANG file defines\nthe Virtual Network Function (VNF)",
       "reference": "Derived from earlier versions of base YANG files"
      }
     },
     "grouping": {
      "virtual-interface": {
       "container": {
        "virtual-interface": {
         "description": "Container for the virtual interface properties",
         "leaf": {
          "type": {
           "description": "Specifies the type of virtual interface\nbetween VM and host.\nVIRTIO          : Use the traditional VIRTIO interface.\nPCI-PASSTHROUGH : Use PCI-PASSTHROUGH interface.\nSR-IOV          : Use SR-IOV interface.\nOM-MGMT         : Used to specify openmano mgmt external-connection type",
           "type": {
            "enumeration": {
             "enum": {
              "OM-MGMT": {
               "value": 0
              },
              "PCI-PASSTHROUGH": {
               "value": 1
              },
              "SR-IOV": {
               "value": 2
              },
              "VIRTIO": {
               "value": 3
              }
             }
            }
           },
           "default": "VIRTIO"
          },
          "vpci": {
           "description": "Specifies the virtual PCI address. Expressed in\nthe following format dddd:dd:dd.d. For example\n0000:00:12.0. This information can be used to\npass as metadata during the VM creation.",
           "type": "string"
          },
          "bandwidth": {
           "description": "Aggregate bandwidth of the NIC.",
           "type": "uint64"
          }
         }
        }
       }
      }
     },
     "container": {
      "vnfd-catalog": {
       "description": "Virtual Network Function Descriptor (VNFD).",
       "list": {
        "vnfd": {
         "key": "id",
         "leaf": {
          "id": {
           "description": "Identifier for the VNFD.",
           "type": "yang:uuid"
          },
          "name": {
           "description": "VNFD name.",
           "mandatory": true,
           "type": "string"
          },
          "short-name": {
           "description": "VNFD short name.",
           "type": "string"
          },
          "vendor": {
           "description": "Vendor of the VNFD.",
           "type": "string"
          },
          "description": {
           "description": "Description of the VNFD.",
           "type": "string"
          },
          "version": {
           "description": "Version of the VNFD",
           "type": "string"
          },
          "vnf-type": {
           "description": "Type of VNF.\nNOTE: This needs to map with Service Function Type in ODL to\nsupport VNFFG. Service Function Type is manadatory param in ODL\nSFC. This is temporarily set to string for ease of use",
           "type": "string"
          }
         },
         "container": {
          "mgmt-interface": {
           "description": "Interface over which the VNF is managed.",
           "choice": {
            "endpoint-type": {
             "description": "Indicates the type of management endpoint.",
             "case": {
              "ip": {
               "description": "Specifies the static IP address for managing the VNF.",
               "leaf": {
                "ip-address": {
                 "type": "inet:ip-address"
                }
               }
              },
              "vdu-id": {
               "description": "Use the default management interface on this VDU.",
               "leaf": {
                "vdu-id": {
                 "type": {
                  "leafref": {
                   "path": "/vnfd:vnfd-catalog/vnfd:vnfd/vnfd:vdu/vnfd:id"
                  }
                 }
                }
               }
              },
              "cp": {
               "description": "Use the ip address associated with this connection point.",
               "leaf": {
                "cp": {
                 "type": {
                  "leafref": {
                   "path": "/vnfd:vnfd-catalog/vnfd:vnfd/vnfd:connection-point/vnfd:name"
                  }
                 }
                }
               }
              }
             }
            },
            "interface-type": {
             "case": {
              "netconf": {
               "leaf": {
                "netconf": {
                 "type": "empty"
                }
               }
              }
             }
            }
           },
           "leaf": {
            "port": {
             "description": "Port for the management interface.",
             "type": "inet:port-number"
            }
           },
           "container": {
            "dashboard-params": {
             "description": "Parameters for the VNF dashboard",
             "leaf": {
              "path": {
               "description": "The HTTP path for the dashboard",
               "type": "string"
              },
              "https": {
               "description": "Pick HTTPS instead of HTTP , Default is false",
               "type": "boolean"
              },
              "port": {
               "description": "The HTTP port for the dashboard",
               "type": "inet:port-number"
              }
             }
            }
           }
          }
         },
         "list": {
          "internal-vld": {
           "key": "id",
           "description": "List of Internal Virtual Link Descriptors (VLD).\nThe internal VLD describes the basic topology of\nthe connectivity (e.g. E-LAN, E-Line, E-Tree)\nbetween internal VNF components of the system.",
           "leaf": {
            "id": {
             "description": "Identifier for the VLD",
             "type": "yang:uuid"
            },
            "name": {
             "description": "Name of the internal VLD",
             "type": "string"
            },
            "short-name": {
             "description": "Short name of the internal VLD",
             "type": "string"
            },
            "description": {
             "type": "string"
            },
            "type": {
             "type": "manotypes:virtual-link-type"
            },
            "root-bandwidth": {
             "description": "For ELAN this is the aggregate bandwidth.",
             "type": "uint64"
            },
            "leaf-bandwidth": {
             "description": "For ELAN this is the bandwidth of branches.",
             "type": "uint64"
            }
           },
           "leaf-list": {
            "internal-connection-point-ref": {
             "type": {
              "leafref": {
               "path": "../../vdu/internal-connection-point/id"
              }
             }
            }
           },
           "container": {
            "provider-network": {
             "description": "Container for the provider network.",
             "leaf": {
              "physical-network": {
               "description": "Name of the phsyical network on which the provider\nnetwork is built.",
               "type": "string"
              },
              "overlay-type": {
               "description": "Type of the overlay network.",
               "type": {
                "enumeration": {
                 "enum": {
                  "LOCAL": {
                   "value": 0
                  },
                  "FLAT": {
                   "value": 1
                  },
                  "VLAN": {
                   "value": 2
                  },
                  "VXLAN": {
                   "value": 3
                  },
                  "GRE": {
                   "value": 4
                  }
                 }
                }
               }
              },
              "segmentation_id": {
               "description": "Segmentation ID",
               "type": "uint32"
              }
             }
            }
           }
          },
          "connection-point": {
           "key": "name",
           "description": "List for external connection points. Each VNF has one\nor more external connection points. As the name\nimplies that external connection points are used for\nconnecting the VNF to other VNFs or to external networks.\nEach VNF exposes these connection points to the\norchestrator. The orchestrator can construct network\nservices by connecting the connection points between\ndifferent VNFs. The NFVO will use VLDs and VNFFGs at\nthe network service level to construct network services.",
           "leaf": {
            "name": {
             "description": "Name of the connection point",
             "type": "string"
            },
            "short-name": {
             "description": "Short name of the connection point",
             "type": "string"
            },
            "type": {
             "description": "Type of the connection point.",
             "type": "manotypes:connection-point-type"
            }
           }
          },
          "vdu": {
           "description": "List of Virtual Deployment Units",
           "key": "id",
           "leaf": {
            "id": {
             "description": "Unique id for the VDU",
             "type": "yang:uuid"
            },
            "name": {
             "description": "Unique name for the VDU",
             "type": "string"
            },
            "description": {
             "description": "Description of the VDU.",
             "type": "string"
            },
            "count": {
             "description": "Number of instances of VDU",
             "type": "uint64"
            },
            "mgmt-vpci": {
             "description": "Specifies the virtual PCI address. Expressed in\nthe following format dddd:dd:dd.d. For example\n0000:00:12.0. This information can be used to\npass as metadata during the VM creation.",
             "type": "string"
            },
            "image": {
             "description": "Image name for the software image.\nIf the image name is found within the VNF packaage it will\nbe uploaded to all cloud accounts during onboarding process.\nOtherwise, the image must be added to the cloud account with\nthe same name as entered here.\n",
             "mandatory": true,
             "type": "string"
            },
            "image-checksum": {
             "description": "Image md5sum for the software image.\nThe md5sum, if provided, along with the image name uniquely\nidentifies an image uploaded to the CAL.\n",
             "type": "string"
            },
            "cloud-init": {
             "description": "Content of cloud-init script",
             "type": "string"
            }
           },
           "uses": {},
           "list": {
            "internal-connection-point": {
             "key": "id",
             "description": "List for internal connection points. Each VNFC\nhas zero or more internal connection points.\nInternal connection points are used for connecting\nthe VNF components internal to the VNF. If a VNF\nhas only one VNFC, it may not have any internal\nconnection points.",
             "leaf": {
              "id": {
               "description": "Identifier for the internal connection points",
               "type": "yang:uuid"
              },
              "type": {
               "description": "Type of the connection point.",
               "type": "manotypes:connection-point-type"
              },
              "internal-vld-ref": {
               "type": {
                "leafref": {
                 "path": "../../../internal-vld/id"
                }
               }
              }
             }
            },
            "internal-interface": {
             "description": "List of internal interfaces for the VNF",
             "key": "name",
             "leaf": {
              "name": {
               "description": "Name of internal interface. Note that this\nname has only local significance to the VDU.",
               "type": "string"
              },
              "vdu-internal-connection-point-ref": {
               "type": {
                "leafref": {
                 "path": "../../internal-connection-point/id"
                }
               }
              }
             },
             "container": {
              "virtual-interface": {
               "description": "Container for the virtual interface properties",
               "leaf": {
                "type": {
                 "description": "Specifies the type of virtual interface\nbetween VM and host.\nVIRTIO          : Use the traditional VIRTIO interface.\nPCI-PASSTHROUGH : Use PCI-PASSTHROUGH interface.\nSR-IOV          : Use SR-IOV interface.\nOM-MGMT         : Used to specify openmano mgmt external-connection type",
                 "type": {
                  "enumeration": {
                   "enum": {
                    "OM-MGMT": {
                     "value": 0
                    },
                    "PCI-PASSTHROUGH": {
                     "value": 1
                    },
                    "SR-IOV": {
                     "value": 2
                    },
                    "VIRTIO": {
                     "value": 3
                    }
                   }
                  }
                 },
                 "default": "VIRTIO"
                },
                "vpci": {
                 "description": "Specifies the virtual PCI address. Expressed in\nthe following format dddd:dd:dd.d. For example\n0000:00:12.0. This information can be used to\npass as metadata during the VM creation.",
                 "type": "string"
                },
                "bandwidth": {
                 "description": "Aggregate bandwidth of the NIC.",
                 "type": "uint64"
                }
               }
              }
             }
            },
            "external-interface": {
             "description": "List of external interfaces for the VNF.\nThe external interfaces enable sending\ntraffic to and from VNF.",
             "key": "name",
             "leaf": {
              "name": {
               "description": "Name of the external interface. Note that\nthis name has only local significance.",
               "type": "string"
              },
              "vnfd-connection-point-ref": {
               "description": "Name of the external connection point.",
               "type": {
                "leafref": {
                 "path": "../../../connection-point/name"
                }
               }
              }
             },
             "container": {
              "virtual-interface": {
               "description": "Container for the virtual interface properties",
               "leaf": {
                "type": {
                 "description": "Specifies the type of virtual interface\nbetween VM and host.\nVIRTIO          : Use the traditional VIRTIO interface.\nPCI-PASSTHROUGH : Use PCI-PASSTHROUGH interface.\nSR-IOV          : Use SR-IOV interface.\nOM-MGMT         : Used to specify openmano mgmt external-connection type",
                 "type": {
                  "enumeration": {
                   "enum": {
                    "OM-MGMT": {
                     "value": 0
                    },
                    "PCI-PASSTHROUGH": {
                     "value": 1
                    },
                    "SR-IOV": {
                     "value": 2
                    },
                    "VIRTIO": {
                     "value": 3
                    }
                   }
                  }
                 },
                 "default": "VIRTIO"
                },
                "vpci": {
                 "description": "Specifies the virtual PCI address. Expressed in\nthe following format dddd:dd:dd.d. For example\n0000:00:12.0. This information can be used to\npass as metadata during the VM creation.",
                 "type": "string"
                },
                "bandwidth": {
                 "description": "Aggregate bandwidth of the NIC.",
                 "type": "uint64"
                }
               }
              }
             }
            }
           },
           "container": {
            "vm-flavor": {
             "leaf": {
              "vcpu-count": {
               "description": "Number of vcpus for the VM.",
               "type": "uint16"
              },
              "memory-mb": {
               "description": "Amount of memory in MB.",
               "type": "uint64"
              },
              "storage-gb": {
               "description": "Amount of disk space in GB.",
               "type": "uint64"
              }
             }
            },
            "guest-epa": {
             "leaf": {
              "trusted-execution": {
               "description": "This VM should be allocated from trusted pool",
               "type": "boolean"
              },
              "mempage-size": {
               "description": "Memory page allocation size. If a VM requires\nhugepages, it should choose LARGE or SIZE_2MB\nor SIZE_1GB. If the VM prefers hugepages it\nshould chose PREFER_LARGE.\nLARGE        : Require hugepages (either 2MB or 1GB)\nSMALL        : Doesn't require hugepages\nSIZE_2MB     : Requires 2MB hugepages\nSIZE_1GB     : Requires 1GB hugepages\nPREFER_LARGE : Application perfers hugepages",
               "type": {
                "enumeration": {
                 "enum": {
                  "LARGE": {
                   "value": 0
                  },
                  "SMALL": {
                   "value": 1
                  },
                  "SIZE_2MB": {
                   "value": 2
                  },
                  "SIZE_1GB": {
                   "value": 3
                  },
                  "PREFER_LARGE": {
                   "value": 4
                  }
                 }
                }
               }
              },
              "cpu-pinning-policy": {
               "description": "CPU pinning policy describes association\nbetween virtual CPUs in guest and the\nphysical CPUs in the host.\nDEDICATED : Virtual CPUs are pinned to\n            physical CPUs\nSHARED    : Multiple VMs may share the\n            same physical CPUs.\nANY       : Any policy is acceptable for the VM",
               "type": {
                "enumeration": {
                 "enum": {
                  "DEDICATED": {
                   "value": 0
                  },
                  "SHARED": {
                   "value": 1
                  },
                  "ANY": {
                   "value": 2
                  }
                 }
                }
               },
               "default": "ANY"
              },
              "cpu-thread-pinning-policy": {
               "description": "CPU thread pinning policy describes how to\nplace the guest CPUs when the host supports\nhyper threads:\nAVOID   : Avoids placing a guest on a host\n          with threads.\nSEPARATE: Places vCPUs on separate cores,\n          and avoids placing two vCPUs on\n          two threads of same core.\nISOLATE : Places each vCPU on a different core,\n          and places no vCPUs from a different\n          guest on the same core.\nPREFER  : Attempts to place vCPUs on threads\n          of the same core.",
               "type": {
                "enumeration": {
                 "enum": {
                  "AVOID": {
                   "value": 0
                  },
                  "SEPARATE": {
                   "value": 1
                  },
                  "ISOLATE": {
                   "value": 2
                  },
                  "PREFER": {
                   "value": 3
                  }
                 }
                }
               }
              }
             },
             "list": {
              "pcie-device": {
               "description": "List of pcie passthrough devices.",
               "key": "device-id",
               "leaf": {
                "device-id": {
                 "description": "Device identifier.",
                 "type": "string"
                },
                "count": {
                 "description": "Number of devices to attach to the VM.",
                 "type": "uint64"
                }
               }
              }
             },
             "choice": {
              "numa-policy": {
               "case": {
                "numa-unware": {
                 "leaf": {
                  "numa-unware": {
                   "type": "empty"
                  }
                 }
                },
                "numa-aware": {
                 "container": {
                  "numa-node-policy": {
                   "description": "This policy defines numa topology of the\nguest. Specifically identifies if the guest\nshould be run on a host with one numa\nnode or multiple numa nodes. As an example\na guest may want 8 vcpus and 4 GB of\nmemory. But may want the vcpus and memory\ndistributed across multiple numa nodes.\nThe NUMA node 1 may run with 6 vcpus and\n3GB, and NUMA node 2 may run with 2 vcpus\nand 1GB.",
                   "leaf": {
                    "node-cnt": {
                     "description": "The number of numa nodes to expose to the VM.",
                     "type": "uint16"
                    },
                    "mem-policy": {
                     "description": "This policy specifies how the memory should\nbe allocated in a multi-node scenario.\nSTRICT    : The memory must be allocated\n            strictly from the memory attached\n            to the NUMA node.\nPREFERRED : The memory should be allocated\n            perferentially from the memory\n            attached to the NUMA node",
                     "type": {
                      "enumeration": {
                       "enum": {
                        "STRICT": {
                         "value": 0
                        },
                        "PREFERRED": {
                         "value": 1
                        }
                       }
                      }
                     }
                    }
                   },
                   "list": {
                    "node": {
                     "key": "id",
                     "leaf": {
                      "id": {
                       "description": "NUMA node identification. Typically\nit's 0 or 1",
                       "type": "uint64"
                      },
                      "memory-mb": {
                       "description": "Memory size expressed in MB\nfor this NUMA node.",
                       "type": "uint64"
                      }
                     },
                     "leaf-list": {
                      "vcpu": {
                       "description": "List of vcpus to allocate on\nthis numa node.",
                       "type": "uint64"
                      }
                     },
                     "choice": {
                      "om-numa-type": {
                       "description": "Openmano Numa type selection",
                       "case": {
                        "cores": {
                         "leaf": {
                          "num-cores": {
                           "type": "uint8"
                          }
                         }
                        },
                        "paired-threads": {
                         "container": {
                          "paired-threads": {
                           "leaf": {
                            "num-paired-threads": {
                             "type": "uint8"
                            }
                           },
                           "list": {
                            "paired-thread-ids": {
                             "description": "List of thread pairs to use in case of paired-thread numa",
                             "max-elements": 16,
                             "key": "thread-a",
                             "leaf": {
                              "thread-a": {
                               "type": "uint8"
                              },
                              "thread-b": {
                               "type": "uint8"
                              }
                             }
                            }
                           }
                          }
                         }
                        },
                        "threads": {
                         "leaf": {
                          "num-threads": {
                           "type": "uint8"
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            },
            "vswitch-epa": {
             "leaf": {
              "ovs-acceleration": {
               "description": "Specifies Open vSwitch acceleration mode.\nMANDATORY: OVS acceleration is required\nPREFERRED: OVS acceleration is preferred",
               "type": {
                "enumeration": {
                 "enum": {
                  "MANDATORY": {
                   "value": 0
                  },
                  "PREFERRED": {
                   "value": 1
                  },
                  "DISABLED": {
                   "value": 2
                  }
                 }
                }
               }
              },
              "ovs-offload": {
               "description": "Specifies Open vSwitch hardware offload mode.\nMANDATORY: OVS offload is required\nPREFERRED: OVS offload is preferred",
               "type": {
                "enumeration": {
                 "enum": {
                  "MANDATORY": {
                   "value": 0
                  },
                  "PREFERRED": {
                   "value": 1
                  },
                  "DISABLED": {
                   "value": 2
                  }
                 }
                }
               }
              }
             }
            },
            "hypervisor-epa": {
             "leaf": {
              "type": {
               "description": "Specifies the type of hypervisor.\nKVM: KVM\nXEN: XEN",
               "type": {
                "enumeration": {
                 "enum": {
                  "PREFER_KVM": {
                   "value": 0
                  },
                  "REQUIRE_KVM": {
                   "value": 1
                  }
                 }
                }
               }
              },
              "version": {
               "type": "string"
              }
             }
            },
            "host-epa": {
             "description": "Specifies the host level EPA attributes.",
             "leaf": {
              "cpu-model": {
               "description": "Host CPU model. Examples include: SandyBridge,\nIvyBridge",
               "type": {
                "enumeration": {
                 "enum": {
                  "PREFER_WESTMERE": {
                   "value": 0
                  },
                  "REQUIRE_WESTMERE": {
                   "value": 1
                  },
                  "PREFER_SANDYBRIDGE": {
                   "value": 2
                  },
                  "REQUIRE_SANDYBRIDGE": {
                   "value": 3
                  },
                  "PREFER_IVYBRIDGE": {
                   "value": 4
                  },
                  "REQUIRE_IVYBRIDGE": {
                   "value": 5
                  },
                  "PREFER_HASWELL": {
                   "value": 6
                  },
                  "REQUIRE_HASWELL": {
                   "value": 7
                  },
                  "PREFER_BROADWELL": {
                   "value": 8
                  },
                  "REQUIRE_BROADWELL": {
                   "value": 9
                  },
                  "PREFER_NEHALEM": {
                   "value": 10
                  },
                  "REQUIRE_NEHALEM": {
                   "value": 11
                  },
                  "PREFER_PENRYN": {
                   "value": 12
                  },
                  "REQUIRE_PENRYN": {
                   "value": 13
                  },
                  "PREFER_CONROE": {
                   "value": 14
                  },
                  "REQUIRE_CONROE": {
                   "value": 15
                  },
                  "PREFER_CORE2DUO": {
                   "value": 16
                  },
                  "REQUIRE_CORE2DUO": {
                   "value": 17
                  }
                 }
                }
               }
              },
              "cpu-arch": {
               "description": "Host CPU architecture.",
               "type": {
                "enumeration": {
                 "enum": {
                  "PREFER_X86": {
                   "value": 0
                  },
                  "REQUIRE_X86": {
                   "value": 1
                  },
                  "PREFER_X86_64": {
                   "value": 2
                  },
                  "REQUIRE_X86_64": {
                   "value": 3
                  },
                  "PREFER_I686": {
                   "value": 4
                  },
                  "REQUIRE_I686": {
                   "value": 5
                  },
                  "PREFER_IA64": {
                   "value": 6
                  },
                  "REQUIRE_IA64": {
                   "value": 7
                  },
                  "PREFER_ARMV7": {
                   "value": 8
                  },
                  "REQUIRE_ARMV7": {
                   "value": 9
                  },
                  "PREFER_ARMV8": {
                   "value": 10
                  },
                  "REQUIRE_ARMV8": {
                   "value": 11
                  }
                 }
                }
               }
              },
              "cpu-vendor": {
               "description": "Host CPU Vendor.",
               "type": {
                "enumeration": {
                 "enum": {
                  "PREFER_INTEL": {
                   "value": 0
                  },
                  "REQUIRE_INTEL": {
                   "value": 1
                  },
                  "PREFER_AMD": {
                   "value": 2
                  },
                  "REQUIRE_AMD": {
                   "value": 3
                  }
                 }
                }
               }
              },
              "cpu-socket-count": {
               "description": "Number of sockets on the host.",
               "type": {
                "enumeration": {
                 "enum": {
                  "PREFER_ONE": {
                   "value": 0
                  },
                  "PREFER_TWO": {
                   "value": 1
                  },
                  "REQUIRE_ONE": {
                   "value": 2
                  },
                  "REQUIRE_TWO": {
                   "value": 3
                  }
                 }
                }
               }
              },
              "cpu-core-count": {
               "description": "Number of cores on the host.",
               "type": "uint64"
              },
              "om-cpu-model-string": {
               "description": "Openmano CPU model string",
               "type": "string"
              }
             },
             "leaf-list": {
              "cpu-feature": {
               "description": "List of CPU features.",
               "type": "manotypes:cpu-feature-type"
              },
              "om-cpu-feature": {
               "description": "Openmano CPU features",
               "type": "string"
              }
             }
            }
           }
          },
          "vdu-dependency": {
           "description": "List of VDU dependencies.",
           "key": "vdu-source-ref",
           "leaf": {
            "vdu-source-ref": {
             "type": {
              "leafref": {
               "path": "../../vdu/id"
              }
             }
            },
            "vdu-depends-on-ref": {
             "description": "Reference to the VDU that\nsource VDU depends.",
             "type": {
              "leafref": {
               "path": "../../vdu/id"
              }
             }
            }
           }
          },
          "http-endpoint": {
           "description": "List of http endpoints to be used by monitoring params",
           "key": "path",
           "leaf": {
            "path": {
             "description": "The HTTP path on the management server",
             "type": "string"
            },
            "https": {
             "description": "Pick HTTPS instead of HTTP , Default is false",
             "type": "boolean",
             "default": "false"
            },
            "port": {
             "description": "The HTTP port to connect to",
             "type": "inet:port-number"
            },
            "username": {
             "description": "The HTTP basic auth username",
             "type": "string"
            },
            "password": {
             "description": "The HTTP basic auth password",
             "type": "string"
            },
            "polling_interval_secs": {
             "description": "The HTTP polling interval in seconds",
             "type": "uint8",
             "default": "2"
            },
            "method": {
             "description": "This is the method to be performed at the uri.\nGET by default for action",
             "type": "manotypes:http-method",
             "default": "GET"
            }
           },
           "list": {
            "headers": {
             "description": "Custom HTTP headers to put on HTTP request",
             "key": "key",
             "leaf": {
              "key": {
               "description": "HTTP header key",
               "type": "string"
              },
              "value": {
               "description": "HTTP header value",
               "type": "string"
              }
             }
            }
           }
          },
          "monitoring-param": {
           "description": "List of monitoring parameters at the NS level",
           "key": "id",
           "leaf": {
            "id": {
             "type": "string"
            },
            "name": {
             "type": "string"
            },
            "http-endpoint-ref": {
             "type": {
              "leafref": {
               "path": "../../http-endpoint/path"
              }
             }
            },
            "json-query-method": {
             "type": "manotypes:json-query-method",
             "default": "NAMEKEY"
            },
            "description": {
             "type": "string"
            },
            "group-tag": {
             "description": "A simple tag to group monitoring parameters",
             "type": "string"
            },
            "value-type": {
             "type": "manotypes:param-value-type",
             "default": "INT"
            },
            "value-integer": {
             "description": "Current value for an integer parameter",
             "type": "int64"
            },
            "value-decimal": {
             "description": "Current value for a decimal parameter",
             "type": {
              "decimal64": {
               "fraction-digits": "4"
              }
             }
            },
            "value-string": {
             "description": "Current value for a string parameter",
             "type": "string"
            },
            "widget-type": {
             "type": "manotypes:widget-type"
            },
            "units": {
             "type": "string"
            }
           },
           "container": {
            "json-query-params": {
             "leaf": {
              "json-path": {
               "description": "The jsonpath to use to extract value from JSON structure",
               "type": "string"
              },
              "object-path": {
               "description": "The objectpath to use to extract value from JSON structure",
               "type": "string"
              }
             }
            },
            "numeric-constraints": {
             "leaf": {
              "min-value": {
               "description": "Minimum value for the parameter",
               "type": "uint64"
              },
              "max-value": {
               "description": "Maxium value for the parameter",
               "type": "uint64"
              }
             }
            },
            "text-constraints": {
             "leaf": {
              "min-length": {
               "description": "Minimum string length for the parameter",
               "type": "uint8"
              },
              "max-length": {
               "description": "Maximum string length for the parameter",
               "type": "uint8"
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  },
  "mano-types": {
   "module": {
    "mano-types": {
     "namespace": "urn:ietf:params:xml:ns:yang:nfvo:mano-types",
     "prefix": "manotypes",
     "import": {
      "ietf-inet-types": {
       "prefix": "inet"
      }
     },
     "revision": {
      "2015-04-23": {
       "description": "Initial revision. This YANG file defines\nthe reusable base types for VNF Management\nand Orchestration (MANO).",
       "reference": "Derived from earlier versions of base YANG files"
      }
     },
     "typedef": {
      "virtual-link-type": {
       "description": "Type of virtual link\nELAN: A multipoint service connecting a set of VNFs\n// ELINE: For a simple point to point connection\n//        between a VNF and the existing network.\n// ETREE: A multipoint service connecting one or\n//        more roots and a set of leaves, but\n//        preventing inter-leaf communication.",
       "type": {
        "enumeration": {
         "enum": "ELAN"
        }
       }
      },
      "http-method": {
       "description": "Type of HTTP operation",
       "type": {
        "enumeration": {
         "enum": {
          "POST": {
           "value": 0
          },
          "PUT": {
           "value": 1
          },
          "GET": {
           "value": 2
          },
          "DELETE": {
           "value": 3
          },
          "OPTIONS": {
           "value": 4
          },
          "PATCH": {
           "value": 5
          }
         }
        }
       }
      },
      "api-type": {
       "description": "Type of API to fetch monitoring params",
       "type": {
        "enumeration": {
         "enum": {
          "HTTP": {
           "value": 0
          },
          "NETCONF": {
           "value": 1
          },
          "SOAP": {
           "value": 2
          }
         }
        }
       }
      },
      "json-query-method": {
       "description": "The method to extract a value from a JSON response\n\nNAMEKEY - Use the name as the key for a non-nested value.\nJSONPATH - Use jsonpath-rw implemenation to extract a value.\nOBJECTPATH - Use objectpath implemenation to extract a value.",
       "type": {
        "enumeration": {
         "enum": {
          "NAMEKEY": {
           "value": 0
          },
          "JSONPATH": {
           "value": 1
          },
          "OBJECTPATH": {
           "value": 2
          }
         }
        }
       }
      },
      "param-value-type": {
       "description": "The type of the parameter value",
       "type": {
        "enumeration": {
         "enum": {
          "INT": {
           "value": 0
          },
          "DECIMAL": {
           "value": 1
          },
          "STRING": {
           "value": 2
          }
         }
        }
       }
      },
      "connection-point-type": {
       "description": "Type of connection point\nVPORT: Virtual Port\n// VNIC_ADDR: Virtual NIC Address\n// PNIC_ADDR: Physical NIC Address\n// PPORT: Phsical Port.",
       "type": {
        "enumeration": {
         "enum": "VPORT"
        }
       }
      },
      "widget-type": {
       "description": "Type of the widget, typically used by the UI.",
       "type": {
        "enumeration": {
         "enum": {
          "HISTOGRAM": {
           "value": 0
          },
          "BAR": {
           "value": 1
          },
          "GAUGE": {
           "value": 2
          },
          "SLIDER": {
           "value": 3
          },
          "COUNTER": {
           "value": 4
          },
          "TEXTBOX": {
           "value": 5
          }
         }
        }
       }
      },
      "cpu-feature-type": {
       "description": "Enumeration for CPU features.\n\nAES: CPU supports advanced instruction set for\nAES (Advanced Encryption Standard).\n\nCAT: Cache Allocation Technology (CAT) allows\nan Operating System, Hypervisor, or similar\nsystem management agent to specify the amount\nof L3 cache (currently the last-level cache\nin most server and client platforms) space an\napplication can fill (as a hint to hardware\nfunctionality, certain features such as power\nmanagement may override CAT settings).\n\nCMT: Cache Monitoring Technology (CMT) allows\nan Operating System, Hypervisor, or similar\nsystem management agent to determine the\nusage of cache based on applications running\non the platform. The implementation is\ndirected at L3 cache monitoring (currently\nthe last-level cache in most server and\nclient platforms).\n\nDDIO: Intel Data Direct I/O (DDIO) enables\nEthernet server NICs and controllers talk\ndirectly to the processor cache without a\ndetour via system memory. This enumeration\nspecifies if the VM requires a DDIO\ncapable host.",
       "type": {
        "enumeration": {
         "enum": {
          "PREFER_AES": {
           "value": 0
          },
          "REQUIRE_AES": {
           "value": 1
          },
          "PREFER_CAT": {
           "value": 2
          },
          "REQUIRE_CAT": {
           "value": 3
          },
          "PREFER_CMT": {
           "value": 4
          },
          "REQUIRE_CMT": {
           "value": 5
          },
          "PREFER_DDIO": {
           "value": 6
          },
          "REQUIRE_DDIO": {
           "value": 7
          }
         }
        }
       }
      }
     },
     "grouping": {
      "named-value": {
       "leaf": {
        "name": {
         "type": "string"
        },
        "value": {
         "type": "string"
        }
       }
      },
      "vm-flavor": {
       "container": {
        "vm-flavor": {
         "leaf": {
          "vcpu-count": {
           "description": "Number of vcpus for the VM.",
           "type": "uint16"
          },
          "memory-mb": {
           "description": "Amount of memory in MB.",
           "type": "uint64"
          },
          "storage-gb": {
           "description": "Amount of disk space in GB.",
           "type": "uint64"
          }
         }
        }
       }
      },
      "vswitch-epa": {
       "container": {
        "vswitch-epa": {
         "leaf": {
          "ovs-acceleration": {
           "description": "Specifies Open vSwitch acceleration mode.\nMANDATORY: OVS acceleration is required\nPREFERRED: OVS acceleration is preferred",
           "type": {
            "enumeration": {
             "enum": {
              "MANDATORY": {
               "value": 0
              },
              "PREFERRED": {
               "value": 1
              },
              "DISABLED": {
               "value": 2
              }
             }
            }
           }
          },
          "ovs-offload": {
           "description": "Specifies Open vSwitch hardware offload mode.\nMANDATORY: OVS offload is required\nPREFERRED: OVS offload is preferred",
           "type": {
            "enumeration": {
             "enum": {
              "MANDATORY": {
               "value": 0
              },
              "PREFERRED": {
               "value": 1
              },
              "DISABLED": {
               "value": 2
              }
             }
            }
           }
          }
         }
        }
       }
      },
      "hypervisor-epa": {
       "container": {
        "hypervisor-epa": {
         "leaf": {
          "type": {
           "description": "Specifies the type of hypervisor.\nKVM: KVM\nXEN: XEN",
           "type": {
            "enumeration": {
             "enum": {
              "PREFER_KVM": {
               "value": 0
              },
              "REQUIRE_KVM": {
               "value": 1
              }
             }
            }
           }
          },
          "version": {
           "type": "string"
          }
         }
        }
       }
      },
      "host-epa": {
       "container": {
        "host-epa": {
         "description": "Specifies the host level EPA attributes.",
         "leaf": {
          "cpu-model": {
           "description": "Host CPU model. Examples include: SandyBridge,\nIvyBridge",
           "type": {
            "enumeration": {
             "enum": {
              "PREFER_WESTMERE": {
               "value": 0
              },
              "REQUIRE_WESTMERE": {
               "value": 1
              },
              "PREFER_SANDYBRIDGE": {
               "value": 2
              },
              "REQUIRE_SANDYBRIDGE": {
               "value": 3
              },
              "PREFER_IVYBRIDGE": {
               "value": 4
              },
              "REQUIRE_IVYBRIDGE": {
               "value": 5
              },
              "PREFER_HASWELL": {
               "value": 6
              },
              "REQUIRE_HASWELL": {
               "value": 7
              },
              "PREFER_BROADWELL": {
               "value": 8
              },
              "REQUIRE_BROADWELL": {
               "value": 9
              },
              "PREFER_NEHALEM": {
               "value": 10
              },
              "REQUIRE_NEHALEM": {
               "value": 11
              },
              "PREFER_PENRYN": {
               "value": 12
              },
              "REQUIRE_PENRYN": {
               "value": 13
              },
              "PREFER_CONROE": {
               "value": 14
              },
              "REQUIRE_CONROE": {
               "value": 15
              },
              "PREFER_CORE2DUO": {
               "value": 16
              },
              "REQUIRE_CORE2DUO": {
               "value": 17
              }
             }
            }
           }
          },
          "cpu-arch": {
           "description": "Host CPU architecture.",
           "type": {
            "enumeration": {
             "enum": {
              "PREFER_X86": {
               "value": 0
              },
              "REQUIRE_X86": {
               "value": 1
              },
              "PREFER_X86_64": {
               "value": 2
              },
              "REQUIRE_X86_64": {
               "value": 3
              },
              "PREFER_I686": {
               "value": 4
              },
              "REQUIRE_I686": {
               "value": 5
              },
              "PREFER_IA64": {
               "value": 6
              },
              "REQUIRE_IA64": {
               "value": 7
              },
              "PREFER_ARMV7": {
               "value": 8
              },
              "REQUIRE_ARMV7": {
               "value": 9
              },
              "PREFER_ARMV8": {
               "value": 10
              },
              "REQUIRE_ARMV8": {
               "value": 11
              }
             }
            }
           }
          },
          "cpu-vendor": {
           "description": "Host CPU Vendor.",
           "type": {
            "enumeration": {
             "enum": {
              "PREFER_INTEL": {
               "value": 0
              },
              "REQUIRE_INTEL": {
               "value": 1
              },
              "PREFER_AMD": {
               "value": 2
              },
              "REQUIRE_AMD": {
               "value": 3
              }
             }
            }
           }
          },
          "cpu-socket-count": {
           "description": "Number of sockets on the host.",
           "type": {
            "enumeration": {
             "enum": {
              "PREFER_ONE": {
               "value": 0
              },
              "PREFER_TWO": {
               "value": 1
              },
              "REQUIRE_ONE": {
               "value": 2
              },
              "REQUIRE_TWO": {
               "value": 3
              }
             }
            }
           }
          },
          "cpu-core-count": {
           "description": "Number of cores on the host.",
           "type": "uint64"
          },
          "om-cpu-model-string": {
           "description": "Openmano CPU model string",
           "type": "string"
          }
         },
         "leaf-list": {
          "cpu-feature": {
           "description": "List of CPU features.",
           "type": "manotypes:cpu-feature-type"
          },
          "om-cpu-feature": {
           "description": "Openmano CPU features",
           "type": "string"
          }
         }
        }
       }
      },
      "guest-epa": {
       "description": "EPA attributes for the guest",
       "container": {
        "guest-epa": {
         "leaf": {
          "trusted-execution": {
           "description": "This VM should be allocated from trusted pool",
           "type": "boolean"
          },
          "mempage-size": {
           "description": "Memory page allocation size. If a VM requires\nhugepages, it should choose LARGE or SIZE_2MB\nor SIZE_1GB. If the VM prefers hugepages it\nshould chose PREFER_LARGE.\nLARGE        : Require hugepages (either 2MB or 1GB)\nSMALL        : Doesn't require hugepages\nSIZE_2MB     : Requires 2MB hugepages\nSIZE_1GB     : Requires 1GB hugepages\nPREFER_LARGE : Application perfers hugepages",
           "type": {
            "enumeration": {
             "enum": {
              "LARGE": {
               "value": 0
              },
              "SMALL": {
               "value": 1
              },
              "SIZE_2MB": {
               "value": 2
              },
              "SIZE_1GB": {
               "value": 3
              },
              "PREFER_LARGE": {
               "value": 4
              }
             }
            }
           }
          },
          "cpu-pinning-policy": {
           "description": "CPU pinning policy describes association\nbetween virtual CPUs in guest and the\nphysical CPUs in the host.\nDEDICATED : Virtual CPUs are pinned to\n            physical CPUs\nSHARED    : Multiple VMs may share the\n            same physical CPUs.\nANY       : Any policy is acceptable for the VM",
           "type": {
            "enumeration": {
             "enum": {
              "DEDICATED": {
               "value": 0
              },
              "SHARED": {
               "value": 1
              },
              "ANY": {
               "value": 2
              }
             }
            }
           },
           "default": "ANY"
          },
          "cpu-thread-pinning-policy": {
           "description": "CPU thread pinning policy describes how to\nplace the guest CPUs when the host supports\nhyper threads:\nAVOID   : Avoids placing a guest on a host\n          with threads.\nSEPARATE: Places vCPUs on separate cores,\n          and avoids placing two vCPUs on\n          two threads of same core.\nISOLATE : Places each vCPU on a different core,\n          and places no vCPUs from a different\n          guest on the same core.\nPREFER  : Attempts to place vCPUs on threads\n          of the same core.",
           "type": {
            "enumeration": {
             "enum": {
              "AVOID": {
               "value": 0
              },
              "SEPARATE": {
               "value": 1
              },
              "ISOLATE": {
               "value": 2
              },
              "PREFER": {
               "value": 3
              }
             }
            }
           }
          }
         },
         "list": {
          "pcie-device": {
           "description": "List of pcie passthrough devices.",
           "key": "device-id",
           "leaf": {
            "device-id": {
             "description": "Device identifier.",
             "type": "string"
            },
            "count": {
             "description": "Number of devices to attach to the VM.",
             "type": "uint64"
            }
           }
          }
         },
         "choice": {
          "numa-policy": {
           "case": {
            "numa-unware": {
             "leaf": {
              "numa-unware": {
               "type": "empty"
              }
             }
            },
            "numa-aware": {
             "container": {
              "numa-node-policy": {
               "description": "This policy defines numa topology of the\nguest. Specifically identifies if the guest\nshould be run on a host with one numa\nnode or multiple numa nodes. As an example\na guest may want 8 vcpus and 4 GB of\nmemory. But may want the vcpus and memory\ndistributed across multiple numa nodes.\nThe NUMA node 1 may run with 6 vcpus and\n3GB, and NUMA node 2 may run with 2 vcpus\nand 1GB.",
               "leaf": {
                "node-cnt": {
                 "description": "The number of numa nodes to expose to the VM.",
                 "type": "uint16"
                },
                "mem-policy": {
                 "description": "This policy specifies how the memory should\nbe allocated in a multi-node scenario.\nSTRICT    : The memory must be allocated\n            strictly from the memory attached\n            to the NUMA node.\nPREFERRED : The memory should be allocated\n            perferentially from the memory\n            attached to the NUMA node",
                 "type": {
                  "enumeration": {
                   "enum": {
                    "STRICT": {
                     "value": 0
                    },
                    "PREFERRED": {
                     "value": 1
                    }
                   }
                  }
                 }
                }
               },
               "list": {
                "node": {
                 "key": "id",
                 "leaf": {
                  "id": {
                   "description": "NUMA node identification. Typically\nit's 0 or 1",
                   "type": "uint64"
                  },
                  "memory-mb": {
                   "description": "Memory size expressed in MB\nfor this NUMA node.",
                   "type": "uint64"
                  }
                 },
                 "leaf-list": {
                  "vcpu": {
                   "description": "List of vcpus to allocate on\nthis numa node.",
                   "type": "uint64"
                  }
                 },
                 "choice": {
                  "om-numa-type": {
                   "description": "Openmano Numa type selection",
                   "case": {
                    "cores": {
                     "leaf": {
                      "num-cores": {
                       "type": "uint8"
                      }
                     }
                    },
                    "paired-threads": {
                     "container": {
                      "paired-threads": {
                       "leaf": {
                        "num-paired-threads": {
                         "type": "uint8"
                        }
                       },
                       "list": {
                        "paired-thread-ids": {
                         "description": "List of thread pairs to use in case of paired-thread numa",
                         "max-elements": 16,
                         "key": "thread-a",
                         "leaf": {
                          "thread-a": {
                           "type": "uint8"
                          },
                          "thread-b": {
                           "type": "uint8"
                          }
                         }
                        }
                       }
                      }
                     }
                    },
                    "threads": {
                     "leaf": {
                      "num-threads": {
                       "type": "uint8"
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      },
      "provider-network": {
       "container": {
        "provider-network": {
         "description": "Container for the provider network.",
         "leaf": {
          "physical-network": {
           "description": "Name of the phsyical network on which the provider\nnetwork is built.",
           "type": "string"
          },
          "overlay-type": {
           "description": "Type of the overlay network.",
           "type": {
            "enumeration": {
             "enum": {
              "LOCAL": {
               "value": 0
              },
              "FLAT": {
               "value": 1
              },
              "VLAN": {
               "value": 2
              },
              "VXLAN": {
               "value": 3
              },
              "GRE": {
               "value": 4
              }
             }
            }
           }
          },
          "segmentation_id": {
           "description": "Segmentation ID",
           "type": "uint32"
          }
         }
        }
       }
      },
      "monitoring-param": {
       "list": {
        "http-endpoint": {
         "description": "List of http endpoints to be used by monitoring params",
         "key": "path",
         "leaf": {
          "path": {
           "description": "The HTTP path on the management server",
           "type": "string"
          },
          "https": {
           "description": "Pick HTTPS instead of HTTP , Default is false",
           "type": "boolean",
           "default": "false"
          },
          "port": {
           "description": "The HTTP port to connect to",
           "type": "inet:port-number"
          },
          "username": {
           "description": "The HTTP basic auth username",
           "type": "string"
          },
          "password": {
           "description": "The HTTP basic auth password",
           "type": "string"
          },
          "polling_interval_secs": {
           "description": "The HTTP polling interval in seconds",
           "type": "uint8",
           "default": "2"
          },
          "method": {
           "description": "This is the method to be performed at the uri.\nGET by default for action",
           "type": "manotypes:http-method",
           "default": "GET"
          }
         },
         "list": {
          "headers": {
           "description": "Custom HTTP headers to put on HTTP request",
           "key": "key",
           "leaf": {
            "key": {
             "description": "HTTP header key",
             "type": "string"
            },
            "value": {
             "description": "HTTP header value",
             "type": "string"
            }
           }
          }
         }
        },
        "monitoring-param": {
         "description": "List of monitoring parameters at the NS level",
         "key": "id",
         "leaf": {
          "id": {
           "type": "string"
          },
          "name": {
           "type": "string"
          },
          "http-endpoint-ref": {
           "type": {
            "leafref": {
             "path": "../../http-endpoint/path"
            }
           }
          },
          "json-query-method": {
           "type": "manotypes:json-query-method",
           "default": "NAMEKEY"
          },
          "description": {
           "type": "string"
          },
          "group-tag": {
           "description": "A simple tag to group monitoring parameters",
           "type": "string"
          },
          "value-type": {
           "type": "manotypes:param-value-type",
           "default": "INT"
          },
          "value-integer": {
           "description": "Current value for an integer parameter",
           "type": "int64"
          },
          "value-decimal": {
           "description": "Current value for a decimal parameter",
           "type": {
            "decimal64": {
             "fraction-digits": "4"
            }
           }
          },
          "value-string": {
           "description": "Current value for a string parameter",
           "type": "string"
          },
          "widget-type": {
           "type": "manotypes:widget-type"
          },
          "units": {
           "type": "string"
          }
         },
         "container": {
          "json-query-params": {
           "leaf": {
            "json-path": {
             "description": "The jsonpath to use to extract value from JSON structure",
             "type": "string"
            },
            "object-path": {
             "description": "The objectpath to use to extract value from JSON structure",
             "type": "string"
            }
           }
          },
          "numeric-constraints": {
           "leaf": {
            "min-value": {
             "description": "Minimum value for the parameter",
             "type": "uint64"
            },
            "max-value": {
             "description": "Maxium value for the parameter",
             "type": "uint64"
            }
           }
          },
          "text-constraints": {
           "leaf": {
            "min-length": {
             "description": "Minimum string length for the parameter",
             "type": "uint8"
            },
            "max-length": {
             "description": "Maximum string length for the parameter",
             "type": "uint8"
            }
           }
          }
         }
        }
       }
      },
      "control-param": {
       "list": {
        "control-param": {
         "description": "List of control parameters to manage and\nupdate the running configuration of the VNF",
         "key": "id",
         "leaf": {
          "id": {
           "type": "string"
          },
          "name": {
           "type": "string"
          },
          "description": {
           "type": "string"
          },
          "group-tag": {
           "description": "A simple tag to group control parameters",
           "type": "string"
          },
          "min-value": {
           "description": "Minimum value for the parameter",
           "type": "uint64"
          },
          "max-value": {
           "description": "Maxium value for the parameter",
           "type": "uint64"
          },
          "current-value": {
           "description": "Current value for the parameter",
           "type": "uint64"
          },
          "step-value": {
           "description": "Step value for the parameter",
           "type": "uint64"
          },
          "units": {
           "type": "string"
          },
          "widget-type": {
           "type": "manotypes:widget-type"
          },
          "url": {
           "description": "This is the URL where to perform the operation",
           "type": "inet:uri"
          },
          "method": {
           "description": "This is the method to be performed at the uri.\nPOST by default for action",
           "type": "manotypes:http-method",
           "default": "POST"
          },
          "payload": {
           "description": "This is the operation payload or payload template as stringified\nJSON. This field provides the data  to be sent for this operation\ncall",
           "type": "string"
          }
         }
        }
       }
      },
      "action-param": {
       "list": {
        "action-param": {
         "description": "List of action parameters to\ncontrol VNF",
         "key": "id",
         "leaf": {
          "id": {
           "type": "string"
          },
          "name": {
           "type": "string"
          },
          "description": {
           "type": "string"
          },
          "group-tag": {
           "description": "A simple tag to group monitoring parameter",
           "type": "string"
          },
          "url": {
           "description": "This is the URL where to perform the operation",
           "type": "inet:uri"
          },
          "method": {
           "description": "This is the method to be performed at the uri.\nPOST by default for action",
           "type": "manotypes:http-method",
           "default": "POST"
          },
          "payload": {
           "description": "This is the operation payload or payload template to be sent in\nthe data for this operation call",
           "type": "string"
          }
         }
        }
       }
      },
      "input-parameter": {
       "description": "",
       "list": {
        "input-parameter": {
         "description": "List of input parameters",
         "key": "xpath",
         "leaf": {
          "xpath": {
           "description": "A an xpath that specfies which element in a descriptor is to be\nmodified.",
           "type": "string"
          },
          "value": {
           "description": "The value that the element specified by the xpath should take when a\nrecord is created.",
           "type": "string"
          }
         }
        }
       }
      },
      "input-parameter-xpath": {
       "list": {
        "input-parameter-xpath": {
         "description": "List of xpaths to parameters inside the NSD\nthe can be customized during the instantiation.",
         "key": "xpath",
         "leaf": {
          "xpath": {
           "description": "An xpath that specifies the element in a descriptor.",
           "type": "string"
          },
          "label": {
           "description": "A descriptive string",
           "type": "string"
          }
         }
        }
       }
      },
      "nfvi-metrics": {
       "container": {
        "vcpu": {
         "leaf": {
          "label": {
           "description": "Label to show in UI",
           "type": "string",
           "default": "VCPU"
          },
          "total": {
           "description": "The total number of VCPUs available.",
           "type": "uint64"
          },
          "utilization": {
           "description": "The VCPU utilization (percentage).",
           "type": {
            "decimal64": {
             "fraction-digits": "2",
             "range": "0 .. 100"
            }
           }
          }
         }
        },
        "memory": {
         "leaf": {
          "label": {
           "description": "Label to show in UI",
           "type": "string",
           "default": "MEMORY"
          },
          "used": {
           "description": "The amount of memory (bytes) currently in use.",
           "type": "uint64"
          },
          "total": {
           "description": "The amount of memory (bytes) available.",
           "type": "uint64"
          },
          "utilization": {
           "description": "The memory utilization (percentage).",
           "type": {
            "decimal64": {
             "fraction-digits": "2",
             "range": "0 .. 100"
            }
           }
          }
         }
        },
        "storage": {
         "leaf": {
          "label": {
           "description": "Label to show in UI",
           "type": "string",
           "default": "STORAGE"
          },
          "used": {
           "description": "The amount of storage (bytes) currently in use.",
           "type": "uint64"
          },
          "total": {
           "description": "The amount of storage (bytes) available.",
           "type": "uint64"
          },
          "utilization": {
           "description": "The storage utilization (percentage).",
           "type": {
            "decimal64": {
             "fraction-digits": "2",
             "range": "0 .. 100"
            }
           }
          }
         }
        },
        "external-ports": {
         "leaf": {
          "label": {
           "description": "Label to show in UI",
           "type": "string",
           "default": "EXTERNAL PORTS"
          },
          "total": {
           "description": "The total number of external ports.",
           "type": "uint64"
          }
         }
        },
        "internal-ports": {
         "leaf": {
          "label": {
           "description": "Label to show in UI",
           "type": "string",
           "default": "INTERNAL PORTS"
          },
          "total": {
           "description": "The total number of internal ports.",
           "type": "uint64"
          }
         }
        },
        "network": {
         "leaf": {
          "label": {
           "description": "Label to show in UI",
           "type": "string",
           "default": "NETWORK TRAFFIC"
          }
         },
         "container": {
          "incoming": {
           "leaf": {
            "label": {
             "description": "Label to show in UI",
             "type": "string",
             "default": "INCOMING NETWORK TRAFFIC"
            },
            "bytes": {
             "description": "The cumulative number of incoming bytes.",
             "type": "uint64"
            },
            "packets": {
             "description": "The cumulative number of incoming packets.",
             "type": "uint64"
            },
            "byte-rate": {
             "description": "The current incoming byte-rate (bytes per second).",
             "type": {
              "decimal64": {
               "fraction-digits": "2"
              }
             }
            },
            "packet-rate": {
             "description": "The current incoming packet (packets per second).",
             "type": {
              "decimal64": {
               "fraction-digits": "2"
              }
             }
            }
           }
          },
          "outgoing": {
           "leaf": {
            "label": {
             "description": "Label to show in UI",
             "type": "string",
             "default": "OUTGOING NETWORK TRAFFIC"
            },
            "bytes": {
             "description": "The cumulative number of outgoing bytes.",
             "type": "uint64"
            },
            "packets": {
             "description": "The cumulative number of outgoing packets.",
             "type": "uint64"
            },
            "byte-rate": {
             "description": "The current outgoing byte-rate (bytes per second).",
             "type": {
              "decimal64": {
               "fraction-digits": "2"
              }
             }
            },
            "packet-rate": {
             "description": "The current outgoing packet (packets per second).",
             "type": {
              "decimal64": {
               "fraction-digits": "2"
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 "extension": {
  "module": {
   "argument": "name",
   "include": "0..n",
   "prefix": "0..1",
   "anyxml": "0..n",
   "augment": "0..n",
   "choice": "0..n",
   "contact": "0..1",
   "container": "0..n",
   "description": "0..1",
   "deviation": "0..n",
   "extension": "0..n",
   "feature": "0..n",
   "grouping": "0..n",
   "identity": "0..n",
   "import": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "namespace": "0..1",
   "notification": "0..n",
   "organization": "0..1",
   "reference": "0..1",
   "revision": "0..n",
   "rpc": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "yang-version": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var changes, match, ref, synth, target;\n  synth = this.require('data-synth');\n  ref = params.augment;\n  for (target in ref) {\n    changes = ref[target];\n    match = this.locate(ctx, target);\n    if (match == null) {\n      continue;\n    }\n    synth.copy(match, changes);\n  }\n  return delete this.source[params.prefix];\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var k, m, modules, ref, synth, v;\n  synth = this.require('data-synth');\n  modules = {};\n  ref = params[\"import\"];\n  for (k in ref) {\n    v = ref[k];\n    modules[k] = children[k];\n    delete children[k];\n  }\n  m = (synth.Store(params, function() {\n    return this.set({\n      name: arg,\n      modules: modules\n    });\n  })).bind(children);\n  this.define('module', arg, m);\n  return m;\n}"
   }
  },
  "prefix": {
   "argument": "value",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return this.source[arg] = this.source;\n}"
   }
  },
  "include": {
   "argument": "module",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var k, m, ref, ref1, ref2, results, v;\n  m = this.preprocess(this.resolve('dependencies', arg));\n  ref = m.extension;\n  for (k in ref) {\n    v = ref[k];\n    this.define('extension', k, v);\n  }\n  ref1 = m.typedef;\n  for (k in ref1) {\n    v = ref1[k];\n    this.define('typedef', k, v);\n  }\n  ref2 = m.schema;\n  results = [];\n  for (k in ref2) {\n    v = ref2[k];\n    results.push(ctx[k] = v);\n  }\n  return results;\n}"
   },
   "revision-date": "0..1"
  },
  "augment": {
   "anyxml": "0..n",
   "case": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "uses": "0..n",
   "when": "0..1",
   "argument": "target-node"
  },
  "belongs-to": {
   "prefix": 1,
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return this.source[params.prefix] = this.source;\n}"
   },
   "argument": "module"
  },
  "bit": {
   "description": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "position": "0..1",
   "argument": "name"
  },
  "case": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "uses": "0..n",
   "when": "0..1",
   "argument": "name"
  },
  "choice": {
   "anyxml": "0..n",
   "case": "0..n",
   "config": "0..1",
   "container": "0..n",
   "default": "0..1",
   "description": "0..1",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "mandatory": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "when": "0..1",
   "argument": "condition"
  },
  "config": {
   "preprocess": {
    "!js/function": "function (arg, p, ctx) {\n  return ctx.config = arg === true || arg === 'true';\n}"
   },
   "argument": "value"
  },
  "container": {
   "anyxml": "0..n",
   "choice": "0..n",
   "config": "0..1",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "must": "0..n",
   "presence": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "uses": "0..n",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return (synth.Object(params)).bind(children);\n}"
   },
   "argument": "name"
  },
  "deviate": {
   "config": "0..1",
   "default": "0..1",
   "mandatory": "0..1",
   "max-elements": "0..1",
   "min-elements": "0..1",
   "must": "0..n",
   "type": "0..1",
   "unique": "0..1",
   "units": "0..1",
   "argument": "value"
  },
  "deviation": {
   "description": "0..1",
   "deviate": "1..n",
   "reference": "0..1",
   "argument": "target-node"
  },
  "enum": {
   "description": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "value": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if (params.value == null) {\n    if (this.enumValue == null) {\n      this.enumValue = 0;\n    }\n    params.value = this.enumValue++;\n  } else {\n    params.value = Number(params.value);\n    this.enumValue = params.value + 1;\n  }\n  return ctx[\"enum\"][arg] = params;\n}"
   },
   "argument": "name"
  },
  "feature": {
   "description": "0..1",
   "if-feature": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if (params.status === 'unavailable') {\n    console.warn(\"feature \" + arg + \" is unavailable\");\n    if (typeof ctx.feature === 'object') {\n      return delete ctx.feature[arg];\n    } else {\n      return delete ctx.feature;\n    }\n  }\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var feature;\n  feature = this.resolve('feature', arg);\n  return null;\n}"
   },
   "argument": "name"
  },
  "grouping": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "uses": "0..n",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('grouping', arg, params);\n}"
   },
   "argument": "name"
  },
  "identity": {
   "base": "0..1",
   "description": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('identity', arg, params);\n}"
   },
   "argument": "name"
  },
  "if-feature": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if ((this.resolve('feature', arg)) == null) {\n    return ctx.status = 'unavailable';\n  }\n}"
   },
   "argument": "name"
  },
  "import": {
   "prefix": 1,
   "revision-date": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var copy, k, m, original, ref, ref1, rev, schema, source, synth, v;\n  synth = this.require('data-synth');\n  schema = this.resolve('dependencies', arg, false);\n  if (schema == null) {\n    console.warn(\"no explicit dependency for \" + arg + \" defined, searching local filesystem\");\n    schema = this.parse(\"!yang \" + arg + \".yang\", this.source);\n    if (schema != null) {\n      this.define('dependencies', arg, schema);\n      source = this.source.parent;\n      while ((source.parent != null) && source.parent.name !== 'yangforge') {\n        source = source.parent;\n      }\n      if (source.dependencies == null) {\n        source.dependencies = {};\n      }\n      source.dependencies[arg] = schema;\n    }\n  }\n  m = this.preprocess(schema);\n  if (m == null) {\n    throw this.error(\"unable to resolve '\" + arg + \"' in dependencies\", 'import');\n  }\n  rev = params['revision-date'];\n  if ((rev != null) && !(rev in m.revision)) {\n    throw this.error(\"requested \" + rev + \" not available in \" + arg, 'import');\n  }\n  ref = m.extension;\n  for (k in ref) {\n    v = ref[k];\n    if (!(v.override === true)) {\n      continue;\n    }\n    original = this.resolve('extension', k);\n    copy = synth.copy({}, v);\n    copy.origin = synth.copy({}, (ref1 = original.origin) != null ? ref1 : original);\n    delete copy.override;\n    this.define('extension', k, copy);\n  }\n  return this.source[params.prefix] = m;\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children, ctx) {\n  return this.compile(this.source[params.prefix], this.source);\n}"
   },
   "argument": "module"
  },
  "input": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "grouping": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return (synth.Object(params)).bind(children);\n}"
   }
  },
  "leaf": {
   "config": "0..1",
   "default": "0..1",
   "description": "0..1",
   "if-feature": "0..n",
   "mandatory": "0..1",
   "must": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "type": "0..1",
   "units": "0..1",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return synth.Property(params, function() {\n    if (children.type != null) {\n      return this.set({\n        type: children.type\n      });\n    }\n  });\n}"
   },
   "argument": "name"
  },
  "leaf-list": {
   "config": "0..1",
   "description": "0..1",
   "if-feature": "0..n",
   "max-elements": "0..1",
   "min-elements": "0..1",
   "must": "0..n",
   "ordered-by": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "type": "0..1",
   "units": "0..1",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return synth.List(params, function() {\n    if (children.type != null) {\n      return this.set({\n        type: children.type\n      });\n    }\n  });\n}"
   },
   "argument": "name"
  },
  "list": {
   "anyxml": "0..n",
   "choice": "0..n",
   "config": "0..1",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "key": "0..1",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "max-elements": "0..1",
   "min-elements": "0..1",
   "must": "0..n",
   "ordered-by": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "unique": "0..1",
   "uses": "0..n",
   "when": "0..1",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var item, synth;\n  synth = this.require('data-synth');\n  item = (synth.Object(null)).bind(children);\n  return (synth.List(params)).set({\n    type: item\n  });\n}"
   },
   "argument": "name"
  },
  "mandatory": {
   "preprocess": {
    "!js/function": "function (arg, p, ctx) {\n  return ctx.mandatory = arg === true || arg === 'true';\n}"
   },
   "argument": "value"
  },
  "max-elements": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  if (arg !== 'unbounded') {\n    return ctx['max-elements'] = Number(arg);\n  }\n}"
   },
   "argument": "value"
  },
  "min-elements": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx['min-elements'] = Number(arg);\n}"
   },
   "argument": "value"
  },
  "must": {
   "description": "0..1",
   "error-app-tag": "0..1",
   "error-message": "0..1",
   "reference": "0..1",
   "argument": "condition"
  },
  "notification": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "uses": "0..n",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('notification', arg, params);\n}"
   },
   "argument": "event"
  },
  "output": {
   "anyxml": "0..n",
   "choice": "0..n",
   "container": "0..n",
   "grouping": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var synth;\n  synth = this.require('data-synth');\n  return (synth.Object(params)).bind(children);\n}"
   }
  },
  "path": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx.path = arg.replace(/[_]/g, '.');\n}"
   },
   "argument": "value"
  },
  "pattern": {
   "construct": {
    "!js/function": "function (arg, params, children, ctx) {\n  if (ctx.patterns == null) {\n    ctx.patterns = [];\n  }\n  return ctx.patterns.push(new RegExp(arg));\n}"
   },
   "argument": "value"
  },
  "refine": {
   "default": "0..1",
   "description": "0..1",
   "reference": "0..1",
   "config": "0..1",
   "mandatory": "0..1",
   "presence": "0..1",
   "must": "0..n",
   "min-elements": "0..1",
   "max-elements": "0..1",
   "units": "0..1",
   "argument": "target-node"
  },
  "require-instance": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx['require-instance'] = arg === true || arg === 'true';\n}"
   },
   "argument": "value"
  },
  "revision": {
   "description": "0..1",
   "reference": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return this.define('revision', arg, params);\n}"
   },
   "argument": "date"
  },
  "rpc": {
   "description": "0..1",
   "grouping": "0..n",
   "if-feature": "0..n",
   "input": "0..1",
   "output": "0..1",
   "reference": "0..1",
   "status": "0..1",
   "typedef": "0..n",
   "construct": {
    "!js/function": "function (arg, params, children) {\n  var func, method, ref, ref1, request, response, synth;\n  synth = this.require('data-synth');\n  func = this.resolve('rpc', arg, false);\n  if (func == null) {\n    func = function(input, output, done) {\n      return done(\"No control logic found for '\" + arg + \"' rpc operation\");\n    };\n  }\n  request = (ref = children.input) != null ? ref : synth.Meta;\n  response = (ref1 = children.output) != null ? ref1 : synth.Meta;\n  method = function(data, resolve, reject) {\n    var e, error, input, output;\n    if (typeof console.debug === \"function\") {\n      console.debug(\"executing rpc \" + arg + \"...\");\n    }\n    try {\n      input = new request(data, this);\n      output = new response(null, this);\n    } catch (error) {\n      e = error;\n      return reject(e);\n    }\n    return func.call(this, input, output, function(e) {\n      if (e == null) {\n        return resolve(output);\n      } else {\n        return reject(e);\n      }\n    });\n  };\n  method.params = params;\n  method.input = request;\n  method.output = response;\n  return method;\n}"
   },
   "argument": "name"
  },
  "submodule": {
   "argument": "name",
   "anyxml": "0..n",
   "augment": "0..n",
   "belongs-to": "0..1",
   "choice": "0..n",
   "contact": "0..1",
   "container": "0..n",
   "description": "0..1",
   "deviation": "0..n",
   "extension": "0..n",
   "feature": "0..n",
   "grouping": "0..n",
   "identity": "0..n",
   "import": "0..n",
   "include": "0..n",
   "leaf": "0..n",
   "leaf-list": "0..n",
   "list": "0..n",
   "notification": "0..n",
   "organization": "0..1",
   "reference": "0..1",
   "revision": "0..n",
   "rpc": "0..n",
   "typedef": "0..n",
   "uses": "0..n",
   "yang-version": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var k, v;\n  for (k in params) {\n    v = params[k];\n    ctx[k] = v;\n  }\n  return delete ctx.submodule;\n}"
   }
  },
  "status": {
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return ctx.status != null ? ctx.status : ctx.status = arg;\n}"
   },
   "argument": "value"
  },
  "type": {
   "base": "0..1",
   "bit": "0..n",
   "enum": "0..n",
   "fraction-digits": "0..1",
   "length": "0..1",
   "path": "0..1",
   "pattern": "0..n",
   "range": "0..1",
   "require-instance": "0..1",
   "type": "0..n",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  return delete this.enumValue;\n}"
   },
   "construct": {
    "!js/function": "function (arg, params, children, ctx) {\n  var key, mparams, ref, ref1, synth, typedef, value;\n  synth = this.require('data-synth');\n  typedef = this.resolve('typedef', arg);\n  if (typedef == null) {\n    throw this.error(\"unable to resolve typedef for \" + arg);\n  }\n  switch (false) {\n    case typedef.construct == null:\n      ctx.type = typedef.construct(params, this, arguments.callee);\n      break;\n    case typeof typedef.type !== 'object':\n      ref = typedef.type;\n      for (key in ref) {\n        value = ref[key];\n        mparams = synth.copy({}, value);\n        synth.copy(mparams, params);\n        arguments.callee.call(this, key, mparams, children, ctx);\n      }\n      break;\n    case typeof typedef.type !== 'string':\n      arguments.callee.call(this, typedef.type, params, children, ctx);\n  }\n  if ((ref1 = ctx.type) != null) {\n    ref1.toString = function() {\n      return arg;\n    };\n  }\n  return null;\n}"
   },
   "argument": "name"
  },
  "typedef": {
   "default": "0..1",
   "description": "0..1",
   "units": "0..1",
   "type": "0..1",
   "reference": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params) {\n  return this.define('typedef', arg, params);\n}"
   },
   "argument": "name"
  },
  "uses": {
   "augment": "0..n",
   "description": "0..1",
   "if-feature": "0..n",
   "refine": "0..n",
   "reference": "0..1",
   "status": "0..1",
   "when": "0..1",
   "preprocess": {
    "!js/function": "function (arg, params, ctx) {\n  var changes, grouping, k, match, ref, ref1, synth, target, v;\n  synth = this.require('data-synth');\n  grouping = synth.copy({}, this.resolve('grouping', arg));\n  delete grouping.description;\n  delete grouping.reference;\n  synth.copy(ctx, grouping);\n  ref = params.refine;\n  for (target in ref) {\n    changes = ref[target];\n    match = this.locate(ctx, target);\n    if (match == null) {\n      continue;\n    }\n    for (k in changes) {\n      v = changes[k];\n      match[k] = v;\n    }\n  }\n  ref1 = params.augment;\n  for (target in ref1) {\n    changes = ref1[target];\n    match = this.locate(ctx, target);\n    if (match == null) {\n      continue;\n    }\n    synth.copy(match, changes);\n  }\n  if (typeof ctx.uses === 'object') {\n    return delete ctx.uses[arg];\n  } else {\n    return delete ctx.uses;\n  }\n}"
   },
   "argument": "name"
  },
  "when": {
   "description": "0..1",
   "reference": "0..1",
   "argument": "condition"
  },
  "anyxml": {},
  "base": {
   "argument": "name"
  },
  "contact": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "default": {
   "argument": "value"
  },
  "description": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "error-app-tag": {
   "argument": "value"
  },
  "error-message": {
   "argument": {
    "value": {
     "yin-element": "true"
    }
   }
  },
  "fraction-digits": {
   "argument": "value"
  },
  "key": {
   "argument": "value"
  },
  "length": {
   "argument": "value"
  },
  "namespace": {
   "argument": "uri"
  },
  "ordered-by": {
   "argument": "value"
  },
  "organization": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "position": {
   "argument": "value"
  },
  "presence": {
   "argument": "value"
  },
  "range": {
   "argument": "value"
  },
  "reference": {
   "argument": {
    "text": {
     "yin-element": "true"
    }
   }
  },
  "revision-date": {
   "argument": "date"
  },
  "unique": {
   "argument": "tag"
  },
  "units": {
   "argument": "value"
  },
  "value": {
   "argument": "value"
  },
  "yang-version": {
   "argument": "value"
  },
  "yin-element": {
   "argument": "value"
  }
 },
 "pkgdir": "/Users/onvelocity/rift-composer/webapp/schemas/yang",
 "module": {}
}