#!/bin/bash
# 
#   Copyright 2016 RIFT.IO Inc
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# Author(s): Jeremy Mordkoff, Lezz Giles
# Creation Date: 08/29/2016
# 
# This script tries to follow https://google.github.io/styleguide/shell.xml
#

# This is a top-level installer for the RIFT.io launchpad
#
# Arguments and options: use -h or --help
#
# dependencies -- requires sudo rights

# Defensive bash programming flags
set -o errexit    # Exit on any error
trap 'echo "ERROR: Command failed at $BASH_SOURCE:$LINENO: \"$BASH_COMMAND\"" >&2' ERR

set -o nounset    # Expanding an unset variable is an error.  Variables must be
                  # set before they can be used.

###############################################################################
# Options and arguments

params="$(getopt -o h -l help --name "$0" -- "$@")"
if [ $? != 0 ] ; then
    echo "Failed parsing options." >&2
    exit 1
fi

eval set -- $params

while true; do
    case "$1" in
	-h|--help)
	    echo
	    echo "NAME:"
	    echo "  $0"
	    echo
	    echo "SYNOPSIS:"
	    echo "  $0 -h|--help"
	    echo "  $0 [<LAUNCHPAD_REPOSITORY> [<LAUNCHPAD_VERSION>]]"
	    echo
	    echo "DESCRIPTION:"
	    echo "  Prepare current system to run launchpad as a service."
	    echo "  LAUNCHPAD_REPOSITORY (optional): name of the RIFT.ware repository."
	    echo "  LAUNCHPAD_VERSION (optional): version of the platform packages to be installed."
	    echo
	    exit 0;;
	--) shift; break;;
	*) echo "Not implemented: $1" >&2; exit 1;;
    esac
done

###############################################################################
# Find the platform

if grep -qi "Ubuntu 16.04" /etc/issue; then
    readonly PLATFORM=ub16
elif grep -qi "Fedora release 20" /etc/issue; then
    readonly PLATFORM=fc20
else
    echo "This installer only runs on Ubuntu 16.04 or Fedora release 20." >&2
    exit 1
fi

# Temporary check until we properly support fc20.  Allow installation of
# an explicit build number from an explicit repo, but disallow installing from
# defaults.
if [[ $PLATFORM == fc20 && $# -ne 2 ]]; then
    echo "You cannot currently use this script to install launchpad on Fedora Core 20."
    echo "This functionality is coming soon."
    exit 1
fi

# Turn this on after handling options, so the output doesn't get cluttered.
set -x             # Print commands before executing them

###############################################################################
# Set up repo and version

if [[ $PLATFORM == ub16 ]]; then
    readonly PLATFORM_REPOSITORY=${1:-release}
    readonly PLATFORM_VERSION=${2:-4.3.3.0.51336}
elif [[ $PLATFORM == fc20 ]]; then
    readonly PLATFORM_REPOSITORY=${1:-release}
    readonly PLATFORM_VERSION=${2:-4.3.3.0.NOT.YET}
else
    echo "Internal error: unknown platform $PLATFORM"
    exit 1
fi

###############################################################################
# Main block

if [[ $PLATFORM == ub16 ]]; then
    # enable the right repos
    curl http://repos.riftio.com/public/xenial-riftware-public-key | sudo apt-key add -
    sudo curl -o /etc/apt/sources.list.d/${PLATFORM_REPOSITORY}.list \
	 http://buildtracker.riftio.com/repo_file/ub16/${PLATFORM_REPOSITORY}/ 
    sudo apt-get update
        
    # install the RIFT platform code:
    sudo apt-get install -y \
	 rw.tools-container-tools=${PLATFORM_VERSION} \
	 rw.tools-scripts=${PLATFORM_VERSION} \
	 \
	 rw.toolchain-rwbase=${PLATFORM_VERSION} \
	 rw.toolchain-rwtoolchain=${PLATFORM_VERSION} \
	 rw.core.mgmt-mgmt=${PLATFORM_VERSION} \
	 rw.core.util-util=${PLATFORM_VERSION} \
	 rw.core.rwvx-rwvx=${PLATFORM_VERSION} \
	 rw.core.rwvx-rwdts=${PLATFORM_VERSION} \
	 rw.automation.core-RWAUTO=${PLATFORM_VERSION} \
	 \
	 rw.core.mano-rwcal_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwconfig_agent_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwlaunchpad_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-mano_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-common-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwsdn_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-mano-types_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-cloudsim-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rw_conman_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcalproxytasklet-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwlaunchpad-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-openmano-vimconnector-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-propcloud1-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-lpmocklet_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwmon-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcloud_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-openstack-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rw.core.mano_foss=${PLATFORM_VERSION} \
	 rw.core.mano-rwmon_yang_ylib-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcm-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-mock-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwmano_examples-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-cloudsimproxy-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-models-1.0=${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-aws-1.0=${PLATFORM_VERSION} \
	 \
	 rw.ui-skyquake=${PLATFORM_VERSION} \
     \
     rw.ext.util-rw.ext.util_foss=${PLATFORM_VERSION} \

    
    sudo chmod 777 /usr/rift /usr/rift/usr/share
    
elif [[ $PLATFORM == fc20 ]]; then
    
    # enable the right repos
    sudo curl -o /etc/yum.repos.d/${PLATFORM_REPOSITORY}.repo \
	 http://buildtracker.riftio.com/repo_file/fc20/${PLATFORM_REPOSITORY}/
    
    temp=$(mktemp -d /tmp/rw.XXX)
    pushd $temp
    
    yumdownloader \
	 rw.tools-container-tools-${PLATFORM_VERSION} \
	 rw.tools-scripts-${PLATFORM_VERSION} \
	 \
	 rw.toolchain-rwbase-${PLATFORM_VERSION} \
	 rw.toolchain-rwtoolchain-${PLATFORM_VERSION} \
	 rw.core.mgmt-mgmt-${PLATFORM_VERSION} \
	 rw.core.util-util-${PLATFORM_VERSION} \
	 rw.core.rwvx-rwvx-${PLATFORM_VERSION} \
	 rw.core.rwvx-rwdts-${PLATFORM_VERSION} \
	 rw.automation.core-RWAUTO-${PLATFORM_VERSION} \
	 \
	 rw.core.mano-rwcal_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwconfig_agent_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwlaunchpad_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-mano_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-common-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwsdn_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-mano-types_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-cloudsim-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rw_conman_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcalproxytasklet-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwlaunchpad-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-openmano-vimconnector-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-propcloud1-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-lpmocklet_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwmon-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcloud_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-openstack-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rw.core.mano_foss-${PLATFORM_VERSION} \
	 rw.core.mano-rwmon_yang_ylib-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcm-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-mock-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwmano_examples-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-cloudsimproxy-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-models-1.0-${PLATFORM_VERSION} \
	 rw.core.mano-rwcal-aws-1.0-${PLATFORM_VERSION} \
	 rw.ui-skyquake-${PLATFORM_VERSION} \
     \
     rw.ext.util-rw.ext.util_foss-${PLATFORM_VERSION} \


    # Install one at a time so that pre-installed packages will not cause a failure
    for pkg in *rpm; do
	# Check to see if the package is already installed; do not try to install
	# it again if it does, since this causes rpm -i to return failure.
	if rpm -q $(rpm -q -p $pkg) >/dev/null; then
	    echo "WARNING: package already installed: $pkg"
	else
	    sudo rpm -i --replacefiles --nodeps $pkg
	fi
    done
    
    popd
    rm -rf $temp
    
    # this file gets in the way of the one generated by the build
    sudo rm -f /usr/rift/usr/lib/libmano_yang_gen.so

    sudo chmod 777 /usr/rift /usr/rift/usr/share

else
    echo "Internal error: unknown platform $PLATFORM" >&2
    exit 1
fi

# Install all required packages; this includes the RIFT platform code and tools
# and install of the packages required to run launchpad.
sudo /usr/rift/container_tools/mkcontainer --modes ui --modes ext --repo ${PLATFORM_REPOSITORY} --rw-version ${PLATFORM_VERSION}

# install the launchpad systemd service
# these files should work on both ub16 and fc20

cat <<EOF | sudo tee /etc/systemd/system/launchpad.service
[Unit]
Description=RIFT.ware Launchpad
After=network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/bin/sh -c 'nohup sudo -b -H /usr/rift/rift-shell -r -i /usr/rift -a /usr/rift/.artifacts -- ./demos/launchpad.py'
ExecStop=/bin/sh -c 'killall rwmain'

[Install]
WantedBy=default.target
EOF

sudo chmod 664 /etc/systemd/system/launchpad.service

if ! sudo systemctl daemon-reload; then
    echo "WARNING: Not able to reload daemons: this must be run in a privileged container: sudo systemctl daemon-reload ; sudo systemctl enable launchpad.service"
else
    # enable launchpad at boot - should always succeed in a privileged container
    sudo systemctl enable launchpad.service
fi

# start launchpad?
#sudo systemctl start launchpad.service

echo
echo "RIFT.ware Launchpad is now installed. Run 'sudo systemctl start launchpad.service' to start the service."
echo
