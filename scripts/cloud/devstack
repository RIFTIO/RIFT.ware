#! /bin/bash

# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#
# Author(s): Anil Gunturu
# Creation Date: 07/24/2014
# 

# This script is used for installing openstack
# using devstack on a grunt machine.
# This script should be run as regular user.
# At high level this script does the following:
# - Clone the OpenStack repository
# - Run the devstack install scripts as root using the ssh_root script

set -e

function print_usage() {
    echo "Usage: $0 [-h HOST_IP] [-p PUBLIC_INTERFACE] [-f FLAT_INTERFACE] [-t FLOATING_RANGE] "
    echo "       Mandatory arguments"
    echo "       -h|--host-ip HOST_IP"
    echo "       Mandatory arguments during installation when enabling Neutron"
    echo "       -t|--floating-range FLOATING_RANGE"
    echo "       Mandatory arguments for cmpute node installation"
    echo "       -c|--controller-ip CONTROLLER_IP"
    echo "       Optional arguments"
    echo "       -p|--public-interface PUBLIC_INTERFACE"
    echo "       -r|--repo-path Path to an already cloned repository"
    echo "       -f|--flat-interafce FLAT_INTERFACE"
    echo "       -u|--unstack Uninstall openstack"
    echo "       -j|--rejoin Rejoin openstack"
    echo "       -l|--legacy Legacy devstack"
    echo "       -n|--neutron PUBLIC_NETWORK_GATEWAY FLOATING_ADDR_START FLOATING_ADDR_END Enable Neutron for networking"
    exit 1
}

CURR_DIR=`pwd`
SSH_ROOT=/usr/rift/bin/ssh_root

##
# Set defaults
##
PUBLIC_INTERFACE=eth0
FLAT_INTERFACE=p785p1
FIXED_NETWORK_SIZE=256
FLOATING_RANGE=10.64.0.128/27
MULTI_HOST=1
UNSTACK=false
REJOIN=false
LEGACY=false
NEUTRON_ENABLED=false
FLOATING_ADDR_START=10.64.0.130
FLOATING_ADDR_END=10.64.0.140
PUBLIC_NETWORK_GATEWAY=10.64.0.129
CONTROLLER_IP=""
CONTROLLER_IP_SET=false

##
# Parse options
##
while [[ $# > 0 ]]
do
key="$1"
shift
case $key in
    -h|--host-ip)
    HOST_IP=$1
    shift
    ;;
    -r|--repo-path)
    RIFTSTACK_DIR=$1
    shift
    ;;
    -p|--public-interface)
    PUBLIC_INTERFACE=$1
    shift
    ;;
    -f|--flat-interface)
    FLAT_INTERFACE=$1
    shift
    ;;
    -t|--floating-range)
    FLOATING_RANGE=$1
    shift
    ;;
    -u|--unstack)
    UNSTACK=true
    ;;
    -j|--rejoin)
    REJOIN=true
    ;;
    -l|--legacy)
    LEGACY=true
    ;;
    -n|--neutron)
    NEUTRON_ENABLED=true
    PUBLIC_NETWORK_GATEWAY=$1
    FLOATING_ADDR_START=$2
    FLOATING_ADDR_END=$3
    shift
    shift
    shift
    ;;
    -c|--controller-ip)
    CONTROLLER_IP=$1
    CONTROLLER_IP_SET=true
    shift
    ;;
    *)
    print_usage
    ;;
esac
done

if [[ "$HOST_IP" == "" ]]; then
    echo "Must specify the host ip address using -h option"
    print_usage
fi

if [[ "$HOST_IP" =~ ^[0-9.]+$ ]]; then
    echo using IP $HOST_IP
else
    echo "MUST specify the host IP"
    print_usage
fi

if [[ "$CONTROLLER_IP" == "" ]]; then
    # if the controller ip is not explicitly specified, 
    # the current install is for controller node
    CONTROLLER_IP=$HOST_IP
fi

 
HOSTNAME=`$SSH_ROOT $HOST_IP "hostname"`
CONTROLLER_HOSTNAME=`$SSH_ROOT $CONTROLLER_IP "hostname -s"`
if [ $CONTROLLER_HOSTNAME == "tapti" ]; then
	CURR_GRUNT=1
else
	CURR_GRUNT=`expr "$CONTROLLER_HOSTNAME" : 'grunt\([0-9]*\).*'`
fi
FIXED_RANGE=10.0.$CURR_GRUNT.0/24
FIXED_NETWORK_SIZE=256
NETWORK_GATEWAY=10.0.$CURR_GRUNT.1

#if [[ "`hostname -s`" =~ grunt ]]; then
#	if [ $HOSTNAME != "`hostname`" ]; then
#		echo "running this script on one grunt against another grunt is not allowed"
#		exit 1
#	fi
#fi


if $UNSTACK; then
    # Uninstall openstack
    $SSH_ROOT $HOSTNAME "su - stack -c 'cd devstack && ./unstack.sh'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'cd devstack && ./clean.sh'"

elif $REJOIN; then
    # Rejoin the stack after the reboot
    $SSH_ROOT $HOSTNAME "vgs stack-volumes || true"
    $SSH_ROOT $HOSTNAME "losetup -f --show /opt/stack/data/stack-volumes-backing-file || true"
    $SSH_ROOT $HOSTNAME "vgcreate stack-volumes /dev/loop0 || true"
    $SSH_ROOT $HOSTNAME "/sbin/service tgtd restart || true"
    $SSH_ROOT $HOSTNAME "/sbin/service httpd restart || true"
    $SSH_ROOT $HOSTNAME "/sbin/service rabbitmq-server restart || true"
    $SSH_ROOT $HOSTNAME "/sbin/service mysqld start || true"
    #$SSH_ROOT $HOSTNAME "su - stack -c /home/stack/devstack/rejoin-stack.sh || true"
    ssh -tt -i $HOME/.ssh/id_grunt -o StrictHostKeyChecking=no root@$HOSTNAME "su - stack -c /home/stack/devstack/rejoin-stack.sh || true"
    $SSH_ROOT $HOSTNAME "su - stack -c /home/stack/devstack/rejoin-neutron.sh || true"

else
    #Check Neutron pre-requisite
    if $NEUTRON_ENABLED; then
         $SSH_ROOT $HOSTNAME ifconfig br-ex >/dev/null 
         if [ $? -ne 0 ]; then
              echo "OVS bridge br-ex not found"
              echo "Neutron enable requires that the target host has br-ex OVS bridge configured"    
              echo "and the primary interface added as a port to the bridge"    
              print_usage
         fi
         if $LEGACY; then
              echo "Neutron not supported with legacy devstack"
              print_usage
         fi
    fi

    $SSH_ROOT $HOSTNAME ifconfig $PUBLIC_INTERFACE >/dev/null 
    if [ $? -ne 0 ]; then
        echo "PUBLIC INTERFACE $PUBLIC_INTERFACE not found"
        print_usage
    fi

    if ! $SSH_ROOT $HOSTNAME ifconfig $PUBLIC_INTERFACE | grep -q $HOST_IP; then
        echo "HOST IP $HOST_IP does not appear to be associated with PUBLIC_INTERFACE $PUBLIC_INTERFACE"
        print_usage
    fi

    $SSH_ROOT $HOSTNAME yum install -y lorax-20.4-2.fc20.x86_64 pungi-3.03-1.fc20.noarch \
        pycryptopp-0.6.0.1206569328141510525648634803928199668821045408958-4.fc20.x86_64 \
        python-beaker-1.5.4-8.fc20.noarch \
        python-kid-0.9.6-12.fc20.noarch \
        python-mako-0.7.3-2.fc20.noarch \
        git

    # clone the openstack repository
    if [[ "$RIFTSTACK_DIR" == "" ]]; then
        TMPDIR=`ssh $HOSTNAME "mktemp -d"`
        ssh $HOSTNAME bash -c "'
            chmod 755 $TMPDIR
            cd $TMPDIR
            if $LEGACY; then
                /usr/rift/bin/rwclone --repo=openstack riftstack
                cd riftstack
                make rw.checkout.world
            else
                /usr/rift/bin/rwclone riftstack
                cd riftstack
                . /usr/rift/scripts/env/rift.sh
                make rw.checkout.stack
            fi 
            $TMPDIR/riftstack/scripts/cloud/openstack_githash $TMPDIR/riftstack
        '"
        RIFTSTACK_DIR=$TMPDIR/riftstack
    fi

    # Copy the devstack install files to root home directory
    if $LEGACY; then
        $SSH_ROOT $HOSTNAME "cp $RIFTSTACK_DIR/projects/devstack/devstack_preinstall.sh ."
    else
        $SSH_ROOT $HOSTNAME "cp $RIFTSTACK_DIR/modules/openstack/devstack/devstack_preinstall.sh ."
    fi

    # Run the devstack preinstall routines. For this to work properly 
    # "Defaults requiretty" should be commented out in /etc/suoders
    $SSH_ROOT $HOSTNAME "./devstack_preinstall.sh $RIFTSTACK_DIR"

    ##
    # Create the localrc file in ~stack/devstack
    ##
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo ADMIN_PASSWORD=mypasswd > devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo MYSQL_PASSWORD=mypasswd >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo RABBIT_PASSWORD=mypasswd >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo SERVICE_PASSWORD=mypasswd >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo SERVICE_TOKEN=mypasswd >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo LOG=True >> devstack/localrc'"
    # $SSH_ROOT $HOSTNAME "su - stack -c 'echo VERBOSE=False >> devstack/localrc'"
    # $SSH_ROOT $HOSTNAME "su - stack -c 'echo ENABLE_DEBUG_LOG_LEVEL=False >> devstack/localrc'"

    $SSH_ROOT $HOSTNAME "su - stack -c 'echo SCREEN_LOGDIR=/opt/stack/logs/screen >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo LOGFILE=/opt/stack/logs/stack.sh.log >> devstack/localrc'"

    $SSH_ROOT $HOSTNAME "su - stack -c 'echo HOST_IP=$HOST_IP >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo PUBLIC_INTERFACE=$PUBLIC_INTERFACE >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo FLAT_INTERFACE=$FLAT_INTERFACE >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo FIXED_RANGE=$FIXED_RANGE >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo FIXED_NETWORK_SIZE=$FIXED_NETWORK_SIZE >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo FLOATING_RANGE=$FLOATING_RANGE>> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo MULTI_HOST=1 >> devstack/localrc'"
    $SSH_ROOT $HOSTNAME "su - stack -c 'echo KEYSTONE_ADMIN_BIND_HOST=0.0.0.0 >> devstack/localrc'"

    if $NEUTRON_ENABLED; then
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo NETWORK_GATEWAY=$NETWORK_GATEWAY >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo PUBLIC_NETWORK_GATEWAY=$PUBLIC_NETWORK_GATEWAY >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo Q_FLOATING_ALLOCATION_POOL=start=$FLOATING_ADDR_START,end=$FLOATING_ADDR_END >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo ENABLE_TENANT_VLANS=True >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo TENANT_VLAN_RANGE=1:100 >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo PHYSICAL_NETWORK=physnet1 >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo OVS_PHYSICAL_BRIDGE=br-$FLAT_INTERFACE >> devstack/localrc'"
    fi
    	
    if $CONTROLLER_IP_SET; then
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo DATABASE_TYPE=mysql >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo SERVICE_HOST=$CONTROLLER_IP >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo MYSQL_HOST=$CONTROLLER_IP >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo RABBIT_HOST=$CONTROLLER_IP >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo GLANCE_HOSTPORT=$CONTROLLER_IP:9292 >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo VNCSERVER_LISTEN=0.0.0.0 >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo VNCSERVER_PROXYCLIENT_ADDRESS=$HOST_IP >> devstack/localrc'"

        if $NEUTRON_ENABLED; then	
             $SSH_ROOT $HOSTNAME "su - stack -c 'echo ENABLED_SERVICES=rabbit >> devstack/localrc'"
             $SSH_ROOT $HOSTNAME "su - stack -c 'echo ENABLED_SERVICES+=,n-cpu,n-novnc,n-cauth,q-agt,neutron >> devstack/localrc'"
        else
             $SSH_ROOT $HOSTNAME "su - stack -c 'echo ENABLED_SERVICES=n-cpu,n-net,n-api,c-sch,c-api,c-vol,n-novnc,n-xvnc >> devstack/localrc'"
        fi	     
			     
    elif $NEUTRON_ENABLED; then
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo disable_service n-net >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo enable_service q-svc >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo enable_service q-agt >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo enable_service q-dhcp >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo enable_service q-l3 >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo enable_service q-meta >> devstack/localrc'"
        $SSH_ROOT $HOSTNAME "su - stack -c 'echo enable_service neutron >> devstack/localrc'"
    fi

    $SSH_ROOT $HOSTNAME "ip link set $FLAT_INTERFACE promisc on"

    ##
    # Invoke the stack script
    ##
    $SSH_ROOT $HOSTNAME "su - stack -c 'cd devstack && ./stack.sh'"

    rm -rf $TMPDIR

    if $NEUTRON_ENABLED; then
        $SSH_ROOT $HOSTNAME "ovs-vsctl add-port br-$FLAT_INTERFACE $FLAT_INTERFACE"
    fi	
fi
