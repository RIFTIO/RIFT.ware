#!/bin/bash

# this script needs to be run on a controller node after every reboot
if [ -f /root/keystonerc_admin ]; then
    . /root/keystonerc_admin
    pub_subnet_name="public_subnet"
elif [ -f /home/stack/devstack/accrc/admin/admin ]; then
    . /home/stack/devstack/accrc/admin/admin
    pub_subnet_name="public-subnet"
else
   echo "Can't find /root/keystonerc_admin or /home/stack/devstack/accrc/admin/admin"
   exit 1
fi

public_subnet_cidr=`neutron net-list | awk '/public/{print $7}' | cut -d '/' -f2`
myip=`neutron subnet-show $pub_subnet_name | awk '/gateway_ip/ { print $4; }'`
if [ -z "$myip" ]; then
    echo error retrieving gateway_ip address
    exit 1
fi
set -x
sudo ip addr add ${myip}/${public_subnet_cidr} dev br-ex
set +x

rc=0
function add_route {
    router=$1
    if [ -z "$router" ]; then
        echo "Router not specified for add_route"
        exit 1
    fi

    routerip=`neutron router-show $1 | perl -n -e 'print $1 if /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/;'`

    if [ -z "$routerip" ]; then
        echo error parsing routers IP
        neutron router-port-list $1
        rc=1
        return
    fi

    ports=(`neutron router-port-list $router|grep ip_address|perl -n -e 'print "$1\n" if /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/;'`)
    for ip in "${ports[@]}"; do
        if [ "$ip" == "$routerip" ]; then
            # Skip this as this is gateway ip
            continue
        else
            #private_subnet=`neutron net-list | awk '/ private / { print $7; }'`
            if [ -z "$ip" ]; then
                echo error retrieving private subnet
                neutron router-port-list $router
                rc=1
                return
            fi

            # Get subnet info
            subnetid=`neutron router-port-list $router|grep $ip|perl -n -e 'print $1 if /subnet_id.+?([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/'`
            if [ -z "$subnetid" ]; then
                echo "Error retrieving subnet id for $ip"
                neutron router-port-list $router
                exit 1
            fi
            subnet=`neutron net-list|grep $subnetid|perl -n -e 'print $1 if /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2})/'`
            if [ -z "$subnet" ]; then
                echo "Error retrieveing subnet from id $subnetid"
                neutron net-list
                rc=1
                return
            fi

            set -x
            sudo route add -net $subnet gw $routerip
            set +x
        fi
    done
}

if [ -f /root/keystonerc_admin ]; then
    routers=(`neutron router-list|grep network_id|sed 's/\s\+//g'|cut -d '|' -f3`)
else
    routers=(router1)
fi

for router in "${routers[@]}"; do
    add_route $router
done

if [ -f /root/keystonerc_admin ]; then
    systemctl restart neutron-l3-agent.service
    systemctl restart neutron-server
fi

exit $rc

