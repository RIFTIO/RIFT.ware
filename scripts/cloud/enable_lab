#!/bin/bash


function usage()
{
cat <<-END >&2
    USAGE: $0 [-c] [-s site]
        -c            # cause short circuit if the system is already in lab 
                      # mode. Good for running via do_cloud
        -s site       # site options: "blr" or  "eng", default is "eng"
        -d            # debug mode
        -h            # this help
   
END
   exit
}

### process options
while getopts s:ch opt
do
        case $opt in
        s)      opt_site=1; site=$OPTARG ;;
        c)      opt_circuit_short=1 ;;
        d)      opt_debug=1 ;;
        h|?)    usage ;;
        esac
done

START=`date`

if [ `whoami` != "root" ]; then
    echo must be root
    exit 1
fi

RIFT_ROOT=${RIFT_ROOT:-/usr/rift}

if [ "$1" = "-c" -a -h /usr/rift ]; then
    # the -c option can cause this script to short circuit if the system 
    # is already in lab mode. Good for running via do_cloud
    echo "already in lab mode"
    exit 0
fi

LAB=${site:=eng}

echo "Running $0 for $LAB site"

#chattr -i /etc/resolv.conf
if [ $LAB = blr ]; then
    cat >/etc/resolv.conf <<EOF 
search blr.riftio.com blrlab.riftio.com eng.riftio.com
nameserver 10.110.0.1
EOF
else
    cat >/etc/resolv.conf <<EOF 
search lab.riftio.com eng.riftio.com riftio.com
nameserver 10.64.1.3
EOF
fi
#chattr +i /etc/resolv.conf
# chattr shouldn't really be needed if the DNS is setup properly and was messing up building ui-lab on top of ui vm_image RIFT-12184

cat >>/etc/hosts <<EOF
10.64.10.50 boson boson.eng.riftio.com
10.64.10.54 tau tau.eng.riftio.com
10.110.1.4 ganga ganga.blr.riftio.com
EOF

yum -y install bind-utils
host charm.eng.riftio.com
if [ $? -ne 0 ]; then
    echo "Unable to resolve hostname charm.eng.riftio.com. Are you really connected to the lab net?"
    exit 1
fi

ping charm.eng.riftio.com -c 1
if [ $? -ne 0 ]; then
    echo "unable to ping charm. Are you really connected?"
    exit 1
fi

time $RIFT_ROOT/scripts/setup/scripts/ldap $LAB

time yum -y install autofs net-tools git python-pip rpcbind nfs-utils
echo "setting up autofs...."
systemctl restart rpcbind
systemctl enable rpcbind
systemctl start autofs
systemctl enable autofs
echo "...done"


echo "setting up /usr/rift...."
if [ ! -h /usr/rift ]; then
    test -e /usr/rift && mv /usr/rift /usr/rift.local
    if [ $LAB = blr ]; then
        ln -s /net/ganga/usr/rift /usr/rift
    else
        #ln -s /net/charm/usr/rift /usr/rift
	echo "No symlink needed now."
    fi
fi
cat >/etc/profile.d/rift.sh <<EOF
if [ -n "\$USER" -a "\$USER" != "root" ]; then
    . /usr/rift/scripts/env/rift.sh
fi
EOF

echo "...done"


# PIPs should now be in the qcow
#echo "pip install...."
#/usr/rift/bin/pip-install -r /usr/rift/scripts/setup/PIP
#echo "...done"


# THIS NEEDS TO BE REVERSIBLE or OPTIONAL
# it also should be earlier
if [ ! -f /etc/yum.tar ]; then
    tar cf /etc/yum.tar -C /etc/yum.repos.d .
fi

#if [[ "`uname -r`" =~ fc20 ]]; then
#    echo "updating YUM...."
#    # qcow has riftware-release now which has the rift frozen repos installed
#    #cp -f /usr/rift/scripts/setup/skel/etc/yum.repos.d/* /etc/yum.repos.d
#    echo "done"
#else
#    echo "NOT updating yum"
#fi

cp /usr/rift/scripts/setup/skel/etc/nfsmount.conf /etc/nfsmount.conf

echo "setting up passwordless ssh"
if [ ! -f /root/.ssh/authorized_keys ]; then
    if [ ! -d /root/.ssh ]; then
        mkdir /root/.ssh
    fi
    #cp $RIFT_ROOT/scripts/setup/skel/root/.ssh/authorized_keys /root/.ssh/
    chmod 700 /root/.ssh
    chmod 600 /root/.ssh/authorized_keys
fi
mkdir -p /home/rift/.ssh
if [ ! -f /home/rift/.ssh/authorized_keys ]; then
    #cp $RIFT_ROOT/scripts/vm/home/rift/.ssh/* /home/rift/.ssh/
    chmod 700 /home/rift/.ssh
    chmod 600 /home/rift/.ssh/authorized_keys
fi
chown rift:rift /home/rift -R
echo "...done"

echo "updating hosts file...."
$RIFT_ROOT/scripts/cloud/UpdateHostsFile
echo "...done"

echo "creating profile.d/rift.sh"
cat >/etc/profile.d/rift.sh <<EOF
if [ -n "$USER" -a "$USER" != "root" ]; then
    . /usr/rift/scripts/env/rift.sh
fi
EOF
echo "...done"

#echo "creating user directories under /localdisk..."
#/usr/rift/scripts/setup/scripts/localdisk
#echo "...done"

echo "setting timezone...."
rm -f /etc/localtime
ln -s /usr/share/zoneinfo/US/Eastern /etc/localtime
echo "...done"

END=`date`
echo "===== TIMER ===== ${START} -> ${END} ";
