#!/bin/bash

# this script should be run on the openstack controller node
# the argument is the IP address or name of the VM you are interested in
# the output is a list of the virtual bus ids on the PCI devices and the switch name that 
# they are connected to, one per line
# this all depends on the latest version of grunt_portmap.sh having been run on the grunt


debug=0
if [ "$1" == "-d" ]; then
	debug=1
	shift
fi

if [ $# -ne 1 ]; then
	echo arg is IPAddress
	exit 1
fi

DEBUG() { 
	if [ $debug -eq 1 ]; then
		echo "$*" >&2
	fi
}


IPADDRESS=$1

error() { 
    echo $*
    exit 1
}

if [ -f /root/keystonerc_admin ]; then
	. /root/keystonerc_admin
elif [ -f /home/stack/devstack/accrc/admin/admin ]; then 
	. /home/stack/devstack/accrc/admin/admin
else
	echo "error -- keystone admin rc file not found"
	exit 1
fi

ID=`nova list --all-tenants 1 | egrep "$IPADDRESS[ ;]" | cut -f2 -d\|`
[ -z "$ID" ] && error "no instance with IP Address or name \"$IPADDRESS\" found"

HOST=`nova show $ID | grep 'OS-EXT-SRV-ATTR:hypervisor_hostname' | cut -f3 -d\|`
[ -z "$HOST" ] && error "no HOST found for instance ID \"$ID\""
set $HOST
HOST=$1

INSTANCE=`nova show $ID | grep 'OS-EXT-SRV-ATTR:instance_name' | cut -f3 -d\|`
[ -z "$INSTANCE" ] && error "no kvm instance found for openstack ID \"$ID\""
set $INSTANCE
INSTANCE=$1


# storing the RE's in vars avoids all sorts of quoting issues
RE_REAL='<address domain="0x(....)" bus="0x(..)" slot="0x(..)" function="0x(.)" />'
RE_VIRT='<address type="pci" domain="0x(....)" bus="0x(..)" slot="0x(..)" function="0x(.)" />'
DEBUG "HOST is $HOST, INSTANCE is $INSTANCE"

# get the biosdevname file and the XML from the real host
if [ ! -f /tmp/biosdevname.$HOST ]; then
	/usr/rift/bin/ssh_root $HOST cat /var/log/rift_biosdevname.log >/tmp/biosdevname.$HOST
fi
/usr/rift/bin/ssh_root $HOST virsh dumpxml $INSTANCE  | xpath  'domain/devices/hostdev' 2>/dev/null | while read line
do
	# DEBUG $line
	if [[ $line =~ $RE_REAL ]]; then
		busid="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}.${BASH_REMATCH[4]}"
		# DEBUG "found busid $busid"
	fi
	if [[ $line =~ $RE_VIRT ]]; then
		virtbusid="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}.${BASH_REMATCH[4]}"
		# DEBUG "found virt busid $virtbusid"
		if [ -z "$busid" ]; then
			echo "ERROR: no real BUSID for virtual busid $virtbusid" >&2
		else
			switch=`grep $busid /tmp/biosdevname.$HOST | cut -f5 -d\ `
            DEBUG "virtual device \"$virtbusid\" is actually device \"$busid\" which is connected to \"$switch\""
			echo "$virtbusid $switch $busid"
			busid=""
		fi
	fi
done



