# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#
# Author(s): Anil Gunturu
# Creation Date: 07/24/2014
# 

# This script prepares the host for running VMs
# Specifically this script ensures that proper options are passed to the
# kernel for PCI passthrough and hugepage support. This script MUST be
# run as root.
#
# NOTE: Only target for Fedora 20 and Intel based systems
# 

function print_usage() {
    echo "Usage: $0 [-b bridge] [-e public_interface] [-m hugepage_cnt] [-h help ]"
    echo "       Optional arguments"
    echo "       -h|--help HELP"
    echo "       -b|--bridge BRIDGE"
    echo "       -e|--public-interface PUBLIC_INTERFACE"
    echo "       -m|--hugepage-cnt HUGEPAGE_COUNT"
    echo "       -o|--ovs-bridge OVS-BRIDGE"
    exit 1
}

force=0
if [ "$1" == "--force" ]; then
    force=1
    shift
fi


# calculate the maximum number of huge pages to allocate
# 4608 pages or 25% of available memory whichever is LESS
mem=`awk '/MemFree: / { print $2 }' /proc/meminfo`
pgsize=`awk '/Hugepagesize: / { print $2 }' /proc/meminfo`
maxhugepages=`expr $mem / $pgsize / 4`
if [ $maxhugepages -gt 4608 ]; then
    maxhugepages=4608
fi

bridge=none
pub_eth=none
hugepage_cnt=$maxhugepages
ovs_bridge=none


##
# Parse options
##
while [[ $# > 0 ]]
do
key="$1"
shift
case $key in
    -b|--bridge)
    bridge=$1
    shift
    ;;
    -h|--help)
    print_usage
    ;;
    -e|--public-interface)
    pub_eth=$1
    shift
    ;;
    -m|--hugepage-cnt)
    hugepage_cnt=$1
    shift
    ;;
    -o|--ovs-bridge)
    ovs_bridge=$1
    shift
    ;;
    *)
    echo "Error: invalid command line option $key"
    print_usage
    ;;
esac
done

reboot=0
net_restart=0

# Must be root to execute this script
if [[ ! `whoami` = "root" ]]; then
  echo "You are `whoami`"
  echo "Must be root to execute this script"
  echo "Exiting..."
  exit 1
fi

# verify that the kernel version is Fedora 20
if [[ ! `uname -r` =~ fc2[0-1] ]]; then
    echo -n "Current kernel version is: "
    uname -r
    echo "This script is tested only on Fedora 20/21 kernel"
    if [ $force == 0 ]; then
     exit 1
    fi
    echo 'use --force as the first arg to override'
fi

vendor_id=`cat /proc/cpuinfo | grep vendor_id | uniq | awk '{print $3}'`
if [[ $vendor_id != 'GenuineIntel' ]]; then
    echo "The current CPU vendor is: "$vendor_id
    echo "This script is tested only on Intel based systems"
   if [ $force == 0 ]; then
    exit 1
   fi
fi

# install the packages
# what aren't these loaded by sync.sh
yum -y install qemu qemu-kvm-tools libvirt-daemon-qemu kvm virt-manager libvirt libvirt-python virt-install libguestfs libguestfs-tools genisoimage

# the acl permissions on /root for qemu user, 
# otherwise cloud images can't be created in a subdirectory of /root
setfacl -m u:qemu:x /root

# verify that numa optimization is enabled
socket_cnt=`lscpu | grep Socket | awk '{print $2}'`
node_cnt=`lscpu | grep "NUMA node(s)" | awk '{print $3}'`
if [[ $node_cnt != $socket_cnt ]]; then
    echo "NUMA node count ($node_cnt), doesn't match the socket count ($socket_cnt)"
    echo "Update the BIOS setting 'NUMA Optimized' to 'Enabled'"
    echo "Details about the BIOS settings can be found @ http://boson.eng.riftio.com/wiki/doku.php?id=server_settings"
    reboot=1
fi

# verify that kernel is started with intel_iommu=on
grep -q "intel_iommu=on" /proc/cmdline
if [[ $? != 0 ]]; then
    echo "The kernel is NOT started with intel_iommu=on"
    reboot=1
fi

# verify that kernel is started with iommu=pt
grep -q "iommu=pt" /proc/cmdline
if [[ $? != 0 ]]; then
    echo "The kernel is NOT started with iommu=pt"
    reboot=1
fi

# update the grub defaults if necessary
makegrub=0
if grep -q "rhgb quiet" /etc/default/grub; then
    sed -i "s/rhgb quiet//g" /etc/default/grub
    makegrub=1
fi
if ! grep -q "intel_iommu=on" /etc/default/grub; then
    sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="intel_iommu=on /g' /etc/default/grub
    makegrub=1
fi
if ! grep -q "iommu=pt" /etc/default/grub; then
    sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="iommu=pt /g' /etc/default/grub
    makegrub=1
fi

if [ $makegrub == 1 ]; then
    grub2-mkconfig --output=/boot/grub2/grub.cfg
    if [ -d /boot/efi ]; then
        grub2-mkconfig --output=/boot/efi/EFI/fedora/grub.cfg
    fi
fi
    
    
    

if [ $bridge != "none" ]; then
    # check if the public interface is part of the bridge
    brctl show $bridge | grep -q $pub_eth
    if [[ $? != 0 ]]; then
        reboot=1
        net_restart=1
    fi

    # create a network config file for the bridge, if it doesn't already exist
    if [[ ! -e /etc/sysconfig/network-scripts/ifcfg-$bridge ]]; then

        cat > /etc/sysconfig/network-scripts/ifcfg-$bridge << EOF
DEVICE=$bridge 
TYPE=Bridge
BOOTPROTO=dhcp
ONBOOT=yes
DELAY=0
NAME=$bridge 
NM_CONTROLLED=no
EOF
        reboot=1
        net_restart=1

    fi

    # update the public ethernet config if necessary
    ethfile_path=/etc/sysconfig/network-scripts/ifcfg-$pub_eth
    grep -q BRIDGE $ethfile_path
    if [[ $? != 0 ]]; then
        echo "BRIDGE="$bridge >> $ethfile_path
        echo "NM_CONTROLLED=no" >> $ethfile_path
        sed -i 's/BOOTPROTO=dhcp/# BOOTPROTO=dhcp/g' $ethfile_path
        net_restart=1
    fi
    systemctl enable network
fi

if [ $ovs_bridge != "none" ]; then
    #Install openvswitch package
    yum -y install openvswitch
    	
    # create a network config file for the bridge, if it doesn't already exist
    if [[ ! -e /etc/sysconfig/network-scripts/ifcfg-$ovs_bridge ]]; then

        cat > /etc/sysconfig/network-scripts/ifcfg-$ovs_bridge << EOF
# GENERATED by PREPARE_HOST 
DEVICE=$ovs_bridge 
TYPE=OVSBridge
DEVICETYPE=ovs
OVSBOOTPROTO=dhcp
OVSDHCPINTERFACES=$pub_eth
DHCPINTERFACES=$pub_eth
ONBOOT=yes
DELAY=0
NAME=$ovs_bridge 
NM_CONTROLLED=no
EOF
        reboot=1
        net_restart=1

    fi

    # update the public ethernet config if necessary
    ethfile_path=/etc/sysconfig/network-scripts/ifcfg-$pub_eth
    grep -q OVS_BRIDGE $ethfile_path
    if [[ $? != 0 ]]; then
        if [ -f $ethfile_path ]; then
            hwaddr=`grep HWADDR $ethfile_path`
        fi
        if [ -z "$hwaddr" ]; then
            hwaddr="HWADDR=`ip addr show dev $pub_eth | awk '/ether/ { print $2 }' `"
        fi
        echo "updating $ethfile_path with hw address $hwaddr"
        cat <<EOF >$ethfile_path
# GENERATED by PREPARE_HOST 
OVS_BRIDGE=$ovs_bridge
NM_CONTROLLED=no
DEVICETYPE=ovs
ONBOOT=yes
DEVICE=$pub_eth
NAME=$pub_eth
BOOTPROTO=none
TYPE=OVSPort
$hwaddr
EOF
        net_restart=1
    fi
    systemctl enable network
fi

# check hugepage configuration
grep -q "^vm.nr_hugepages" /etc/sysctl.conf
if [[ $? == 0 ]]; then
    sed -i "s/\s*vm.nr_hugepages.*/vm.nr_hugepages=$hugepage_cnt/g" /etc/sysctl.conf
else
    echo "vm.nr_hugepages=$hugepage_cnt" >> /etc/sysctl.conf
fi

curr_hugepage_cnt=`grep HugePages_Total /proc/meminfo | awk '{print $2}'`
if [[ $curr_hugepage_cnt != $hugepage_cnt ]]; then
    echo "Current hugepage count ($curr_hugepage_cnt) is less than $hugepage_cnt"
    reboot=1
fi

echo 1 > /proc/sys/net/ipv4/ip_forward
echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
sysctl -w net.ipv4.conf.all.rp_filter=0
sysctl -w net.ipv4.conf.default.rp_filter=0

# output final messages
if [[ $reboot == 0 && $net_restart == 0 ]]; then
	echo -e "\n\n*****************\nSystem is prepared\n***************"
	exit 0
fi
if [[ $reboot == 1 ]]; then
    echo "Reboot the system to get the updated configuration"
fi

if [[ $net_restart == 1 ]]; then
    echo "Interface $pub_eth is not on bridge $bridge"
    echo "Restart networking using the following command:"
    echo "    /etc/rc.d/init.d/network restart"
fi
