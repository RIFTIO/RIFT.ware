#! /bin/bash

# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#
# 

# This script is used for installing openstack
# using packstack.
# This script should be run as root.

set -e

function print_usage() {
  echo "Usage: $0 [-h HOST_IP] [-i FLOATING_IP] [-p PRIVATE_IP ] [-f FLAT_INTERFACE] [-c COMPUTE_NODES] [-v VLAN_RANGE] [-d DNS_SERVER_LIST ]"
  echo "Usage eg: $0 -h 10.64.4.28 -i 10.64.28.0 -p 10.0.28.0 -v 10:19 -d \"10.66.0.1 10.66.02\""
  echo "       Mandatory arguments"
  echo "       -h|--host-ip HOST_IP"
  echo "       -i|--floating-ip FLOATING_IP - IP for floating pool (/24 subnet will be used )"
  echo "       -p|--private-ip PRIVATE_IP - IP for private pool (/24 subnet will be used )"
  echo "       Optional arguments"
  echo "       -f|--flat-interface FLAT_INTERFACE"
  echo "       -c|--compute-nodes COMPUTE_NODES  - Comma seperated list of compute node IPs"
  echo "       -v|--vlan-range VLAN_RANGE -- colon separated list of start and end VLAN IDs, e.g. 1:10"
  echo "       -d|--dns-servers DNS_SERVER_LIST -- space separated list of DNS servers (minimum 2)"
  exit 1
}

FLAT_INTERFACE=eth1
MYSQL_USER=mysql
VLAN_RANGE=1:10
DNS_SERVERS=""

##
# Parse options
##
while [[ $# > 0 ]]
do
key="$1"
shift
case $key in
    -h|--host-ip)
    HOST_IP=$1
    shift
    ;;
    -p|--private-ip)
    PRIVATE_IP=$1
    shift
    ;;
    -i|--floating-ip)
    FLOATING_IP=$1
    shift
    ;;
    -f|--flat-interface)
    FLAT_INTERFACE=$1
    shift
    ;;
    -c|--compute-nodes)
    COMPUTE_NODES=$1
    shift
    ;;
    -v|--vlan-range)
    VLAN_RANGE=$1
    shift
    ;;
    -d|--dns-servers)
    DNS_SERVERS=$1
    shift
    ;;
    *)
    print_usage
    ;;
esac
done

if [[ "$HOST_IP" == "" ]]; then
    echo "Must specify the host ip address using -h option"
    print_usage
fi

# Must be root to execute this script
if [[ ! `whoami` = "root" ]]; then
  echo "You are `whoami`"
  echo "Must be root to execute this script"
  echo "Exiting..."
  exit 1
fi


cd /root



if [ ! -f answers.cfg ]; then
      if [[ "$COMPUTE_NODES" == "" ]]; then
           COMPUTE_NODES=$HOST_IP          
      fi
      if [[ "$PRIVATE_IP" == "" ]] || [[ "$FLOATING_IP" == "" ]]; then
           echo "Must specify private-ip and floating-ip parameters"
           print_usage
      fi
      yum install -y openstack-packstack
      packstack --gen-answer-file=answers.cfg

      sed -i "/^nova_config.*$/a\    \"DEFAULT/pci_passthrough_whitelist\": value \=\> \"[{\\\\\"vendor_id\\\\\":\\\\\"8086\\\\\",\\\\\"product_id\\\\\":\\\\\"10fb\\\\\"}]\"\;" /usr/lib/python2.7/site-packages/packstack/puppet/templates/nova_common.pp
      sed -i "/^nova_config.*$/a\    \"DEFAULT/pci_alias\": value \=\> \"{\\\\\"vendor_id\\\\\":\\\\\"8086\\\\\", \\\\\"product_id\\\\\":\\\\\"10fb\\\\\", \\\\\"name\\\\\":\\\\\"PCI_10G_ALIAS\\\\\"}\"\;" /usr/lib/python2.7/site-packages/packstack/puppet/templates/nova_common.pp
      sed -i 's/^.*RetryFilter.*$/\        value \=\> \"AggregateInstanceExtraSpecsFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,AvailabilityZoneFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,CoreFilter,PciPassthroughFilter\"\;/g' /usr/lib/python2.7/site-packages/packstack/puppet/templates/nova_sched.pp
      sed -i "s/^.*pipeline.*$/\    pipeline =\> 'keystone+cachemanagement',/" /usr/lib/python2.7/site-packages/packstack/puppet/templates/glance.pp
      sed -i "s/^.*force_dhcp_release.*$/\    \$overrides['force_dhcp_release'] = true/" /usr/lib/python2.7/site-packages/packstack/puppet/templates/nova_network.pp
      sed -i "s/^.*10.0.0.0.*$/\  \$fixed_range               = '$PRIVATE_IP\\/24'/" /usr/lib/python2.7/site-packages/packstack/puppet/templates/provision_demo.pp
      sed -i "/^.*neutron_admin_auth_url.*$/a\  vif_plugging_is_fatal => false," /usr/lib/python2.7/site-packages/packstack/puppet/templates/nova_neutron.pp
      sed -i "/^.*neutron_admin_auth_url.*$/a\  vif_plugging_timeout => \"30\"," /usr/lib/python2.7/site-packages/packstack/puppet/templates/nova_neutron.pp
      sed -i "/^.*securitygroup\/enable_security_group.*$/a\    \'securitygroup\/firewall_driver\':       value \=\> dummy\;" /usr/share/openstack-puppet/modules/neutron/manifests/plugins/ml2.pp
	     
      # Update the PUBLIC and PRIVATE interfaces
      sed -i s/CONFIG_KEYSTONE_DEMO_PW=.*$/CONFIG_KEYSTONE_DEMO_PW=mypasswd/g answers.cfg
      sed -i s/CONFIG_KEYSTONE_ADMIN_PW=.*$/CONFIG_KEYSTONE_ADMIN_PW=mypasswd/g answers.cfg
      sed -i s/CONFIG_PROVISION_DEMO_FLOATRANGE=.*$/CONFIG_PROVISION_DEMO_FLOATRANGE=$FLOATING_IP\\/24/g answers.cfg
      sed -i s/CONFIG_NEUTRON_ML2_TYPE_DRIVERS=.*$/CONFIG_NEUTRON_ML2_TYPE_DRIVERS=vlan/g answers.cfg
      sed -i s/CONFIG_NEUTRON_ML2_TENANT_NETWORK_TYPES=.*$/CONFIG_NEUTRON_ML2_TENANT_NETWORK_TYPES=vlan/g answers.cfg
      sed -i s/CONFIG_NEUTRON_ML2_VLAN_RANGES=.*$/CONFIG_NEUTRON_ML2_VLAN_RANGES=physnet1:$VLAN_RANGE/g answers.cfg
      sed -i s/CONFIG_NEUTRON_OVS_TENANT_NETWORK_TYPE=.*$/CONFIG_NEUTRON_OVS_TENANT_NETWORK_TYPE=vlan/g answers.cfg
      sed -i s/CONFIG_NEUTRON_OVS_VLAN_RANGES=.*$/CONFIG_NEUTRON_OVS_VLAN_RANGES=physnet1:$VLAN_RANGE/g answers.cfg
      sed -i s/CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=.*$/CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=physnet1:br-$FLAT_INTERFACE/g answers.cfg
      sed -i s/CONFIG_NEUTRON_OVS_BRIDGE_IFACES=.*$/CONFIG_NEUTRON_OVS_BRIDGE_IFACES=br-$FLAT_INTERFACE:$FLAT_INTERFACE/g answers.cfg
      sed -i s/CONFIG_SWIFT_INSTALL=.*$/CONFIG_SWIFT_INSTALL=n/g answers.cfg
      sed -i s/CONFIG_CEILOMETER_INSTALL=.*$/CONFIG_CEILOMETER_INSTALL=n/g answers.cfg
      sed -i s/CONFIG_NAGIOS_INSTALL=.*$/CONFIG_NAGIOS_INSTALL=n/g answers.cfg
      sed -i s/CONFIG_CINDER_INSTALL=.*$/CONFIG_CINDER_INSTALL=n/g answers.cfg
      sed -i s/^CONFIG_NETWORK_HOSTS=.*$/CONFIG_NETWORK_HOSTS=$HOST_IP/ answers.cfg
      sed -i s/^CONFIG_COMPUTE_HOSTS=.*$/CONFIG_COMPUTE_HOSTS=$COMPUTE_NODES/ answers.cfg
      # Set ethernet link to promiscuous mode
      ip link set $FLAT_INTERFACE promisc on
      # mysql workarounds
      touch /var/log/mysqld.log
      chown mysql:mysql /var/log/mysqld.log 
      restorecon -v /var/log/mysqld.log
      touch /var/log/mariadb/mariadb.log
      chown mysql:mysql /var/log/mariadb/mariadb.log
      restorecon -v /var/log/mariadb/mariadb.log
else
      if [[ "$COMPUTE_NODES" ]]; then
            existing=`perl -ne 'print $1 if /CONFIG_COMPUTE_HOSTS=(.*)/;' answers.cfg`
            # BE careful not to exclude the nodes you are about to install. Comes into play on reinstalls
            if [ -n "$existing" ]; then
                if [[ ,$existing, =~ (.*),$COMPUTE_NODES,(.*) ]]; then
                    existing="${BASH_REMATCH[1]},${BASH_REMATCH[2]}"
                    if [[ $existing == "," ]]; then
                        existing=""
                    elif [[ ${existing} =~ ,*([^,].*[^,]),* ]]; then
                        existing=${BASH_REMATCH[1]}
                    fi
                fi
            fi
            if [ -n "$existing" ]; then 
                if grep -q EXISTING_SERVERS= answers.cfg; then
                    perl -i -p -e "s/EXCLUDE_SERVERS=.*/EXCLUDE_SERVERS=$existing/;" answers.cfg
                else
                    echo EXCLUDE_SERVERS=$existing >>answers.cfg
                fi
            fi
            sed -i "/^CONFIG_COMPUTE_HOSTS/ s/$/,$COMPUTE_NODES/" answers.cfg	      
      fi
fi

# Install packstack
packstack --answer-file=answers.cfg
source /root/keystonerc_admin
myip=`neutron subnet-show public_subnet | awk '/gateway_ip/ { print $4; }'`
set +e
ippres=`ip addr|grep $myip`
if [[ "$ippres" == "" ]]; then
    if [[ "$FLOATING_IP" ]]; then
        echo "Setting routes"	
        IFS=. read ip1 ip2 ip3 ip4 <<< "$FLOATING_IP"
        ipreg=$ip1.$ip2.$ip3.[0-9]+ 	
        #routerip=`neutron router-port-list router1 | perl -n -e 'print $1 if /(10\.64[0-9.]+)/;'`
        routerip=`neutron router-port-list router1 | perl -n -e 'print $1 if /('$ipreg')/;'`
        prvsubnet=`neutron net-list | awk '/ private / { print $7; }'`
        ip addr add ${myip}/24 dev br-ex
        route add -net $prvsubnet gw $routerip					
    fi
fi

if [ -n "$DNS_SERVERS" ]; then
    neutron subnet-update private_subnet --dns-nameservers $DNS_SERVERS
fi

