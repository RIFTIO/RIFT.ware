#!/bin/bash
# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#
# Author(s): Austin Cormier
# Creation Date: 2014/05/22

# This script simplifies the git submodule commit.
# First commit within each submodule and then roll up all commits into a
# final supermodule commit.
# Recursive submodules are NOT supported.
#
# Takes any arguments that git commit takes and forwards them to git commit
# within each submodule and the supermodule.
#
# Usage: git xcommit <git_commit_arg>...
# Example: git xcommit -a -m "Committing changes across all submodules"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$DIR/git-common-functions.sh"

# Argument parsing code is from
# https://github.com/kollerma/git-submodule-tools
args=""
recursive=1
a=0
## build quoted $args and check non-recursive and [-a|--all] args
for arg in "$@"
do
  ## skip --non-recursive
  if [[ "$arg" != "--non-recursive" ]]; then
      args="$args '$arg'"
  else
      recursive=0
  fi
  ## check for -a or --all
  case "$arg" in
      -a|--all)
          a=1
          ;;
      --)
            ;;
      --*)
            ;;
      -*) ## option like -qa
            if [[ "$arg" == *a* ]]; then
                a=1
            fi
            ;;
    esac
done

function commit_in_each_submodule(){
  while read line; do

      pushd "$line" > /dev/null
        ensure_on_local || return 1

        if [[ $(git status -s) ]]; then
          log "INFO - Committing in: $line"
          git commit "$@"
          if [ $? -ne 0 ]; then
            log "ERROR - Failed to commit in: $line"
            return 1
          fi
        fi

        ensure_on_local || return 1
      popd > /dev/null

  done < <(foreach_initialized_submodule)
}

commit_supermodule(){
  if [[ $(git status -s) ]]; then
    log "INFO - Committing Supermodule"
    git commit "$@"
    if [ $? -ne 0 ]; then
      log "ERROR - Failed to commit to supermodule."
      return 1
    fi
  fi
}

check_for_detached_head || exit 1
commit_in_each_submodule "$@" || exit 1
commit_supermodule "$@" || exit 1

if [ $a -ne 1 ] && ! (git check-clean --unstaged --unmerged --exit-code --ignore-submodules=dirty) ; then
    cat >&2 <<EOF
Warning in $PWD:
 Unstaged changes to files under version control.
 To add, use option -a to stage or add files manually with git add <file>.
EOF
fi

