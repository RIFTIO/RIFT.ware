#!/bin/bash
# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#
# Author(s): Austin Cormier
# Creation Date: 2014/05/22

# This script simplifies the git submodule rollup process
# Pushes all the submodules first and then pushes the supermodule.  This
# ensures that anyone pulling the supermodule will have the latest supermodule
# changes.  Otherwise a pull would result in an error.
#
# Will not function if there are any modified files in the workspace or
# if any branch is on a detached head, or not on the local branch.
#
# Recursive submodules are NOT supported.
#
# Example: git-xpush <git push arg>...

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$DIR/git-common-functions.sh"

function commit_in_supermodule(){
  log "Committing in the supermodule"
  git xcommit --author="ruser <RW.User@riftio.com>" -a -m "git-xpush: Auto-commit before push"
  if [ $? -ne 0 ]; then
    log "ERROR - Failed to commit in supermodule after pull"
    exit 1
  fi
}

function push_in_submodules(){
  log "Pushing in the submodules"

  super_branch="$(get_current_branch)"
  [ "$super_branch" == "HEAD" ] && return 1

  while read line; do
    pushd $line >/dev/null
      ensure_on_local || return 1

      log "Pushing in submodule $line $super_branch $@"
      git push origin $super_branch $@
      if [ $? -ne 0 ]; then
        log "ERROR - Failed to push in submodule $line"
        popd > /dev/null
        return 1
      fi

      ensure_on_local || return 1
    popd >/dev/null
  done < <(foreach_initialized_submodule)
}

function push_in_supermodule(){
  log "Pushing in the supermodule"
  super_branch="$(get_current_branch)"
  git push origin "$super_branch" $@
  if [ $? -ne 0 ]; then
    log "ERROR - Failed to push in supermodule."
    return 1
  fi
}

## check for modified content and uncommitted changes
check_for_detached_head || exit 1
check_clean || exit 1
if ! git check-uptodate; then
    echo "**** WORKSPACE IS NOT UP TO DATE ****"
    echo "please run git-xpull and then rerun ALL tests before trying to push again"
    exit 1
fi
log "Peforming git xpull before pushing."
git xpull || exit 1
commit_in_supermodule || exit 1  # Not sure if neccessary after a pull
push_in_submodules $@ || exit 1
push_in_supermodule $@ || exit 1
